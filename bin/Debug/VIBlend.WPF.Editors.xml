<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VIBlend.WPF.Editors</name>
    </assembly>
    <members>
        <member name="T:VIBlend.WPF.Controls.PromptTextBox">
            <summary>
            Represents a control that can be used to display or edit text.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.PromptTextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.PromptTextBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.BorderCornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderCornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderThicknessProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderBrushProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.PromptTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.PromptTextBox"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PromptTextBox.OnApplyTemplate">
            <summary>
            Is called when a control template is applied.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.PromptText">
            <summary>
            Gets or sets the prompt text.
            </summary>
            <value>The prompt text.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.PromptTextBrush">
            <summary>
            Gets or sets the color of the prompt text.
            </summary>
            <value>The color of the prompt text.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.BorderCornerRadius">
            <summary>
            Gets or sets the border corner radius.
            </summary>
            <value>The border corner radius.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderCornerRadius">
            <summary>
            Gets or sets the highlight border corner radius.
            </summary>
            <value>The highlight border corner radius.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderBrush">
            <summary>
            Gets or sets the color of the highlight border.
            </summary>
            <value>The color of the highlight border.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.PromptTextBox.HighlightBorderThickness">
            <summary>
            Gets or sets the highlight border thickness.
            </summary>
            <value>The highlight border thickness.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.MaskInputBase">
            <summary>
            Represents the mask input base class.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.MaskInputBase.EditorValueProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.MaskInputBase.ValueProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.ApplyValue(VIBlend.WPF.Controls.MaskEditor,System.Object)">
            <summary>
            Applies the value.
            </summary>
            <param name="maskEditor">The mask editor.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.MaskInputBase"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.Undo">
            <summary>
            Undo the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.Redo">
            <summary>
            Redo the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.OnValueChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Calls the ValueChanging event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.OnValueChanged(System.EventArgs)">
            <summary>
            Calls the ValueChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskInputBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Calls the PropertyChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskInputBase.EditorValue">
            <summary>
            Gets or sets editor's Value without mask characters.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.MaskInputBase.ValueChanged">
            <summary>
            Occurs when a value is changed.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.MaskInputBase.ValueChanging">
            <summary>
            Occurs when a value is changing.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskInputBase.LastValue">
            <summary>
            Gets editor's Value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskInputBase.Value">
            <summary>
            Gets or sets editor's Value.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.MaskInputBase.PropertyChanged">
            <summary>
            Occurs when a property has changed.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.MaskEditor">
            <summary>
            Represents a mask editor control.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.MaskEditor.MaskProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.MaskEditor.PromptCharProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.#ctor">
            <summary>
            Initializes a new instance of mask editor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.GetMaskItems">
            <summary>
            Gets mask editor items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.InitializeItems(System.String)">
            <summary>
            Initializes the mask items and formats editor's text.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.PasteText(System.String)">
            <summary>
            Pastes the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus"/> event reaches this element in its route.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.Clear">
            <summary>
            Clears the editor value;
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.GetEditableString">
            <summary>
            Gets the editable characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.GetUnMaskedString">
            <summary>
            Gets the value string only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.MaskEditor.GetString">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskEditor.EnteredValue">
            <summary>
            Gets the entered value without the mask characters.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskEditor.PromptChar">
            <summary>
            Gets or sets the prompt char used in the control.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.MaskEditor.Mask">
            <summary>
            Gets or sets the mask string of the control.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.CheckedListBox">
            <summary>
            Contains a list of selectable items.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ListBox">
            <summary>
            Represents a control that contains a list of selectable items.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.ScrollAnimationTimeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.ScrollAnimationModeProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnItemMouseDown(VIBlend.WPF.Controls.ListBoxMouseEventArgs)">
            <summary>
            Raises the item's MouseDown event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnItemMouseUp(VIBlend.WPF.Controls.ListBoxMouseEventArgs)">
            <summary>
            Raises the item's MouseUp event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.Sort(System.ComponentModel.SortDescription)">
            <summary>
            Sorts the specified sort description.
            </summary>
            <param name="sortDescription">The sort description.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.Sort(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the Items collection in Ascending or Descending order.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.RemoveSort">
            <summary>
            Removes the sort and updates the items.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.SearchTextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.ShowOnlyFilteredItemsProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.IsFilteringEnabledProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls to the index passed as a parameter.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.ResetFilter">
            <summary>
            Resets the Filter.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.FilterProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.FilterModeProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.PrepareIncrementalSearch">
            <summary>
            Prepares the incremental search.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnCollectionUpdated">
            <summary>
            Called when the collection is changed.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.LayoutModesProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.ColumnsWidthProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.ColumnsCountProperty">
            <exclude/>   
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnColumnsCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ListBox"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.GetListPanel">
            <summary>
            Gets the default layout panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <param name="item">The specified item.</param>
            <returns>
            true if the item is its own item container; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.GetContainerForItemOverride">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBox.SearchMemberPathProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Provides handling for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the ItemsCollectionChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBox"/> control when a new template is applied.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.UnwireEvents">
            <summary>
            Unwires the events.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.HandleKeyboardNavigation(System.Windows.Input.KeyEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Does the key down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.SelectPrevVisibleItem(System.Int32)">
            <summary>
            Selects the prev visible item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBox.SelectNextVisibleItem(System.Int32)">
            <summary>
            Selects the next visible item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.EnableKeyboardNavigation">
            <summary>
            Gets or sets whether the keyboard navigation is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.ScrollAnimationTime">
            <summary>
            Gets or sets the duration of the scroll animation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.ScrollAnimationMode">
            <summary>
            Gets or sets the scroll animation mode.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ListBox.CollectionUpdated">
            <summary>
            Occurs when the items collection is updated.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ListBox.ItemMouseDown">
            <summary>
            Occurs when the mouse left button is down over a ListBoxItem.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ListBox.ItemMouseUp">
            <summary>
            Occurs when the mouse left button is up over a ListBoxItem.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.IsFilteringEnabled">
            <summary>
            Gets or sets whether the auto-complete mode is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.ShowOnlyFilteredItems">
            <summary>
            Gets or sets whether the control should show only the filtered items. This property could be enabled only when you use the default Layout panel. 
            If you use a Virtualized panels, the property does not effect anything.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.CanScrollIntoView">
            <summary>
            Gets or sets a value indicating whether this instance can scroll into view.
            </summary>
            <value>
            	<c>true</c> if this instance can scroll into view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.SearchText">
            <summary>
            Gets or sets the current search text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.Filter">
            <summary>
            Gets or sets the auto complete filter.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.FilterMode">
            <summary>
            Gets or sets the filter mode.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.LayoutMode">
            <summary>
            Gets or sets the layout modes.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.ColumnsCount">
            <summary>
            Gets or sets the WrapHeight property. This property is taken into account when the LayoutMode is set to Columns.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.ColumnsWidth">
            <summary>
            Gets or sets the columns width.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.SearchMemberPath">
            <summary>
            Gets or sets the SearchMemberPath.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBox.IsVirtualized">
            <summary>
            Gets whether the control uses a VirtualizingStackPanel instead of the built-in layout panel.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ListBox.ItemsCollectionChanged">
            <summary>
            Occurs when the items collection is changed.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.#ctor">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckedListBox.CheckOnClickProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.OnCheckedChanged(VIBlend.WPF.Controls.CheckedChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CheckedChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:VIBlend.WPF.Controls.CheckedChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.ListBoxItem"/>.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer.
            </summary>
            <param name="item">Specified item.</param>
            <returns>
            true if the item is its own ItemContainer; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
            <param name="e">Provides data for <see cref="T:System.Windows.Input.KeyEventArgs"/>.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.CheckItem(System.Int32)">
            <summary>
            Checks an item.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.UnCheckItem(System.Int32)">
            <summary>
            Unchecks an item.
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.CheckAllItems">
            <summary>
            Checks all items.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.UnCheckAllItems">
            <summary>
            Unchecks all items.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBox.GetCheckedItems">
            <summary>
            Gets the checked items.
            </summary>
            <returns></returns>
        </member>
        <member name="E:VIBlend.WPF.Controls.CheckedListBox.CheckedChanged">
            <summary>
            Occurs when item's checked state is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckedListBox.CheckOnClick">
            <summary>
            Gets or sets a value indicating whether to check on selection.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ErrorWindow">
            <summary>
            Represents ErrorProvider control's Window.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.#ctor">
            <summary>
            Initializes a new instance of ErrorWindow.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.#ctor(VIBlend.WPF.Controls.ErrorProviderUIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ErrorWindow"/> class.
            </summary>
            <param name="controlItem">The control item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.Show(System.Windows.Point)">
            <summary>
            Shows the popup
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.Remove(VIBlend.WPF.Controls.ErrorProviderUIElement)">
            <summary>
            removes the associated UI element.
            </summary>
            <param name="controlItem"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.StopBlinking">
            <summary>
            Stops blinking.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.StartBlinking">
            <summary>
            Starts blinking.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.Hide">
            <summary>
            Hides the current window.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.Update(System.Boolean)">
            <summary>
            Updates the window UI.
            </summary>
            <param name="isUpdated"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorWindow.Dispose">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorWindow.ProviderUIElement">
            <summary>
            Gets the associated UI element.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorWindow.Popup">
            <summary>
            Gets the associated popup.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ErrorProviderBlinkStyle">
            <summary>
            Represents a blink style enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderBlinkStyle.BlinkIfDifferentError">
            <summary>
            Blinks if there is a new error.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderBlinkStyle.AlwaysBlink">
            <summary>
            always blink.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderBlinkStyle.NeverBlink">
            <summary>
            never blinks.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ColorPicker">
            <summary>
            Represents a control that allows the user to pick a color from a popup control.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.PopupBase">
            <summary>
            Represents a base class for all controls that open a popup.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.IEditorBase">
            <summary>
            Represents a base interface for all input editors.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.IEditorBase.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.PopupBorderName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.PopupName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.OutsidePopup">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.popup">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.popupChild">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.PopupChildCanvas">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.isMouseOverMain">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.isMouseOverPopup">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.popupBorder">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.DropDownWidthProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.DropDownHeightProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnEditorKeyPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the EditorKeyPressed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnDropDownOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the DropDownOpening event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnDropDownClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the DropDownClosing event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.IsDropDownOpenProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.MaxDropDownHeightProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.PopupBase.MaxDropDownWidthProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.FocusChanged(System.Boolean)">
            <summary>
            Focuses the changed.
            </summary>
            <param name="hasFocus">if set to <c>true</c> [has focus].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.CalculatePopupBounds">
            <summary>
            Calculates the popup bounds.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.Open">
            <summary>
            Opens the Drop Down.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.Close">
            <summary>
            Closes the Drop Down.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnDropDownClosed(System.EventArgs)">
            <summary>
            Raises the DropDownClosed event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnDropDownOpened(System.EventArgs)">
            <summary>
            Raises the DropDownOpened event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when [is drop down open changed].
            </summary>
            <param name="isDropDownOpen">if set to <c>true</c> [is drop down open].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PopupBase.OnLostFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.IsDropDownOpen">
            <summary>
            Gets or sets whether the combo box drop down is opened.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.DropDownWidth">
            <summary>
            Gets or sets the DropDown width.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.DropDownHeight">
            <summary>
            Gets or sets the DropDown height.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.DropDownMinSize">
            <summary>
            Gets or sets the dropdown's min size.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.PopupBase.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.PopupBase.DropDownOpening">
            <summary>
            Occurs when the drop down is opening.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.PopupBase.DropDownClosing">
            <summary>
            Occurs when the drop down is closing.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.PopupBase.DropDownClosed">
            <summary>
            Occurs when the DropDown is closed.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.PopupBase.DropDownOpened">
            <summary>
            Occurs when the DropDown is opened.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.MaxDropDownHeight">
            <summary>
            Gets or sets the DropDown Maximum Height.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PopupBase.MaxDropDownWidth">
            <summary>
            Gets or sets the DropDown Maximum Width.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.SelectedColorProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DisplayModeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultColorProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ShowColorBoxProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderBorderBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderVisibilityProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultTextProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnSelectionChanged">
            <summary>
            Called when the selection is changed.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.PanelsVerticalSpacingProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.#ctor">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.DefaultButtonStyleProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnDropDownOpened(System.EventArgs)">
            <summary>
            Raises the DropDownOpened event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnPrimaryButtonClick">
            <summary>
            Raises the Click event of the PrimaryButton.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnButtonClick">
            <summary>
            Raises the Click event of the Button.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnButtonPositionChanged">
            <summary>
            Raises the ButtonPositionChanged event.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.CornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ArrowBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ButtonPositionProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ToggleButtonContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ToggleButtonContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPicker.ContentProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.CalculatePopupBounds">
            <summary>
            Calculates the popup bounds.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnGotFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when [is drop down open changed].
            </summary>
            <param name="isDropDownOpen">if set to <c>true</c> [is drop down open].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/>Â routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorPicker.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.ColorPicker.SelectionChanged">
            <summary>
            Occurs when the selection is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.UseCustomDisplayMode">
            <summary>
            Gets or sets whether the color picker can use a custom display mode.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DisplayMode">
            <summary>
            Gets or sets the display mode of the color picker.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderContentTemplate">
            <summary>
            Gets or sets the data template of the DefaultHeader header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderContent">
            <summary>
            Gets or sets the content of the DefaultHeader button.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ShowColorBox">
            <summary>
            Gets or sets a value indicating whether to show the color box.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderVisibility">
            <summary>
            Gets or sets the header's visibility.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultHeaderBorderBrush">
            <summary>
            Gets or sets the selected brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultColor">
            <summary>
            Gets or sets the default color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultText">
            <summary>
            Gets or sets the default Text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.PanelsVerticalSpacing">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.Palettes">
            <summary>
            Gets the color picker palettes.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.DefaultButtonStyle">
            <summary>
            Gets or sets the style of the ListBox control which is shown when the popup is opened.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ColorPicker.PrimaryButtonClick">
            <summary>
            Occurs when the primary button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ColorPicker.ButtonClick">
            <summary>
            Occurs when the  button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ColorPicker.ButtonPositionChanged">
            <summary>
            Occurs when the  button position is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.CornerRadius">
            <summary>
            Gets or sets button's corner radius.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ButtonPosition">
            <summary>
            Gets or sets the group box's header primary position.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ArrowBrush">
            <summary>
            Gets or sets the combobox's arrow brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ToggleButtonContentTemplate">
            <summary>
            Gets or sets the data template of the ToggleButton header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ToggleButtonContent">
            <summary>
            Gets or sets the content of the ToggleButton button.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.ContentTemplate">
            <summary>
            Gets or sets the data template of the  header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ColorPicker.Content">
            <summary>
            Gets or sets the content of the  button.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ListPanel">
            <summary>
            Represents a control that arranges child elements.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ListPanel"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.GetParentScrollViewer">
            <summary>
            Gets the parent scroll viewer.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListPanel.WrapWidthProperty">
            <exclude/>   
        </member>
        <member name="F:VIBlend.WPF.Controls.ListPanel.WrapHeightProperty">
            <exclude/>   
        </member>
        <member name="F:VIBlend.WPF.Controls.ListPanel.ColumnsCountProperty">
            <exclude/>   
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.OnColumnsCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.OnWrapHeightPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.OnWrapWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListPanel.LayoutModesProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListPanel.ColumnsWidthProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.IsAnimating">
            <summary>
            Gets whether there is active animation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.EnableLayoutAnimations">
            <summary>
            Enable/disable animations.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.ColumnsCount">
            <summary>
            Gets or sets the WrapHeight property. This property is taken into account when the LayoutMode is set to Columns.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.WrapWidth">
            <summary>
            Gets or sets the WrapHeight property. This property is taken into account when the LayoutMode is set to HorizontalWrap.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.WrapHeight">
            <summary>
            Gets or sets the WrapHeight property. This property is taken into account when the LayoutMode is set to VerticalWrap.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.LayoutMode">
            <summary>
            Gets or sets the layout modes.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListPanel.ColumnsWidth">
            <summary>
            Gets or sets the columns width.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DefaultDateTimePatterns">
            <summary>
            Represents the standard datetime patterns enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.RFC1123Pattern">
            <summary>
            Represents a RFC1123Pattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.SortableDateTimePattern">
            <summary>
            Represents a SortableDateTimePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.UniversalSortableDateTimePattern">
            <summary>
            Represents a UniversalSortableDateTimePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.YearMonthPattern">
            <summary>
            Represents a YearMonthPattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.ShortDatePattern">
            <summary>
            Represents a ShortDatePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.LongDatePattern">
            <summary>
            Represents a LongDatePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.ShortTimePattern">
            <summary>
            Represents a ShortTimePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.LongTimePattern">
            <summary>
            Represents a LongTimePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.FullDateTimePattern">
            <summary>
            Represents a FullDateTimePattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.MonthDayPattern">
            <summary>
            Represents a MonthDayPattern
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DefaultDateTimePatterns.Custom">
            <summary>
            Represents a Custom
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.LinkLabelMode">
            <summary>
            Represents a LinkLabelMode enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabelMode.SystemDefault">
            <summary>
            SystemDefault LinkLabel style.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabelMode.AlwaysUnderline">
            <summary>
            AlwaysUnderline LinkLabel style.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabelMode.HoverUnderline">
            <summary>
            HoverUnderline LinkLabel style.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabelMode.NeverUnderline">
            <summary>
            NeverUnderline LinkLabel style.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.LinkLabel">
            <summary>
            Represents a link label control with a clickable hyperlink.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.UrlProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.HyperlinkStyleProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.HoverForegroundProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.LinkLabelModeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.CommandParameterProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.CommandProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.CommandTargetProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.ClickEvent">
            <summary>
            Occurs when the Label is clicked.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LinkLabel.RequestNavigateEvent">
            <summary>
            Occurs when the navigation event is requested.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.LinkLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.HyperlinkStyle">
            <summary>
            Gets or sets the hyperlink style.
            </summary>
            <value>The hyperlink style.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.HoverForeground">
            <summary>
            Gets or sets the hover foreground.
            </summary>
            <value>The hover foreground.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.LinkLabelMode">
            <summary>
            Gets or sets the link label mode.
            </summary>
            <value>The link label mode.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.LinkLabel.CommandTarget">
            <summary>
            Gets or sets the command target.
            </summary>
            <value>The command target.</value>
        </member>
        <member name="E:VIBlend.WPF.Controls.LinkLabel.Click">
            <summary>
            Occurs when the label isclicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.LinkLabel.RequestNavigate">
            <summary>
            Occurs when there is a navigation request.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.BindableRun">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.BindableRun.BoundTextProperty">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.BindableRun.BoundText">
            <summary>
            Gets or sets the bound text.
            </summary>
            <value>The bound text.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.ComboBox">
            <summary>
            Represents a control that allows you to select item from a list of items opened in a popup control.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ContentPresenterBorderName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ContentPresenterName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.DropDownToggleName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.TextBoxName">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnItemsCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the ItemsCollectionChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnItemMouseDown(VIBlend.WPF.Controls.ListBoxMouseEventArgs)">
            <summary>
            Raises the item's MouseDown event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnItemMouseUp(VIBlend.WPF.Controls.ListBoxMouseEventArgs)">
            <summary>
            Raises the item's MouseUp event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.IsArrowBeforeContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.PromptTextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.PromptTextForegroundProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.IsResizableProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.IsEditableProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectionBoxItemProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectionBoxItemTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ArrowBrushProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.UndoSelection">
            <summary>
            Undo selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.RedoSelection">
            <summary>
            Redo selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.SaveSelection">
            <summary>
            Saves the selected index.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ItemContainerStyleProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.NavigationPane.ItemContainerStyle" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.NavigationPane.ItemContainerStyle" />
            dependency property.
            </value>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            NavigationPane that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Raises the SelectionChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.ConvertToComboBoxItem(System.Object)">
            <summary>
            Converts the object passed as a parameter to a ComboBoxItem object.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.Sort(System.ComponentModel.SortDescription)">
            <summary>
            Sorts the specified sort description.
            </summary>
            <param name="sortDescription">The sort description.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.Sort(System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the Items collection in Ascending or Descending order.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.RemoveSort">
            <summary>
            Removes the sort and updates the items.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.UpdateSelection">
            <summary>
            Updates the selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.DoSelection">
            <summary>
            Updates the selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.DoSelection(System.Boolean)">
            <summary>
            Does the selection.
            </summary>
            <param name="forceSelection">if set to <c>true</c> [force selection].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ComboBox"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.ArrangeOverride(System.Windows.Size)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Handles the Closed event of the popup control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ItemsSourceProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ListBoxStyleProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.GetComboBoxItems">
            <summary>
            Gets the combo box items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.FocusChanged(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.HasFocus">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ScrollAnimationTimeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ScrollAnimationModeProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls to item's index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectedItemProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectedIndexProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SearchTextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ShowOnlyFilteredItemsProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.IsFilteringEnabledProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.TextProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnTextChanged">
            <summary>
            Called when the Text property is changed.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.FilterProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.FilterModeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ItemsPanelProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SearchMemberPathProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectedValueProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.SelectedValuePathProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.DisplayMemberPathProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ItemTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.LayoutModesProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ColumnsWidthProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBox.ColumnsCountProperty">
            <exclude/>   
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnColumnsCountPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.OnEditorKeyPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the EditorKeyPressed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.ItemsCollectionChanged">
            <summary>
            Occurs when the items collection is changed.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.ComboBoxConverter">
            <summary>
            Occurs when an object instance should be converted to and instance of the ComboBoxItem class.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.ItemMouseDown">
            <summary>
            Occurs when the mouse left button is down over a ComboBoxItem.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.ItemMouseUp">
            <summary>
            Occurs when the mouse left button is up over a ComboBoxItem.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectionBoxItem">
            <summary>
            Gets the selected content of the combo box.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.OpenDropDownOnFocus">
            <summary>
            Gets or sets whether the drop down is opened/closed when you click on the content area of the ComboBox control.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectionBoxItemTemplate">
            <summary>
            Gets the selected content template of the combo box.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ArrowBrush">
            <summary>
            Gets or sets the combobox's arrow brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ItemContainerStyle">
            <summary>
            Gets or sets the item container style.
            </summary>
            <value>The item container style.</value>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.SelectionChanged">
            <summary>
            Occurs when the currently selected item changes.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.IsResizing">
            <summary>
            Gets whether the popup is being resized.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ListBox">
            <summary>
            Gets the ListBox control.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ItemsSource">
            <summary>
            Gets or sets the ItemsSource.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ListBoxStyle">
            <summary>
            Gets or sets the style of the ListBox control which is shown when the popup is opened.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ComboBoxItems">
            <summary>
            Gets the ComboBox items.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.Items">
            <summary>
            Gets the ComboBox's Items collection.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ScrollAnimationTime">
            <summary>
            Gets or sets the duration of the scroll animation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ScrollAnimationMode">
            <summary>
            Gets or sets the scroll animation mode.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectedIndex">
            <summary>
            Gets or sets the selected index.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.Text">
            <summary>
            Gets or sets the ComboBox text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.TextChanged">
            <summary>
            Occurs when the Text property is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.IsFilteringEnabled">
            <summary>
            Gets or sets whether the auto-complete mode is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ShowOnlyFilteredItems">
            <summary>
            Gets or sets whether to show only the filtered items.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SearchText">
            <summary>
            Gets or sets the current search text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.Filter">
            <summary>
            Gets or sets the auto complete filter.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.FilterMode">
            <summary>
            Gets or sets the filter mode.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ItemContainerGenerator">
            <summary>
            Gets the ItemContaineGenerator instance.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ItemsPanel">
            <summary>
            Gets or sets the ItemsPanel.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SearchMemberPath">
            <summary>
            Gets or sets the SearchMemberPath.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectedValue">
            <summary>
            Gets or sets the SelectedValue.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.SelectedValuePath">
            <summary>
            Gets or sets the SelectedValuePath.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.DisplayMemberPath">
            <summary>
            Gets or sets the DisplayMemberPath.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ItemTemplate">
            <summary>
            Gets or sets the ItemTemplate.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.LayoutMode">
            <summary>
            Gets or sets the layout modes.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ColumnsCount">
            <summary>
            This property is taken into account when the LayoutMode is set to Columns.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.ColumnsWidth">
            <summary>
            Gets or sets the columns width.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.IsArrowBeforeContent">
            <summary>
            Gets or sets whether the arrow primitive is before the combobox's content.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.PromptTextForeground">
            <summary>
            Gets or sets the prompt text brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.PromptText">
            <summary>
            Gets or sets the prompt text that is shown when there is no selected item.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.IsEditable">
            <summary>
            Gets or sets whether the combo box displays a content presenter or a tex box.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBox.IsResizable">
            <summary>
            Gets or sets whether the combo box popup is resizable.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBox.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.StringUtility">
            <summary>
            Represents an utility class with common string parsing methods.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.#ctor">
            <summary>
            Initializes a new instance of StringUtility
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.ContainsDigits(System.String)">
            <summary>
            Determines whether the specified text contains digits.
            </summary>
            <param name="text">The text.</param>
            <returns>
            	<c>true</c> if the specified text contains digits; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetDecimalSeparator(System.Globalization.CultureInfo)">
            <summary>
            Gets a decimal separator specific to a given culture.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetCurrencySeparator(System.Globalization.CultureInfo)">
            <summary>
            Gets a currency separator specific to a given culture.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetPercentageSeparator(System.Globalization.CultureInfo)">
            <summary>
            Gets a percentage separator specific to a given culture.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetSeparatorPositionInText(System.String,System.String)">
            <summary>
            Gets the position of the separator in a string.
            </summary>
            <param name="separator"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetSelectionPositionFromValuePosition(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets selection position from the value string.
            </summary>
            <param name="valuePosition"></param>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetMaximumValueInDecimalPlaces(System.Int32)">
            <summary>
            Gets the maximum value length.
            </summary>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetSelectionInValue(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the selection position in the value string.
            </summary>
            <param name="selectionPosition"></param>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetSelectionLengthInValue(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets the selection length in the value string.
            </summary>
            <param name="selectionPosition"></param>
            <param name="selectionLength"></param>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetStringToSeparator(System.String,System.String,System.Boolean)">
            <summary>
            Gets the substring before the separator character.
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetValueString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the value string in a text.
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetPercentageValueString(System.String,System.String,System.Boolean)">
            <summary>
            Gets the percentage value string in a text.
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetDigitsCountAfterSeparator(System.String,System.String)">
            <summary>
            Gets the number of digits after the separator character.
            </summary>
            <param name="separator"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetInsertType(System.Int32,System.String,System.String)">
            <summary>
            Gets the insert type.
            </summary>
            <param name="positionInText"></param>
            <param name="separator"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetInsertTypeByPositionInValue(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the insert type by position.
            </summary>
            <param name="positionInValue"></param>
            <param name="separator"></param>
            <param name="text"></param>
            <param name="hasSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.StringUtility.GetDigitsToSeparator(System.Int32,System.String)">
            <summary>
            Gets the digits count before the separator character.
            </summary>
            <param name="digitsToSeparator"></param>
            <param name="valueString"></param>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.InsertType">
            <summary>
            InsertType enum.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InsertType.BeforeSeparator">
            <summary>
            Insert is before the separator character.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InsertType.AfterSeparator">
            <summary>
            Insert is after the separator character.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.CheckedListBoxItem">
            <summary>
            Represents a selectable item in the CheckedListBox control.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ListBoxItem">
            <summary>
            Represents a selectable item in the ListBox control.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.CornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.CommandProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.CommandParameterProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.ExecuteCommand">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the <see cref="E:System.Windows.UIElement.MouseEnter"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseMove"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeave"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.UIElement.MouseRightButtonUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.UseTextForSearchOnlyProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.TextProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.DoTextPropertyChanged(VIBlend.WPF.Controls.ListBoxItem)">
            <summary>
            Does the text property changed.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:System.Windows.Controls.ListBoxItem"/> control when a new template is applied.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property changes.
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
            <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.ForegroundNormalProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.ForegroundHighlightProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.ForegroundDisabledProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ListBoxItem.ForegroundSelectedProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.UpdateVisualStates">
            <summary>
            Updates the visual states.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.SynchronizeForegrounds">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxItem.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ListBoxItem"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.TextBlock">
            <summary>
            Gets the ListBoxItem's text block.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ContentPresenter">
            <summary>
            Gets or sets the content presenter.
            </summary>
            <value>The content presenter.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.CornerRadius">
            <summary>
            Gets or sets button's corner radius.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.Command">
            <summary>
            Gets or sets the Command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.CommandParameter">
            <summary>
            Gets or sets the  command parameter.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.UseTextForSearchOnly">
            <summary>
            Gets or sets a value indicating whether [use text for search only].
            </summary>
            <value>
            	<c>true</c> if [use text for search only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ListBox">
            <summary>
            Gets or sets the list box.
            </summary>
            <value>The list box.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ForegroundNormal">
            <summary>
            Gets or sets the foreground brush that is used when the button is in default state.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ForegroundHighlight">
            <summary>
            Gets or sets the foreground brush that is used when the ListBoxItem is in highlight state.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ForegroundDisabled">
            <summary>
            Gets or sets the foreground brush that is used when the ListBoxItem is in disabled state.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.ForegroundSelected">
            <summary>
            Gets or sets the foreground brush that is used when the button is in default state.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxItem.Text">
            <summary>
            Gets or sets ListBoxItem's text.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckedListBoxItem.IsThreeStateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckedListBoxItem.IsCheckedProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.CheckedListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the user presses the right mouse button over the <see cref="T:System.Windows.Controls.ListBoxItem"/>.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.OnToggle">
            <summary>
            Toggles the check state.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.DoCheck(VIBlend.WPF.Controls.CheckedListBox)">
            <summary>
            Does the check.
            </summary>
            <param name="checkedListBox">The checked list box.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.GetListBox(System.Windows.FrameworkElement)">
            <summary>
            Gets the list box.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.DoTextPropertyChanged(VIBlend.WPF.Controls.ListBoxItem)">
            <summary>
            Does the text property changed.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedListBoxItem.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckedListBoxItem.IsThreeState">
            <summary>
            Gets or sets whether the item has 3 states.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckedListBoxItem.CheckBox">
            <summary>
            Gets the check box.
            </summary>
            <value>The check box.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckedListBoxItem.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            	<c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VIBlend.WPF.Controls.IFormatEditItem.SetItemEditor(System.DateTime)">
            <summary>
            Sets the item editor.
            </summary>
            <param name="editedDateTime">The edited date time.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.IFormatEditItem.SetItem(System.Int32,System.DateTime)">
            <summary>
            Sets the item.
            </summary>
            <param name="offset">The offset.</param>
            <param name="editedDateTime">The edited date time.</param>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.ToggleButton">
            <summary>
            Represents a toggle button control.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.Button">
            <summary>
            Represents a button control.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.CornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BackgroundShadowVisibilityProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.TextImageRelationProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.isSizeRotated">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.ApplyTextImageRelation(VIBlend.WPF.Controls.Button)">
            <summary>
            Applies the text image relation.
            </summary>
            <param name="b">The b.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.UnionSizes(System.Windows.Size,System.Windows.Size)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.SplitRegion(System.Windows.Rect,System.Windows.Size,VIBlend.WPF.Controls.AnchorStyles,System.Windows.Rect@,System.Windows.Rect@)">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.HorizontalTextAlignmentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.VerticalTextAlignmentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.HorizontalImageAlignmentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.VerticalImageAlignmentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.TextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.ImageSourceProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BackgroundOpacityProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.ForegroundNormalProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.ForegroundDisabledProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.ForegroundPressedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.ForegroundHighlightProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BackgroundHighlightProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BorderBrushHighlightProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BackgroundPressedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Button.BorderBrushPressedProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.SynchronizeForegrounds">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button"/> is clicked.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Button.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BackgroundShadowVisibility">
            <summary>
            Gets or sets the background shadow Visibility.
            </summary>
            <value>The background shadow Visibility.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ImageSize">
            <summary>
            Gets or sets the Image size.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.Layout">
            <summary>
            Gets the layout control.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ImageControl">
            <summary>
            Gets the image control.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.TextBlock">
            <summary>
            Gets the TextBlock.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.TextImageRelation">
            <summary>
            Gets or sets the text image relation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.HorizontalTextAlignment">
            <summary>
            Gets ot sets the horizontal alignment of button's text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.VerticalTextAlignment">
            <summary>
            Gets ot sets the vertical alignment of button's text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.HorizontalImageAlignment">
            <summary>
            Gets ot sets the horizontal alignment of button's image.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.VerticalImageAlignment">
            <summary>
            Gets or sets the vertical alignment of button's image.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.Text">
            <summary>
            Gets or sets button's text.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ImageSource">
            <summary>
            Gets or sets the Button's image source.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.CornerRadius">
            <summary>
            Gets or sets button's corner radius.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BackgroundOpacity">
            <summary>
            Gets or sets whether the button's background opacity.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ForegroundNormal">
            <summary>
            Gets or sets the foreground brush that is used when the button is in default state.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ForegroundDisabled">
            <summary>
            Gets or sets the foreground brush that is used when the button is disabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ForegroundPressed">
            <summary>
            Gets or sets the foreground brush that is used when the button is pressed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.ForegroundHighlight">
            <summary>
            Gets or sets the foreground brush that is used when the button is hovered.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BackgroundHighlight">
            <summary>
            Gets or sets whether the button's background opacity.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BorderBrushHighlight">
            <summary>
            Gets or sets whether the button's BorderBrush opacity.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BackgroundPressed">
            <summary>
            Gets or sets whether the button's background opacity.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Button.BorderBrushPressed">
            <summary>
            Gets or sets whether the button's BorderBrush opacity.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ToggleButton.IsCheckedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ToggleButton.IsThreeStateProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnButtonStateChanged">
            <summary>
            Called when the button's state is changed.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnApplyTemplate">
            <summary>
            Occurs when the button's template is applied.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnClick">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnContentChanged(System.Object,System.Object)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.OnToggle">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ToggleButton.ToString">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.ToggleButton.Checked">
            <summary>
            Occurs when the button is checked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ToggleButton.Indeterminate">
            <summary>
            Occurs when the button's state is Indeterminate.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ToggleButton.Unchecked">
            <summary>
            Occurs when the button is unchecked.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ToggleButton.IsEnabledMouseOverVisualState">
            <summary>
            Gets or sets whether the MouseOver state has a visual representation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ToggleButton.IsEnabledCheckedVisualState">
            <summary>
            Gets or sets whether the Checked state has a visual representation.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ToggleButton.ButtonStateChanged">
            <summary>
            Occurs when button's UI state is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the button is checked.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ToggleButton.IsThreeState">
            <summary>
            Gets or sets whether the button supports three states.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.RepeatButton">
            <summary>
            Represents a button control that repeatedly fires Click events when pressed.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.RepeatButton.DelayProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RepeatButton.IntervalProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.RepeatButton"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.UpdateVisualState(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.UpdateVisualState">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.ChangeVisualState(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnLostFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RepeatButton.ToString">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.RepeatButton.Delay">
            <summary>
            Gets or sets the initial delay.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RepeatButton.Interval">
            <summary>
            Gets or sets the click interval.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.CheckBox">
            <summary>
            Represents a control that a user can select (check) or clear (uncheck).
            </summary> 
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.GridName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.ContentName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushDisabledProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to a <see cref="T:System.Windows.Controls.CheckBox"/><see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnEditorKeyPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the EditorKeyPressed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushPressedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushHighlightProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.CheckAlignmentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.CheckBox.IsRadioGroupEnabledProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.UpdateCheckStates">
            <summary>
            Explicitly updates the states of all the checkboxes in the group.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.Toggle">
            <summary>
            Toggles the checkbox state.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnToggle">
            <summary>
            Toggles the state.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.SynchronizeCheckMarkBrushs">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckBox.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushDisabled">
            <summary>
            Gets or sets the brush used for the check mark, when the control is disabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.CheckMarkBrush">
            <summary>
            Gets or sets whether the button's background opacity.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.CheckBox.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushPressed">
            <summary>
            Gets or sets the brush used for the check mark when the CheckBox is pressed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.CheckMarkBrushHighlight">
            <summary>
            Gets or sets the brush used for the check mark when the CheckBox is hovered.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.Check">
            <summary>
            Gets the Check layout.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.ContentPresenter">
            <summary>
            Gets the content presenter element.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.Layout">
            <summary>
            Gets the CheckBox Root panel.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.CheckAlignment">
            <summary>
            Gets or sets the check mark and content presenter relation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckBox.IsRadioGroupEnabled">
            <summary>
            Gets or sets whether the checkbox is part of a group of checkboxes.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SpinEditor">
            <summary>
            Represents a spin editor control.
            </summary>
            <summary>
            Represents a spin editor control.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnIncrementButtonClicked">
            <summary>
            Raises the IncrementButtonClicked event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnDecrementButtonClicked">
            <summary>
            Raises the DecrementButtonClicked event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnEditorInitialized">
            <summary>
            Calls the EditorInitialized event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnValidationFailed">
            <summary>
            Calls the ValidationFailed event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.#ctor">
            <summary>
            Initializes a new instance of SpinBox.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.UIElement.LostFocus"/>Â routed event by using the event data that is provided.
            </summary>
            <param name="e">A <see cref="T:System.Windows.RoutedEventArgs"/> that contains event data. This event data must contain the identifier for the <see cref="E:System.Windows.UIElement.LostFocus"/> event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus"/> event reaches this element in its route.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.DecimalPlacesProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnValueChanged(VIBlend.WPF.Controls.SpinEditorValueChangedEventArgs)">
            <summary>
            Calls the ValueChanged event.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.MinimumProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.MaximumProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.SpinTypeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.CultureInfoProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinEditor.TextProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="E:VIBlend.WPF.Controls.SpinEditor.IncrementButtonClicked">
            <summary>
            Occurs when the increment button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SpinEditor.DecrementButtonClicked">
            <summary>
            Occurs when the decrease button is clicked. 
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SpinEditor.EditorInitialized">
            <summary>
            Occurs when the text editor is initialized;
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SpinEditor.ValidationFailed">
            <summary>
            Represents the ValidationFailed event.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.EditorType">
            <summary>
            Gets or sets the current editor type.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.EnableDefaultValidation">
            <summary>
            Gets or sets a value whether the default validation is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.DefaultToolTipMessage">
            <summary>
            Gets or sets the default tooltip message.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.EditorStyle">
            <summary>
            Gets or sets editor's style.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.DecimalPlaces">
            <summary>
            Gets or sets editor's decimal places.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.Value">
            <summary>
            Gets or sets editor's Value.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SpinEditor.ValueChanged">
            <summary>
            Represents the ValueChanged event.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.Minimum">
            <summary>
            Gets or sets editor's Minimum.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.Maximum">
            <summary>
            Gets or sets editor's Maximum.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.SpinType">
            <summary>
            Gets or sets the type of the spin.
            </summary>
            <value>
            The type of the spin.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.CultureInfo">
            <summary>
            Gets or sets the culture info.
            </summary>
            <value>The culture info.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.TextAlignment">
            <summary>
            Gets or sets the text alignment of the text box.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.Text">
            <summary>
            Gets or sets editor's text
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.SelectionLength">
            <summary>
            Gets or sets editor's SelectionLength
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.SelectionStart">
            <summary>
            Gets or sets editor's SelectionStart.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditor.Editor">
            <summary>
            Gets the associated editor.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.LiteralDescriptor">
            <summary>
            Represents a literal descriptor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.LiteralDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.LiteralDescriptor"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.LiteralDescriptor.Clone">
            <summary>
            Makes a clone copy of the descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.LiteralDescriptor.GetCorrectChar(System.Char)">
            <summary>
            Gets the input character and modifies it if it is necessary.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.LiteralDescriptor.Match(System.Char)">
            <summary>
            Matches the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.LiteralDescriptor.Character">
            <summary>
            Gets or sets the character.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.LiteralDescriptor.CanEdit">
            <summary>
            Gets or sets whether the descriptor is readonly.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.LiteralDescriptor.Regex">
            <summary>
            Gets or sets the regex.
            </summary>
            <value>The regex.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.ErrorProvider">
            <summary>
            Represents the error provider control.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.#ctor">
            <summary>
            Represents a new instance of ErrorProvider.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.OnApplyTemplate">
            <summary>
            Applies the template.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProvider.ErrorContentProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.OnErrorContentChanged(System.Object,System.Object)">
            <summary>
            Called when [error content changed].
            </summary>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProvider.ErrorContentTemplateProperty">
            <summary>
            Identifies the ErrorContentTemplate dependency property.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.OnErrorContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when [error content template changed].
            </summary>
            <param name="oldErrorContentTemplate">The old error content template.</param>
            <param name="newErrorContentTemplate">The new error content template.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProvider.DefaultErrorContentTemplateProperty">
            <summary>
            Identifies the DefaultErrorContentTemplate dependency property.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.OnDefaultErrorContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when [default error content template changed].
            </summary>
            <param name="oldErrorContentTemplate">The old error content template.</param>
            <param name="newErrorContentTemplate">The new error content template.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.Clear">
            <summary>
            clears all windows.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.GetError(System.Windows.FrameworkElement)">
            <summary>
            Gets the error string
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.SetError(System.Windows.FrameworkElement,System.String)">
            <summary>
            Sets the error string associated to a specified ui element.
            </summary>
            <param name="control"></param>
            <param name="value"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the enum value is valid.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.DeactivateWhenParentIsNotActive">
            <summary>
            Gets or sets a value indicating whether the parent window is not active.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.ErrorContent">
            <summary>
            Gets or sets the error content. 
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.ErrorContentTemplate">
            <summary>
            Gets or sets the error content template.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.DefaultErrorContentTemplate">
            <summary>
            Gets or sets the default error template.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.BlinkRate">
            <summary>
            Gets or sets the blink rate.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.IconAlignment">
            <summary>
            Gets or sets the icon alignment.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProvider.BlinkStyle">
            <summary>
            Gets or sets the error icon blink style.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.EditorStateType">
            <summary>
            Represents the edit state.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorStateType.Insert">
            <summary>
            Insert state.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorStateType.Delete">
            <summary>
            Delete state.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorStateType.Selection">
            <summary>
            Selection state.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.EditorState">
            <summary>
            Represents EditorState class.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorState.StateType">
            <summary>
            Gets or sets editor's state type.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorState.Text">
            <summary>
            Gets or sets editor's text
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorState.Value">
            <summary>
            Gets or sets editor's value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorState.SelectionStart">
            <summary>
            Gets or sets selection start.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorState.SelectionLength">
            <summary>
            Gets or sets selection length
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeTypeConverter">
            <summary>
            Represents a Converter of Datetime values.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeTypeConverter"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
              
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:VIBlend.WPF.Controls.DataContextChangeEventHelper">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DataContextChangeEventHelper.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DataContextChangeEventHelper"/> class.
            </summary>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DataContextChangeEventHelper.Bind">
            <summary>
            Binds this instance.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DataContextChangeEventHelper.FrameworkElement">
            <summary>
            Gets the framework element.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DataContextChangeEventHelper.DataContext">
            <summary>
            Gets or sets the data context.
            </summary>
            <value>
            The data context.
            </value>
        </member>
        <member name="E:VIBlend.WPF.Controls.DataContextChangeEventHelper.DataContextChanged">
            <exclude/>
        </member>
        <member name="T:VIBlend.WPF.Controls.Palette">
            <summary>
            Represents a control that allows the user to select a color.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.Contains(System.Windows.Media.Color)">
            <summary>
            Gets a value whether a specific color is in the colors collection.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.SelectedBorderBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.SelectedColorProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.ColorHorizontalSpacingProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.ColorVerticalSpacingProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.PaletteRowSpacingProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.PaletteFirstRowSpacingProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.PaletteColumnsProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.HeaderBackgroundProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.HeaderVisibilityProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Palette.HeaderTextProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.Palette"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.RefreshView">
            <summary>
            Refreshes the view.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.OnSelectionChanged">
            <summary>
            Called when the selection is changed.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.ResetSelection">
            <summary>
            Reset the selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Palette.GetColors">
            <summary>
            Gets the default colors collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.ColorBoxSize">
            <summary>
            Gets or sets the color's box size.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.SelectedBorderBrush">
            <summary>
            Gets or sets the selected brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.ColorHorizontalSpacing">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.ColorVerticalSpacing">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.PaletteRowSpacing">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.PaletteFirstRowSpacing">
            <summary>
            Gets or sets the selected color.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.PaletteColumns">
            <summary>
            Gets or sets the Palette Columns.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.HeaderBackground">
            <summary>
            Gets or sets header's background.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.HeaderVisibility">
            <summary>
            Gets or sets the header's visibility.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.HeaderText">
            <summary>
            Gets or sets the header's text.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.Palette.SelectionChanged">
            <summary>
            Occurs when the selection is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Palette.Colors">
            <summary>
            Gets the available colors.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SplitButton">
            <summary>
             Represents a control that has 2 buttons. The first button works as a regular button control, as the second button opens a popup control when it is clicked.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnPrimaryButtonClick">
            <summary>
            Raises the Click event of the PrimaryButton.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnSecondaryButtonClick">
            <summary>
            Raises the Click event of the SecondaryButton.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnSecondaryButtonPositionChanged">
            <summary>
            Raises the SecondaryButtonPositionChanged event.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.CornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.ArrowBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.SecondaryButtonPositionProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.SecondaryContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.SecondaryContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.PrimaryContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.PrimaryButtonBorderBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.SecondaryButtonBorderBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.PrimaryContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.ContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.SplitButton.ContentProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.SplitButton"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.HasFocus">
            <summary>
            Determines whether this instance has focus.
            </summary>
            <returns>
              <c>true</c> if this instance has focus; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.ApplyBorderThickness">
            <summary>
            Applies the border thickness.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnGotFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when [is drop down open changed].
            </summary>
            <param name="isDropDownOpen">if set to <c>true</c> [is drop down open].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnLostFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.SplitButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.SplitButton.PrimaryButtonClick">
            <summary>
            Occurs when the primary button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SplitButton.SecondaryButtonClick">
            <summary>
            Occurs when the secondary button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.SplitButton.SecondaryButtonPositionChanged">
            <summary>
            Occurs when the secondary button position is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.CornerRadius">
            <summary>
            Gets or sets button's corner radius.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.SecondaryButtonPosition">
            <summary>
            Gets or sets the group box's header primary position.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.ArrowBrush">
            <summary>
            Gets or sets the button's arrow brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).
            </summary>
            <returns>true if mouse pointer is over the element or its child elements; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.SecondaryContentTemplate">
            <summary>
            Gets or sets the data template of the secondary header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.SecondaryContent">
            <summary>
            Gets or sets the content of the secondary button.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.PrimaryContentTemplate">
            <summary>
            Gets or sets the data template of the Primary header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.PrimaryButtonBorderBrush">
            <summary>
            Gets or sets the primary button border brush.
            </summary>
            <value>The primary button border brush.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.SecondaryButtonBorderBrush">
            <summary>
            Gets or sets the secondary button border brush.
            </summary>
            <value>The secondary button border brush.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.PrimaryContent">
            <summary>
            Gets or sets the content of the Primary button.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.ContentTemplate">
            <summary>
            Gets or sets the data template of the  header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.SplitButton.Content">
            <summary>
            Gets or sets the content of the  button.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ArrowButtonsContainer">
            <summary>
            Represents arrow buttons container.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ArrowButtonsContainer.ValidSpinDirectionProperty">
            <summary>
            Identifies the ValidSpinDirection dependency property.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ArrowButtonsContainer.OnValidSpinDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ValidSpinDirectionProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its ValidSpinDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ArrowButtonsContainer.#ctor">
            <summary>
            Initializes a new instance of the Spinner class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ArrowButtonsContainer.OnSpin(VIBlend.WPF.Controls.UpDownEventArgs)">
            <summary>
            Raises the OnSpin event when spinning is initiated by the end-user.
            </summary>
            <param name="e">Spin event args.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ArrowButtonsContainer.OnValidSpinDirectionChanged(VIBlend.WPF.Controls.SpinDirections,VIBlend.WPF.Controls.SpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ArrowButtonsContainer.ValidSpinDirection">
            <summary>
            Gets or sets the spin direction that is currently valid.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.ArrowButtonsContainer.ArrowButtonClicked">
            <summary>
            Occurs when spinning is initiated by the end-user.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ListBoxMouseEventArgs">
            <summary>
            Represents a base class for all ListBox event data.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ListBoxMouseEventArgs.#ctor(VIBlend.WPF.Controls.ListBoxItem,System.Windows.Input.MouseButtonEventArgs,System.Windows.Input.MouseButton)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ListBoxMouseEventArgs"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
            <param name="changedButton">The changed button.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxMouseEventArgs.MouseArgs">
            <summary>
            Gets or sets the mouse args.
            </summary>
            <value>The mouse args.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxMouseEventArgs.HitItem">
            <summary>
            Gets or sets the hit item.
            </summary>
            <value>The hit item.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.ListBoxMouseEventArgs.ChangedButton">
            <summary>
            Gets the mouse button assoicated with the event.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DecimalEditor">
            <summary>
            Represents an editor control which edits decimal values.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.InputBase">
            <summary>
            Represents a base class for the numeric editors.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.undoValue">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.valueString">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.baseFormatString">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.formatString">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.emptyValue">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.decimalPossibleChars">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.cultureInfo">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.minimum">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.maximum">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.value">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.manager">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.isLessThanZero">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.SpinTypeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.TextValueProperty">
            <summary>
            Represents the TextValueProperty.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.DecimalPlacesProperty">
            <summary>
            Represents the DecimalProperty.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.ValueProperty">
            <summary>
            Represents the ValueProperty.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.MinimumProperty">
            <summary>
            Represents the MinimumProperty.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.InputBase.MaximumProperty">
            <summary>
            Represents the MaximumProperty.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnValidationFailed">
            <summary>
            Calls the ValidationFailed event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnValueChanged(VIBlend.WPF.Controls.ValueChangedEditorEventArgs)">
            <summary>
            Calls the ValueChanged event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnValueChanging(VIBlend.WPF.Controls.ValueChangingEditorEventArgs)">
            <summary>
            Calls the ValueChanging event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.#ctor">
            <summary>
            Initializes a new instance of InputBase.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.IsCtrlDown">
            <summary>
            Determines whether the ctrl is down.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.IsShiftDown">
            <summary>
            Determines whether the shift is down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Does the key down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.RemoveRange(System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Removes a range of characters.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <param name="text"></param>
            <param name="separatorChar"></param>
            <param name="updateText"></param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.GetPureText">
            <summary>
            Gets editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.LeftKey">
            <summary>
            Moves the cursor one position left.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseWheel"/> event occurs to provide handling for the event in a derived class without attaching a delegate.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.SpinValue(System.Boolean)">
            <summary>
            Increases or decreases the current value.
            </summary>
            <param name="spinUp"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.SpinDigit(System.Boolean)">
            <summary>
            Spins the digit.
            </summary>
            <param name="spinUp">if set to <c>true</c> [spin up].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.SpinDigitWithWrap(System.Boolean)">
            <summary>
            Spins the digit with wrap.
            </summary>
            <param name="spinUp">if set to <c>true</c> [spin up].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.SpinValueBeforeDigit(System.Boolean)">
            <summary>
            Spins the value before digit.
            </summary>
            <param name="spinUp">if set to <c>true</c> [spin up].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.UpKey">
            <summary>
            Simulates pressing of up arrow key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.DownKey">
            <summary>
            Simulates pressing of down arrow key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.RightKey">
            <summary>
            Simulates pressing of down key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.HomeKey">
            <summary>
            Simulates pressing of Home key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.EndKey">
            <summary>
            Simulates pressing of End key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.InputBase.OnPropertyChanged(System.String)">
            <summary>
            Called when property is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.EnableDefaultValidation">
            <summary>
            Gets or sets a value whether the default validation is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.DefaultToolTipMessage">
            <summary>
            Gets or sets the default tooltip message.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.InputBase.ValueChanged">
            <summary>
            Represents the ValueChanged event.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.InputBase.ValueChanging">
            <summary>
            Represents the ValueChanging event.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.InputBase.ValidationFailed">
            <summary>
            Represents the ValidationFailed event.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.SpinType">
            <summary>
            Gets or sets editor's spin type.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.DecimalPlaces">
            <summary>
            Gets or sets editor's decimal places.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.CultureInfo">
            <summary>
            Gets or sets editor's culture information.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.SeparatorChar">
            <summary>
            Gets the current separator character.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.Minimum">
            <summary>
            Gets or sets editor's Minimum value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.Maximum">
            <summary>
            Gets or sets editor's Maximum value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.LastValue">
            <summary>
            Gets editor's last value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.HasSeparator">
            <summary>
            Gets a value indicating whether this instance has separator.
            </summary>
            <value>
            	<c>true</c> if this instance has separator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.TextValue">
            <summary>
            Gets or sets the text value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.IsNegative">
            <summary>
            Gets a value indicating whether the value is negative.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.InputBase.Value">
            <summary>
            Gets or sets editor's value.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.InputBase.PropertyChanged">
            <summary>
            Occurs when a property has changed.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.#ctor">
            <summary>
            Initializes a new instance of decimal editor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeftButtonUp"/> event.
            </summary>
            <param name="mevent">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DecimalEditor.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DecimalEditor.HasSeparator">
            <summary>
            Gets a value indicating whether this instance has separator.
            </summary>
            <value>
            	<c>true</c> if this instance has separator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DecimalEditor.DecimalPlaces">
            <summary>
            Gets or sets editor's decimal places.
            </summary>
            <value></value>
        </member>
        <member name="T:VIBlend.WPF.Controls.UpDownDirection">
            <summary>
            Represents spin directions that could be initiated by the end-user.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownDirection.Increase">
            <summary>
            Represents a spin initiated by the end-user in order to Increase a value.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownDirection.Decrease">
            <summary>
            Represents a spin initiated by the end-user in order to Decrease a value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.LayoutModes">
            <summary>
            Represents the LayoutModes enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LayoutModes.Vertical">
            <summary>
            Specifies that the items are arranged vertically.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LayoutModes.HorizontalWrap">
            <summary>
            Specifies that the items are arranged horizontally and wrapping is enabled.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LayoutModes.VerticalWrap">
            <summary>
            Specifies that the items are arranged vertically and wrapping is enabled.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.LayoutModes.Columns">
            <summary>
            Specifies that the items are arranged in columns.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.CurrencyEditor">
            <summary>
            Represents an editor control which edits currency values.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.#ctor">
            <summary>
            Initializes a new instance of currency editor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.GetPureText">
            <summary>
            Gets editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeftButtonUp"/> event.
            </summary>
            <param name="mevent">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CurrencyEditor.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.CurrencyEditor.SeparatorChar">
            <summary>
            Gets the current separator character.
            </summary>
            <value></value>
        </member>
        <member name="T:VIBlend.WPF.Controls.ColorUtility">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorUtility.ToHtml(System.Windows.Media.Color)">
            <summary>
            Toes the HTML.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.ColorUtility.FromHtml(System.String)">
            <summary>
            Gets a color from html string.
            </summary>
            <param name="htmlColor">Color of the HTML.</param>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.Interpolation">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Interpolation.GetAlpha(System.Double)">
            <summary>
            Gets the alpha.
            </summary>
            <param name="progress">The progress.</param>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.LinearInterpolation">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.LinearInterpolation.GetAlpha(System.Double)">
            <summary>
            Gets the alpha.
            </summary>
            <param name="progress">The progress.</param>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.EasedInterpolation">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.EasedInterpolation"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.#ctor(VIBlend.WPF.Controls.EdgeBehaviorEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.EasedInterpolation"/> class.
            </summary>
            <param name="edgeBehavior">The edge behavior.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.GetEaseInAlpha(System.Double)">
            <summary>
            Gets the ease in alpha.
            </summary>
            <param name="progress">The progress.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.GetEaseOutAlpha(System.Double)">
            <summary>
            Gets the ease out alpha.
            </summary>
            <param name="progress">The progress.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.GetEaseInOutAlpha(System.Double)">
            <summary>
            Gets the ease in out alpha.
            </summary>
            <param name="timeFraction">The time fraction.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EasedInterpolation.GetAlpha(System.Double)">
            <summary>
            Gets the alpha.
            </summary>
            <param name="progress">The progress.</param>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.EasedInterpolation.EdgeBehavior">
            <summary>
            Gets or sets the edge behavior.
            </summary>
            <value>The edge behavior.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.ExponentialInterpolation">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ExponentialInterpolation.#ctor">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ExponentialInterpolation.#ctor(System.Double,VIBlend.WPF.Controls.EdgeBehaviorEnum)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ExponentialInterpolation.GetEaseInAlpha(System.Double)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ExponentialInterpolation.GetEaseOutAlpha(System.Double)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.ExponentialInterpolation.Power">
            <exclude/>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimePicker">
            <summary>
            Represents a control for editing DateTime objects.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.root">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.settingSelectedDate">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.DateTimePicker" /> class.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.ShowUpDownProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.CalendarStyleProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.DisplayDateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.DisplayDateEndProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.DisplayDateStartProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.FirstDayOfWeekProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.DateTimePicker.FirstDayOfWeek" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.DateTimePicker.FirstDayOfWeek" />
            dependency property.
            </value>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.OnFirstDayOfWeekChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            FirstDayOfWeekProperty property changed handler.
            </summary>
            <param name="d">DateTimePicker that changed its FirstDayOfWeek.</param>
            <param name="e">The DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when the IsDropDownOpen is changed.
            </summary>
            <param name="isDropDownOpen">if set to <c>true</c> [is drop down open].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the IsEnabled property changes.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.IsTodayHighlightedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimePicker.SelectedDateProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.CalculatePopupBounds">
            <summary>
            Calculates the popup bounds.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.OnApplyTemplate">
            <summary>
            Called when [apply template].
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.ChangeState(System.Boolean)">
            <summary>
            Changes the state.
            </summary>
            <param name="useTransitions">if set to <c>true</c> [use transitions].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.ToString">
            <summary>
            Provides a text representation of the selected date.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.OnDateSelected(VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:DateSelected"/> event.
            </summary>
            <param name="e">The <see cref="T:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimePicker.CalendarClosed">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimePicker.CalendarOpened">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.DateTimeEditor">
            <summary>
            Gets the date time editor.
            </summary>
            <value>The date time editor.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.FormatValue">
            <summary>
            Gets or sets a mask expression.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.DefaultDateTimeFormat">
            <summary>
            Gets or sets the default date time format.
            </summary>
            <value>The default date time format.</value> 
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimePicker.SelectedDateChanged">
            <summary>
            Occurs when the selected date is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.ShowUpDown">
            <summary>
            Gets or sets a value indicating whether the time picker mode is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.BlackoutDates">
            <summary>
            Gets a collection of dates that are marked as not selectable.
            </summary>
            <value>
            A collection of dates that cannot be selected. The default value is
            an empty collection.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.CalendarStyle">
            <summary>
            Gets or sets the style that is used when rendering the calendar.
            </summary>
            <value>
            The style that is used when rendering the calendar.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.DisplayDate">
            <summary>
            Gets or sets the date to display.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.DisplayDateEnd">
            <summary>
            Gets or sets the last date to be displayed.
            </summary>
            <value>The last date to display.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.DisplayDateStart">
            <summary>
            Gets or sets the first date to be displayed.
            </summary>
            <value>The first date to display.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.FirstDayOfWeek">
            <summary>
            Gets or sets the day that is considered the beginning of the week.
            </summary>
            <value>
            A <see cref="T:System.DayOfWeek" /> representing the beginning of
            the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.IsTodayHighlighted">
            <summary>
            Gets or sets a value indicating whether this instance is today highlighted.
            </summary>
            <value>
            	<c>true</c> if this instance is today highlighted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePicker.SelectedDate">
            <summary>
            Gets or sets the selected date.
            </summary>
            <value>The selected date.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimePicker.UIHelper">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePicker.UIHelper.FindVisualParent``1(System.Windows.DependencyObject)">
            <exclude/>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeEditor">
            <summary>
            Represents a DateTimeEditor control.
            </summary>
            <remarks>
            DateTimeEditor provides an editable text field that allows the user to enter date, and time.
            </remarks>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.GetEditors">
            <summary>
            Gets the editors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnSpinUp(VIBlend.WPF.Controls.DateTimeValueEventArgs)">
            <summary>
            Called when the value is spinned up.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnSpinDown(VIBlend.WPF.Controls.DateTimeValueEventArgs)">
            <summary>
            Raises the <see cref="E:SpinDown"/> event.
            </summary>
            <param name="args">The <see cref="!:VIBlend.SILVERLIGHT.Controls.DateTimeValueEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.AutoAdvanceSelectionProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.NullTextProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.IsWatermarkedProperty">
            <summary>
            Watermark dependency property.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.WatermarkProperty">
            <summary>
            Watermark dependency property.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnWatermarkChanged">
            <summary>
            Inherited code: Requires comment.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.ValueProperty">
            <summary>
            Represents the ValueProperty.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.MinimumProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeEditor.MaximumProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnValidationFailed">
            <summary>
            Calls the ValidationFailed event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.#ctor">
            <summary>
            DateTimeEditor contructor
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnValueChanging(VIBlend.WPF.Controls.DateTimeValueCancelEventArgs)">
            <summary>
            Called when the value has been changed
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnValueChanged(VIBlend.WPF.Controls.DateTimeValueEventArgs)">
            <summary>
            Called when the value has been changed
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnFormatValueChanged">
            <summary>
            Called when the format value has been changed
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.SetDefaultDateTimeFormat">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.LoadItem(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Loads the item.
            </summary>
            <param name="mask">The mask.</param>
            <param name="dateTimeFormatInfo">The date time format info.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="e">The data for the event. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event occurs.
            </summary>
            <param name="e">The data for the event. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before <see cref="E:System.Windows.UIElement.GotFocus"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.UpdateText">
            <summary>
            Updates the text.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnEditorKeyPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the EditorKeyPressed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.UIElement.KeyDown"/> occurs.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/>Â routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp"/>Â routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Does the key down.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoDownKey">
            <summary>
            Does down key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoUpKey">
            <summary>
            Does up key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoF2Key">
            <summary>
            Does the f2 key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoSpaceKey">
            <summary>
            Does the space key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoEndKey">
            <summary>
            Does the end key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoHomeKey">
            <summary>
            Does the home key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoLeftKey">
            <summary>
            Does the left key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoRightKey">
            <summary>
            Does the right key.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseWheel"/> event occurs to provide handling for the event in a derived class without attaching a delegate.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.DoMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Does the mouse wheel.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.PerformSpin(System.Boolean)">
            <summary>
            Performs the spin.
            </summary>
            <param name="spinUp">if set to <c>true</c> [spin up].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.SpinDown">
            <summary>
            Spins down.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.SpinUp">
            <summary>
            Spins up.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called before <see cref="E:System.Windows.UIElement.KeyUp"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.ParseValue(System.String)">
            <summary>
            Parses the value.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.Format(System.Nullable{System.DateTime})">
            <summary>
            Formats the specified formatted.
            </summary>
            <param name="formatted">The formatted.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.Format(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            return a formatted date time string based on a start and end indeces
            </summary>
            <param name="formatted">The formatted.</param>
            <param name="startFormatIndex">Start index of the format.</param>
            <param name="endFormatIndex">End index of the format.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditor.OnPropertyChanged(System.String)">
            <summary>
            Called when property is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.ActiveEditor">
            <summary>
            Gets the active editor.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.ActiveEditorType">
            <summary>
            Gets the type of the active editor.
            </summary>
            <value>
            The type of the active editor.
            </value>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.SpinUpValue">
            <summary>
            Occurs when the current editor is spinned up.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.SpinDownValue">
            <summary>
            Occurs when the current editor is spinned down.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.AutoAdvanceSelection">
            <summary>
            Gets or sets a value indicating whether the auto advance selection is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.IsWatermarked">
            <summary>
            Gets or sets the Watermark content.
            </summary>
            <value>The watermark.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.Watermark">
            <summary>
            Gets or sets the Watermark content.
            </summary>
            <value>The watermark.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.NullText">
            <summary>
            Gets or sets the null text.
            </summary>
            <value>The null text.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.Minimum">
            <summary>
            Gets or sets the Minimum datetime value.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.Maximum">
            <summary>
            Gets or sets the Maximum datetime value.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.ValueChanged">
            <summary>
            Occurs when the value has been changed
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.ValueChanging">
            <summary>
            Occurs when the value has been changing
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.FormatValueChanged">
            <summary>
            Occurs when the format value has been changed
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.ValidationFailed">
            <summary>
            Represents the ValidationFailed event.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.LastValue">
            <summary>
            Gets or sets the last datetime value
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.IsLoaded">
            <summary>
            Gets a value indicating whether this instance is loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.EnableDefaultValidation">
            <summary>
            Gets or sets a value whether the default validation is enabled.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.DefaultToolTipMessage">
            <summary>
            Gets or sets the default tooltip message.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.FormatValue">
            <summary>
            Gets or sets a mask expression.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditor.DefaultDateTimeFormat">
            <summary>
            Gets or sets the default date time format.
            </summary>
            <value>The default date time format.</value> 
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DateTimeEditor.PropertyChanged">
            <summary>
            Occurs when a property has changed.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.RadioButton">
            <summary>
            Represents a button that allows a user to select a single option from a group
            of options.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.GridName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.ContentName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushDisabledProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushPressedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushHighlightProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.RadioButton"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.RadioButton.RadioAlignmentProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.Toggle">
            <summary>
            Toggles the RadioButton state.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.SynchronizeRadioMarkBrushs">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnEditorKeyPressed(System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the EditorKeyPressed event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.RadioButton.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushDisabled">
            <summary>
            Gets or sets whether the button's background opacity.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.RadioMarkBrush">
            <summary>
            Gets or sets the RadioMarkBrush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushPressed">
            <summary>
            Gets or sets the RadioMarkBrushPressed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.RadioMarkBrushHighlight">
            <summary>
            Gets or sets the RadioMarkBrushHighlight.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.Radio">
            <summary>
            Gets the Radio layout.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.ContentPresenter">
            <summary>
            Gets the content presenter element.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.Layout">
            <summary>
            Gets the RadioButton Root panel.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.RadioButton.RadioAlignment">
            <summary>
            Gets or sets the Radio mark and content presenter relation.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.RadioButton.EditorKeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ErrorProviderIconAlignment">
            <summary>
            Represents the icon alignment enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.TopLeft">
            <summary>
            Aligns the current window to the top left of the host element.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.TopRight">
            <summary>
            Aligns the current window to the top right of the host element.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.MiddleLeft">
            <summary>
            Aligns the current window to the middle left of the host element.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.MiddleRight">
            <summary>
            Aligns the current window to the middle right of the host element.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.BottomLeft">
            <summary>
            Aligns the current window to the bottom left of the host element.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ErrorProviderIconAlignment.BottomRight">
            <summary>
            Aligns the current window to the bottom right of the host element.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeValueEventArgs">
            <summary>
            Represents the SpinUp and SpinDown events data.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeValueEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeValueEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeValueEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeValueEventArgs.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.UndoRedoManager">
            <summary>
            Represents undo/redo management.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.UndoRedoManager.SaveChanges(VIBlend.WPF.Controls.EditorState)">
            <summary>
            Saves the current state and adds it to the states collection.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UndoRedoManager.Undo">
            <summary>
            Undo current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.UndoRedoManager.Redo">
            <summary>
            Redo current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.UndoRedoManager.GetState">
            <summary>
            Gets the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VIBlend.WPF.Controls.UpDownBase">
            <summary>
            Represents a base class for editing up down values.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.ElementIncreaseButtonName">
            <summary>
            Name constant of the IncreaseButton template part.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.ElementDecreaseButtonName">
            <summary>
            Name constant of the DecreaseButton template part.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.IsOpacityIncreasedProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.upButton">
            <summary>
            Private field for IncreaseButton template part.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.downButton">
            <summary>
            Private field for DecreaseButton template part.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.UpDownBase.ContentProperty">
            <summary>
            Identifies the Content dependency property.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ContentProperty property changed handler.
            </summary>
            <param name="d">ButtonSpinner that changed its Content.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.#ctor">
            <summary>
            Initializes a new instance of the ButtonSpinner class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ButtonSpinner control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnContentChanged(System.Object,System.Object)">
            <summary>
            Occurs when the Content property value changed.
            </summary>
            <param name="oldValue">The old value of the Content property.</param>
            <param name="newValue">The new value of the Content property.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle click event of IncreaseButton and DecreaseButton template parts,
            translating Click to appropriate Spin event.
            </summary>
            <param name="sender">Event sender, should be either IncreaseButton or DecreaseButton template part.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Cancel LeftMouseButtonUp events originating from a button that has
            been changed to disabled.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the
            <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that
            contains the event data.
            </param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnValidSpinDirectionChanged(VIBlend.WPF.Controls.SpinDirections,VIBlend.WPF.Controls.SpinDirections)">
            <summary>
            Called when valid spin direction changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnIncreaseAnimationCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:IncreaseAnimationCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.OnDecreaseAnimationCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DecreaseAnimationCompleted"/> event.
            </summary>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownBase.SetButtonUsage">
            <summary>
            Disables or enables the buttons based on the valid spin direction.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.UpDownBase.IsOpacityIncreased">
            <summary>
            Gets or sets a value indicating whether this instance is opacity increased.
            </summary>
            <value>
            	<c>true</c> if this instance is opacity increased; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VIBlend.WPF.Controls.UpDownBase.IncreaseButton">
            <summary>
            Gets or sets the IncreaseButton template part.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.UpDownBase.DecreaseButton">
            <summary>
            Gets or sets the DecreaseButton template part.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.UpDownBase.Content">
            <summary>
            Gets or sets the content that is contained within the button spinner.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SpinDirections">
            <summary>
            Represents spin directions that are valid.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinDirections.None">
            <summary>
            Can not increase nor decrease.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinDirections.Increase">
            <summary>
            Can increase.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinDirections.Decrease">
            <summary>
            Can decrease.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.FixedPointEditor">
            <summary>
            Represents an editor control which edits fixed-point values.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.#ctor">
            <summary>
            Initializes a new instance of fixed point editor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeftButtonUp"/> event.
            </summary>
            <param name="mevent">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.FixedPointEditor.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.FixedPointEditor.SeparatorChar">
            <summary>
            Gets the SeparatorChar.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.IDateTimeEditor">
            <summary>
            Base Class For All Editors
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.IDateTimeEditor.GetDateTimeItem">
            <summary>
            Gets the date time item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.IDateTimeEditor.InsertString(System.String)">
            <summary>
            Inserts the string.
            </summary>
            <param name="inserted">The inserted.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.IDateTimeEditor.GetTextValue">
            <summary>
            Gets the text value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.IDateTimeEditor.Up">
            <summary>
            Ups this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.IDateTimeEditor.Down">
            <summary>
            Downs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.IDateTimeEditor.TextValue">
            <summary>
            Gets the text value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTypeConverter">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:VIBlend.Silverlight.Controls.DateTimeTypeConverter" />
            class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether it is possible to convert the
            specified type to a <see cref="T:System.DateTime" /> with the
            specified format context.
            </summary>
            <param name="context">
            The format context that is used to convert the specified type.
            </param>
            <param name="sourceType">The type to convert.</param>
            <returns>
            True if the conversion is possible; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a <see cref="T:System.DateTime"/>
            with the specified culture with the specified format context.
            </summary>
            <param name="context">
            The format context that is used to convert the specified type.
            </param>
            <param name="culture">The culture to use for the result.</param>
            <param name="value">The value to convert.</param>
            <returns>
            A <see cref="T:System.DateTime"/> object that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.FormatException">
            The conversion cannot be performed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The culture is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is null.
            </exception>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether it is possible to convert a
            <see cref="T:System.DateTime" /> to the specified type within the
            specified format context.
            </summary>
            <param name="context">
            The format context that is used to convert.
            </param>
            <param name="destinationType">The type to convert to.</param>
            <returns>
            True if the conversion is possible; otherwise, false.
            </returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> with the specified
            culture to the specified object with the specified format context.
            </summary>
            <param name="context">
            The format context that is used to convert to the specified type.
            </param>
            <param name="culture">
            The culture to use for the converting date.
            </param>
            <param name="value">The date to convert.</param>
            <param name="destinationType">The type to convert to.</param>
            <returns>
            An object of the specified type that represents
            <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The culture is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The destinationType is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.NotSupportedException">
            The value is not a DateTime or the destinationType is not a string.
            </exception>
        </member>
        <member name="T:VIBlend.WPF.Controls.ButtonPosition">
            <summary>
            Represents a ButtonPosition enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ButtonPosition.Top">
            <summary>
            Top Position
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ButtonPosition.Bottom">
            <summary>
            Bottom Position
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ButtonPosition.Left">
            <summary>
            Left Position
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ButtonPosition.Right">
            <summary>
            Right Position
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.PercentageEditor">
            <summary>
            Represents an editor control which edits percentage values.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.#ctor">
            <summary>
            Represents a new instance of PercentageEditor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="e">The data for the event. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeftButtonUp"/> event.
            </summary>
            <param name="mevent">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.PercentageEditor.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.PercentageEditor.SeparatorChar">
            <summary>
            Gets the current separator character.
            </summary>
            <value></value>
        </member>
        <member name="T:VIBlend.WPF.Controls.CheckedChangedEventArgs">
            <summary>
            CheckedLstBox related class that contains event data. 
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.CheckedChangedEventArgs.#ctor(VIBlend.WPF.Controls.CheckedListBoxItem)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.CheckedChangedEventArgs"/> class.
            </summary>
            <param name="checkedListBoxItem">The checked list box item.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.CheckedChangedEventArgs.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.EditorAmPmItem">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorAmPmItem.amString">
            <summary>
            am string field.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorAmPmItem.pmString">
            <summary>
            pm string field.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.InsertString(System.String)">
            <summary>
            Inserts the specified inserted.
            </summary>
            <param name="inserted">The inserted.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.Up">
            <summary>
            Ups this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.Down">
            <summary>
            Downs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.GetTextValue">
            <summary>
            Gets the text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.#ctor(System.String,System.Int32,System.String,System.String,VIBlend.WPF.Controls.DateTimeEditorFormatItem)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.EditorAmPmItem"/> class.
            </summary>
            <param name="formatValue">The format value.</param>
            <param name="baseValue">The base value.</param>
            <param name="am">The am.</param>
            <param name="pm">The pm.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.EditorAmPmItem.GetDateTimeItem">
            <summary>
            Gets the item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.EditorAmPmItem.TextValue">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.DisabledEditor">
            <summary>
            
            </summary>
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.#ctor(System.String,System.Int32,VIBlend.WPF.Controls.DateTimeEditorFormatItem)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DisabledEditor"/> class.
            </summary>
            <param name="formatValue">The format value.</param>
            <param name="baseValue">The base value.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.InsertString(System.String)">
            <summary>
            Inserts the specified inserted.
            </summary>
            <param name="inserted">The inserted.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.GetTextValue">
            <summary>
            Gets the text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.Up">
            <summary>
            Ups this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.Down">
            <summary>
            Downs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DisabledEditor.GetDateTimeItem">
            <summary>
            Gets the item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.DisabledEditor.TextValue">
            <summary>
            Gets the text value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeFormatBaseEditor">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.positions">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.UpdateActiveEditor(System.Int64)">
            <summary>
            Updates the  current value
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,VIBlend.WPF.Controls.DateTimeEditorFormatItem)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeFormatBaseEditor"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="minEditPositions">The min edit positions.</param>
            <param name="maxEditPositions">The max edit positions.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,VIBlend.WPF.Controls.DateTimeEditorFormatItem)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeFormatBaseEditor"/> class.
            </summary>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="minEditPositions">The min edit positions.</param>
            <param name="maxEditPositions">The max edit positions.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.GetDateTimeItem">
            <summary>
            Gets the date time item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.InsertString(System.String)">
            <summary>
            Inserts the specified insered value.
            </summary>
            <param name="inseredValue">The insered value.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.Up">
            <summary>
            Ups this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.Down">
            <summary>
            Downs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.GetTextValue">
            <summary>
            Gets the text.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.HasDigits">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.MinimumValue">
            <summary>
            Gets the min available value
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.MaximumValue">
            <summary>
            Gets the max available value
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.MinPositions">
            <summary>
            Gets the minimum amount of digits
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.MaxPositions">
            <summary>
            Gets the maximum amount of digits
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.Value">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatBaseEditor.TextValue">
            <summary>
            Updates editor's text
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.RealYear(System.Globalization.Calendar)">
            <summary>
            Shifts the year.
            </summary>
            <param name="calendar">The calendar.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.#ctor(System.Int32,System.Int32,System.Globalization.DateTimeFormatInfo,VIBlend.WPF.Controls.DateTimeEditorFormatItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor"/> class.
            </summary>
            <param name="baseYear">The base year.</param>
            <param name="formatValueLength">Length of the format value.</param>
            <param name="info">The info.</param>
            <param name="item">The item.</param>
            <param name="val">if set to <c>true</c> [val].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.#ctor(System.Object,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String[],VIBlend.WPF.Controls.DateTimeEditorFormatItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor"/> class.
            </summary>
            <param name="editedValue">The edited value.</param>
            <param name="initialValue">The initial value.</param>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <param name="minEditingPositions">The min editing positions.</param>
            <param name="maxEditingPositions">The max editing positions.</param>
            <param name="dayKeys">The day keys.</param>
            <param name="item">The item.</param>
            <param name="val">if set to <c>true</c> [val].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.Insert(System.String)">
            <summary>
            Inserts the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.#ctor(System.Int32,System.Int32,System.String[],VIBlend.WPF.Controls.DateTimeEditorFormatItem,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor"/> class.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="positions">The positions.</param>
            <param name="monthsNames">The months names.</param>
            <param name="item">The item.</param>
            <param name="val">if set to <c>true</c> [val].</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.MinPositions">
            <summary>
            Gets the minimum amount of digits
            </summary>
            <value></value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeFormatDayMonthYearEditor.TextValue">
            <summary>
            Gets editor's text
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ComboBoxToggleButton">
            <summary>
            Represents a combo box toggle button.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.DefaultRectangleName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.DefaultTransparentRectangleName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowName">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.ContentPresenterName">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.OnArrowButtonClick">
            <summary>
            Raises the ArrowButtonClick event.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.#ctor">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowBrushProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.OnApplyTemplate">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove"/> event that occurs when the mouse pointer moves while over this element.
            </summary>
            <param name="e">The event data.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="e"/> is null.</exception>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxToggleButton.OnToggle">
            <summary>
            Called by the <see cref="M:System.Windows.Controls.Primitives.ToggleButton.OnClick"/> method to implement toggle behavior.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowAlignmentProperty">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowButtonClick">
            <summary>
            Occurs when the arrow button is clicked.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowBrush">
            <summary>
            Gets or sets the combobox's arrow brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBoxToggleButton.ArrowAlignment">
            <summary>
            Gets or sets the combobox's arrow brush.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.AnchorStyles">
            <summary>
            Represents AnchorStyles enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.AnchorStyles.Bottom">
            <summary>
            AnchorStyle - Bottom
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.AnchorStyles.Left">
            <summary>
            AnchorStyle - Left
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.AnchorStyles.None">
            <summary>
            AnchorStyle - None
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.AnchorStyles.Right">
            <summary>
            AnchorStyle - Right
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.AnchorStyles.Top">
            <summary>
            AnchorStyle - Top
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SpinType">
            <summary>
            Represents spin type enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinType.None">
            <summary>
            Disable spin.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinType.SpinDigit">
            <summary>
            Spins the current digit.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinType.SpinValueBeforeDigit">
            <summary>
            Spins the value before the current digit.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.SpinType.SpinDigitWithWrap">
            <summary>
            Spins the current digit with wrap mode.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ErrorProviderUIElement">
            <summary>
            Represents the error provider.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProviderUIElement.#ctor(VIBlend.WPF.Controls.ErrorProvider,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ErrorProviderUIElement"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="frameworkElement">The framework element.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProviderUIElement.StartBlinking">
            <summary>
            Starts window blinking.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ErrorProviderUIElement.UpdateWindow">
            <summary>
            updates the error window.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProviderUIElement.BlinkPhase">
            <summary>
            Gets or sets the blink phase.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProviderUIElement.Error">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProviderUIElement.Element">
            <summary>
            Gets the instance of the associated framework element.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ErrorProviderUIElement.Provider">
            <summary>
            Gets the instance of the associated error provider.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs"/> class.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs.AddedItems">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimePickerSelectionChangedEventArgs.RemovedItems">
            <exclude/>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeEditorFormatItem">
            <summary>
            Represents a single item that is part of the DateTimeEditor's Value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditorFormatItem.#ctor(System.String,System.Globalization.DateTimeFormatInfo,VIBlend.WPF.Controls.DateTimeItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeEditorFormatItem"/> class.
            </summary>
            <param name="formatValue">The format value.</param>
            <param name="info">The info.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditorFormatItem.GetDateTimeWithOffset(System.Int32,System.DateTime)">
            <summary>
            Gets the date time with offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditorFormatItem.DateParser(System.Nullable{System.DateTime})">
            <summary>
            Dates the parser.
            </summary>
            <param name="formattedDateTime">The formatted date time.</param>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeEditorFormatItem.GetDateTimeEditorByItemType(System.DateTime)">
            <summary>
            Gets the editor.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditorFormatItem.FormatValue">
            <summary>
            Gets the format value.
            </summary>
            <value>The format value.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditorFormatItem.DateTimeInfo">
            <summary>
            Gets the date time info.
            </summary>
            <value>The date time info.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditorFormatItem.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditorFormatItem.ItemValue">
            <summary>
            Gets the item value.
            </summary>
            <value>The item value.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeEditorFormatItem.ItemType">
            <summary>
            Gets the type of the item.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.Slider">
            <summary>
            Represents a control that has a value within a specific range.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.Slider.ViewportSizeProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Slider.OrientationProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.Slider.SliderButtonsVisibilityProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.Slider"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>. In simplest terms, this means the method is called just before a UI element displays in an application. For more information, see Remarks.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.LostMouseCapture"/> event occurs to provide handling for the event in a derived class without attaching a delegate.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property changes.
            </summary>
            <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property.</param>
            <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"/> property.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMinimumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property changes.
            </summary>
            <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property.</param>
            <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"/> property.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseEnter"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeave"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.Slider.OnValueChanged(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Primitives.RangeBase.ValueChanged"/> routed event.
            </summary>
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/> property.</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/> property.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.Slider.SliderButtonsVisibility">
            <summary>
            Gets or sets whether the slider buttons are visible.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.Slider.Scroll">
            <summary>
            Occurs when the scroll value is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Slider.Orientation">
            <summary>
            Gets or sets the Slider's orientation.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.Slider.ViewportSize">
            <summary>
            Gets or sets the size of the view port.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ComboBoxEventArgs">
            <summary>
            Represents a base class for all combobox events.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxEventArgs.#ctor(System.Object,VIBlend.WPF.Controls.ComboBoxItem)">
            <exclude/>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBoxEventArgs.Item">
            <summary>
            Gets the instance of the object to convert.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBoxEventArgs.ComboBoxItem">
            <summary>
            Gets or sets the instance of the conterted Item to ComboBoxItem.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.ComboBoxEventArgs.Handled">
            <summary>
            Gets or sets whether the event is handled.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.UpDownEventArgs">
            <summary>
            Provides data for the Spinner.Spin event.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:VIBlend.WPF.Controls.UpDownEventArgs.#ctor(VIBlend.WPF.Controls.UpDownDirection)">
            <summary>
            Initializes a new instance of the SpinEventArgs class.
            </summary>
            <param name="direction">Spin direction.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.UpDownEventArgs.Direction">
            <summary>
            Gets the SpinDirection for the spin that has been initiated by the 
            end-user.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SpinEditorValueChangedEventArgs">
            <summary>
            Represents the SpinEditorValueChangedEditorEventArgs args.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditorValueChangedEventArgs.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.SpinEditorValueChangedEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditorValueChangedEventArgs.Value">
            <summary>
            Gets the decimal value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.SpinEditorValueChangingEventArgs">
            <summary>
            Represents the SpinEditorValueChangingEditorEventArgs args.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.SpinEditorValueChangingEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.SpinEditorValueChangingEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.SpinEditorValueChangingEventArgs.Value">
            <summary>
            Gets the decimal value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.NumberEditor">
            <summary>
            Represents an editor control which edits floating numbers.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.#ctor">
            <summary>
            Initializes a new instance of NumberEditor.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.ParseValue">
            <summary>
            Parses editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.SetFormattedText">
            <summary>
            Formats editor's text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.Undo">
            <summary>
            Makes undo of the current value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.CtrlC">
            <summary>
            Executes the Ctrl + C command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.CtrlV">
            <summary>
            Executes the Ctrl + V command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.CtrlX">
            <summary>
            Executes the Ctrl + X command.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.Insert(System.String)">
            <summary>
            Inserts a string into the editor.
            </summary>
            <param name="insertion"></param>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeftButtonUp"/> event.
            </summary>
            <param name="mevent">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.Delete">
            <summary>
            Deletes the selected value.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.NumberEditor.Backspace">
            <summary>
            Simulates BackSpace.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.NumberEditor.SeparatorChar">
            <summary>
            Gets the current separator character.
            </summary>
            <value></value>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeItemType">
            <summary>
            Enumaration of the DateTime item types
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Year">
            <summary>
            Year date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Month">
            <summary>
            Month date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Day">
            <summary>
            Day date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Minute">
            <summary>
            Minute date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Second">
            <summary>
            Second date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Millisecond">
            <summary>
            Millisecond date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.FORMAT_hh">
            <summary>
            hh date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.FORMAT_HH">
            <summary>
            HH date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.FORMAT_AMPM">
            <summary>
            AM/PM date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.Character">
            <summary>
            Character date time type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DateTimeItemType.ReadOnly">
            <summary>
            ReadOnly date time type.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DateTimeValueCancelEventArgs">
            <summary>
            Represents a class for the event data.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DateTimeValueCancelEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DateTimeValueCancelEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeValueCancelEventArgs.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:VIBlend.WPF.Controls.DateTimeValueCancelEventArgs.OldValue">
            <summary>
            Gets or sets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:VIBlend.WPF.Controls.EditorType">
            <summary>
            Represents EditorType enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorType.Currency">
            <summary>
            Represents a currency editor type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorType.Number">
            <summary>
            Represents a numeric editor type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorType.Percentage">
            <summary>
            Represents a percentage editor type.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.EditorType.FixedPoint">
            <summary>
            Represents a fixed-point editor type.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ValueChangedEditorEventHandler">
            <summary>
            Represents a ValueChangedEditor delegate.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:VIBlend.WPF.Controls.ValueChangingEditorEventHandler">
            <summary>
            Represents a ValueChangingEditor.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:VIBlend.WPF.Controls.ValueChangedEditorEventArgs">
            <summary>
            Represents the ValueChangedEditor args.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ValueChangedEditorEventArgs.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ValueChangedEditorEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ValueChangedEditorEventArgs.Value">
            <summary>
            Gets the decimal value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ValueChangingEditorEventArgs">
            <summary>
            Represents the ValueChangingEditor args.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ValueChangingEditorEventArgs.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ValueChangingEditorEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:VIBlend.WPF.Controls.ValueChangingEditorEventArgs.Value">
            <summary>
            Gets the decimal value.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.ComboBoxItem">
            <summary>
            Represents a single item in the ComboBox control.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ComboBoxItem"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.ComboBoxItem"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.ComboBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="T:VIBlend.WPF.Controls.ColorPickerDisplayMode">
            <summary>
            Represents the ColorPickerDisplayMode enumeration.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPickerDisplayMode.Default">
            <summary>
            Displays a default color picker.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPickerDisplayMode.RGB">
            <summary>
            Displays the color string as RGB string.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPickerDisplayMode.ARGB">
            <summary>
            Displays the color string as ARGB  string.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.ColorPickerDisplayMode.Html">
            <summary>
            Displays the color string as HTML string.
            </summary>
        </member>
        <member name="T:VIBlend.WPF.Controls.DropDownButton">
            <summary>
            Represents a button control that displays a popup control when clicked.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnButtonClick">
            <summary>
            Raises the Click event of the Button.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnButtonPositionChanged">
            <summary>
            Raises the ButtonPositionChanged event.
            </summary>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.CornerRadiusProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ArrowBrushProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ButtonPositionProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ToggleButtonContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ToggleButtonContentProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ContentTemplateProperty">
            <exclude/>
        </member>
        <member name="F:VIBlend.WPF.Controls.DropDownButton.ContentProperty">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VIBlend.WPF.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnApplyTemplate">
            <summary>
            Called when [apply template].
            </summary>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnGotFocus(System.Windows.RoutedEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnIsDropDownOpenChanged(System.Boolean)">
            <summary>
            Called when [is drop down open changed].
            </summary>
            <param name="isDropDownOpen">if set to <c>true</c> [is drop down open].</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/>Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/>Â routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:VIBlend.WPF.Controls.DropDownButton.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <exclude/>
        </member>
        <member name="E:VIBlend.WPF.Controls.DropDownButton.ButtonClick">
            <summary>
            Occurs when the  button is clicked.
            </summary>
        </member>
        <member name="E:VIBlend.WPF.Controls.DropDownButton.ButtonPositionChanged">
            <summary>
            Occurs when the  button position is changed.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.CornerRadius">
            <summary>
            Gets or sets button's corner radius.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.ButtonPosition">
            <summary>
            Gets or sets the group box's header primary position.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.ArrowBrush">
            <summary>
            Gets or sets the button's arrow brush.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.ToggleButtonContentTemplate">
            <summary>
            Gets or sets the data template of the ToggleButton header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.ToggleButtonContent">
            <summary>
            Gets or sets the content of the ToggleButton button.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.ContentTemplate">
            <summary>
            Gets or sets the data template of the  header.
            </summary>
        </member>
        <member name="P:VIBlend.WPF.Controls.DropDownButton.Content">
            <summary>
            Gets or sets the content of the  button.
            </summary>
        </member>
    </members>
</doc>
