<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.WpfTwain</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction">
            <summary>
            Specifies available actions for processing of image acquired from TWAIN device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.Deskew">
            <summary>
            Image is deskewing, i.e. correct position of image is detecting.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.Despeckle">
            <summary>
            Noise is removing from the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.BorderDetection">
            <summary>
            Border around the image is detecting.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.ImageIsBlankImage">
            <summary>
            Detecting that the image is a blank image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.Rotation">
            <summary>
            Image is rotating.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.Invert">
            <summary>
            Image is inverting.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.ChangeBrightness">
            <summary>
            Brightness of image is changing.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.ChangeContrast">
            <summary>
            Contrast of image is changing.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.Crop">
            <summary>
            Image is cropping.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction.ResizeCanvas">
            <summary>
            Image canvas is changing.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.AcquiredImage.Processed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessedEventArgs.#ctor(Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessedEventArgs" />
            class.
            </summary>
            <param name="action">Current action.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessedEventArgs.Action">
            <summary>
            Current action.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.AcquiredImage.Processing" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingEventArgs.#ctor(Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingEventArgs" />
            class.
            </summary>
            <param name="action">Current action.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingEventArgs.Action">
            <summary>
            Current action.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingEventArgs.Cancel">
            <summary>
            Indicates that current action must be canceled.
            </summary>
            <value>
            <b>true</b> if current action must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.AcquiredImage.Progress" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs.#ctor(Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingAction,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs" />
            class.
            </summary>
            <param name="action">Current action.</param>
            <param name="progress">Progress of the action.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs.Action">
            <summary>
            Current action.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs.Progress">
            <summary>
            Gets the progress, in percents, of current action.
            </summary>
            <value>Value from 0 to 100.</value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs.CanCancel">
            <summary>
            Indicates that current action can be canceled.
            </summary>
            <value><b>true</b> if current action can be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageProcessing.AcquiredImageProcessingProgressEventArgs.Cancel">
            <summary>
            Indicates that current action must be canceled.
            </summary>
            <value>
            <b>true</b> if current action must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings">
            <summary>
            Class that contains settings of BMP encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings">
            <summary>
            Provides the base class for image encoder settings.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings">
            <summary>
            Class that contains settings of GIF encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.JpegColorSpace">
            <summary>
            Specifies available color spaces for JPEG files.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.JpegColorSpace.RGB">
            <summary>
            RGB
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.JpegColorSpace.Gray">
            <summary>
            Grayscale
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.JpegColorSpace.Auto">
            <summary>
            The best color space is used automatically
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings">
            <summary>
            Class that contains settings of JPEG encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings.JpegQuality">
            <summary>
            Gets or sets the quality of JPEG images.
            </summary>
            <value>Default value is 90. Possible values from 10 to 100.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings.JpegColorSpace">
            <summary>
            Get or sets a JPEG color space.
            </summary>
            <value>Default value is <b>JpegColorSpace.Auto</b>.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo">
            <summary>
            Class that contains information about PDF document.
            </summary>
            <remarks>
            You can set all information about PDF document or specify only necessary
            information. For example, you must set value of the
            <see cref="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.ModificationDate" /> property if you want to update the
            modification date only.
            </remarks>
            <example>
            <code lang="VB.NET">
            Private Sub SaveLastAcquiredImageToPdf(ByVal acquiredImage1 As AcquiredImage, ByVal productName As String)
                ' set settings of PDF encoder
                Dim pdfEncoderSettings1 As TwainPdfEncoderSettings = New TwainPdfEncoderSettings
                pdfEncoderSettings1.PdfDocumentInfo.Author = "VintaSoft Ltd."
                pdfEncoderSettings1.PdfDocumentInfo.Title = String.Format("Documents acquired from {0}", productName)
                pdfEncoderSettings1.PdfDocumentInfo.Creator = "VintaSoftTwain.NET Library"
                pdfEncoderSettings1.PdfDocumentInfo.CreationDate = DateTime.Now
            
                ' save image to PDF document
                acquiredImage1.Save("c:\test.pdf", pdfEncoderSettings1)
            End Sub
            </code>
            <code lang="C#">
            private void SaveLastAcquiredImageToPdf(AcquiredImage acquiredImage1, string productName)
            {
                // set settings of PDF encoder
                TwainPdfEncoderSettings pdfEncoderSettings = new TwainPdfEncoderSettings();
                pdfEncoderSettings.PdfDocumentInfo.Author = "VintaSoft Ltd.";
                pdfEncoderSettings.PdfDocumentInfo.Title = string.Format("Documents acquired from {0}", productName);
                pdfEncoderSettings.PdfDocumentInfo.Creator = "VintaSoftTwain.NET Library";
                pdfEncoderSettings.PdfDocumentInfo.CreationDate = DateTime.Now;
            
                // save image to PDF document
                acquiredImage1.Save(@"c:\test.pdf", pdfEncoderSettings);
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Author">
            <summary>
            The name of the person who created the document.
            </summary>
            <value>
            Author tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value is string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Creator">
            <summary>
            Application that creates or modifies the document.
            </summary>
            <value>
            Creator tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value is "VintaSoftTwain.NET".
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Keywords">
            <summary>
            Keywords associated with the document.
            </summary>
            <value>
            Keywords tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value is string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Producer">
            <summary>
            Application that converts the document to PDF format.
            </summary>
            <value>
            Producer tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Subject">
            <summary>
            The subject of the document.
            </summary>
            <value>
            Subject tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value is string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.Title">
            <summary>
            The document’s title.
            </summary>
            <value>
            Title tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value is string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.CreationDate">
            <summary>
            The date and time the document was created.
            </summary>
            <value>
            Creation date tag is not saved to PDF document if value of this property
            is set to DateTime.MinValue.<br />
            Default value is DateTime.MinValue.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.PdfDocumentInfo.ModificationDate">
            <summary>
            The date and time the document was most recently modified.
            </summary>
            <value>
            Modification date tag is not saved to PDF document if value of this
            property is set to DateTime.MinValue.<br />
            Default value is DateTime.MinValue.
            </value>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression">
            <summary>
            Specifies available compression algorithm which image can be saved to PDF file.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.None">
            <summary>
            Image will be saved to PDF document without compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.CcittFax">
            <summary>
            Image will be saved to PDF document with CCITT Group 4 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.LZW">
            <summary>
            Image will be saved to PDF document with LZW compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.JPEG">
            <summary>
            Image will be saved to PDF document with JPEG compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.ZIP">
            <summary>
            Image will be saved to PDF document with ZIP compression.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.PdfImageCompression.Auto">
            <summary>
            Black-white image will be saved to PDF document with CCITT Group 4 Fax
            compression,
            palette and gray image will be saved with LZW compression,
            color image will be saved with JPEG compression.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings">
            <summary>
            Class that contains settings of PDF encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.PdfMultiPage">
            <summary>
            Gets or sets a value indicating whether multipage PDF document must be created.
            </summary>
            <value>
            <b>true</b> - multipage PDF file must be created;
            <b>false</b> - singlepage PDF file must be created.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            New file will be created if this property is set to true and PDF file
            does not exist.<br />
            New image will be added to existing file if this property is set to
            true and the PDF file exists.<br />
            New file will be created or old file will be replaced if this property
            is set to false.<br />
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.PdfACompatible">
            <summary>
            Gets or sets a value indicating whether PDF/A document must be created.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.PdfImageCompression">
            <summary>
            Determines compression format for image added/saved to PDF file.
            </summary>
            <remarks>
            Quality of JPEG image can be set with the <see cref="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.JpegQuality" />
            property.<br />
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.PdfDocumentInfo">
            <summary>
            Information about PDF document (author, creation date, ...).
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.JpegQuality">
            <summary>
            Gets or sets the quality of JPEG images.
            </summary>
            <value>Default value is 90. Possible values from 10 to 100.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings.JpegColorSpace">
            <summary>
            Get or sets a JPEG color space.
            </summary>
            <value>Default value is <b>JpegColorSpace.Auto</b>.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings">
            <summary>
            Class that contains settings of PNG encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TiffCompression">
            <summary>
            Specifies available compression types for TIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.CCITGroup4">
            <summary>
            CCIT Group 4 Fax compression (for black-white images only)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.LZW">
            <summary>
            LZW compression (for any images)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.ZIP">
            <summary>
            ZIP compression (for any images)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.JPEG">
            <summary>
            JPEG compression (for color images only)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageEncoders.TiffCompression.Auto">
            <summary>
            The best compression algorithm is used automatically
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings">
            <summary>
            Class that contains settings of TIFF encoder.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.TiffMultiPage">
            <summary>
            Gets or sets a value indicating whether multipage TIFF file must be created.
            </summary>
            <value>
            <b>true</b> - multipage TIFF file must be created;
            <b>false</b> - singlepage TIFF file must be created.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            New file will be created if this property is set to true and TIFF file
            does not exist.<br />
            New image will be added to existing file if this property is set to
            true and the TIFF file exists.<br />
            New file will be created or old file will be replaced if this
            property is set to false.<br />
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.TiffCompression">
            <summary>
            Gets or sets the compression format for image added/saved to TIFF file.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.TiffCompression" />.Auto.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.JpegQuality">
            <summary>
            Gets or sets the quality of JPEG images.
            </summary>
            <value>Default value is 90. Possible values from 10 to 100.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings.JpegColorSpace">
            <summary>
            Get or sets a JPEG color space.
            </summary>
            <value>Default value is <b>JpegColorSpace.Auto</b>.</value>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory">
            <summary>
            Provides the factory for the image encoder settings classes.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainBmpEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainGifEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainJpegEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainPdfEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainPngEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings" /> class.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettingsFactory.GetTwainTiffEncoderSettings">
            <summary>
            Returns a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings" /> class.
            </summary>
            <returns>New instance of the <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings" /> class.</returns>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode">
            <summary>
            Specifies available codes of errors which can occur during an image uploading process to FTP server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.None">
            <summary>
            No errors.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.IllegalLogOnType">
            <summary>
            Not correct logon type.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.CannotOpenControlChannel">
            <summary>
            Error at opening the control channel.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.CannotGetInitialMessage">
            <summary>
            Error at getting the initial message from server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToSendLogOnCommandToServer">
            <summary>
            Error at sending LOGON command to the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToGetRespnseOnLogOnCommandFromServer">
            <summary>
            Error at getting response onto LOGON command from server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToLoggingOnServer">
            <summary>
            Error at logging onto the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorInInputFileData">
            <summary>
            Error in image data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToSetBinaryTransferMode">
            <summary>
            Error at setting binary transfer mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToCreatePathOnServer">
            <summary>
            Error at creating path on server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToSetPassiveTransferMode">
            <summary>
            Error at setting passive transfer mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToSetActiveTransferMode">
            <summary>
            Error at setting active transfer mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToInitStoreCommand">
            <summary>
            Error at initializing the STORE command.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToGetResponseOntoStoreCommand">
            <summary>
            Error at getting response onto STORE command.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorToInitDataSocket">
            <summary>
            Error at initializing data socket.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.ErrorAtTransferringImageOntoServer">
            <summary>
            Error at transfering image to the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.TransferCanceledByUser">
            <summary>
            Transfer is canceled by user.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Completed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode,System.String,Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="errorCode">Current error code.</param>
            <param name="errorString">Current error string.</param>        
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs.ErrorCode">
            <summary>
            Gets the error code of current uploading process.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs.ErrorString">
            <summary>
            Gets the error string of current uploading process.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProgressChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="bytesTotal">Count of bytes that should be uploaded to HTTP server.</param>
            <param name="bytesUploaded">Count of bytes that already uploaded to HTTP server.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs.BytesUploaded">
            <summary>
            Gets the count of bytes that already uploaded to HTTP server.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs.BytesTotal">
            <summary>
            Gets the count of bytes that should be uploaded to HTTP server.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode,System.String,Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="errorCode">Current error code.</param>
            <param name="errorString">Current error string.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs.ErrorCode">
            <summary>
            Gets the current error code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs.ErrorString">
            <summary>
            Gets the current error string.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType">
            <summary>
            Specifies available types of proxy servers.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.NoFirewall">
            <summary>
            No firewall/proxy.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.SiteHostname">
            <summary>
            Site hostname
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.UserAfterLogOn">
            <summary>
            USER after logon
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.ProxyOpen">
            <summary>
            Proxy OPEN
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.UserWithNoLogOn">
            <summary>
            USER with no logon
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.UserFireIdRemoteHost">
            <summary>
            USER fireID@remotehost
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.UserRemoteIdRemoteHostFireId">
            <summary>
            USER remoteID@remoteHost fireID
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.LogOnType.UserRemoteIdFireIdRemoteHost">
            <summary>
            USER remoteID@fireID@remoteHost
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode">
            <summary>
            Specifies available statuses of an image uploading process to FTP server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.None">
            <summary>
            FTP transfer is not working.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.ConnectingToServer">
            <summary>
            Connecting to the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.OpeningControlChannel">
            <summary>
            Opening the control channel.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.LoggingOntoServer">
            <summary>
            Logging to the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.SettingBinaryMode">
            <summary>
            Setting binary mode of transfer.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.CreatingDirectories">
            <summary>
            Creating necessary directories.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.InitConnectionForTransfer">
            <summary>
            Initializing connection for transfer.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.SendingStoreCommand">
            <summary>
            Sending STORE command.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.GettingResponseToStoreCommand">
            <summary>
            Getting response onto STORE command.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.SendingData">
            <summary>
            Sending data onto the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.DataTransferred">
            <summary>
            Data was transferred onto the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.LoggingOut">
            <summary>
            Logging off from the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Ftp.StatusCode.TransferCompleted">
            <summary>
            Transfer completed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload">
            <summary>
            Provides an asynchronous uploading of files to FTP server.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>transfer multiple files asynchronously</li>
            <li>get answer from the server</li>
            <li>get information about status of an uploading process</li>
            <li>get information about a progress of an uploading process</li>
            <li>get information about error if an uploading process was not completed successfully</li>
            <li>abort an uploading process</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload" /> class.
            </summary>
            <remarks>
            Use this constructor only if your application does not have a window or you cannot access it,
            for example, in JavaScript.<br />
            <br />
            Image uploading process can be monitored with <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode" />,
            <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ErrorCode" />, <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesTotal" /> and <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesUploaded" /> properties.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.#ctor(System.Windows.Threading.DispatcherObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload" /> class.
            </summary>
            <param name="dispatcherObject">Context which should receive class events.</param>
            <remarks>
            Use this constructor if your application is a window application.<br />
            <br />
            Image uploading process can be monitored with <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusChanged" />,
            <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProgressChanged" /> and <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Completed" /> events and 
            <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode" />, <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ErrorCode" />, <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesTotal" />
            and <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesUploaded" /> properties.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.AddFile(System.String,System.IO.Stream)">
            <summary>
            Adds file information to the FTP request.
            </summary>
            <param name="fileName">File name.</param>
            <param name="stream">Stream with the data of the file field.</param>
            <returns><b>true</b> if information about file was added successfully, <b>false</b> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if file name or memory stream is null.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ClearFiles" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ClearFiles">
            <summary>
            Clears file information in FTP request.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.AddFile(System.String,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">
            <summary>
            Sends data to the FTP server.
            </summary>
            <returns><b>true</b> if upload process was started successfully, <b>false</b> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if host is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no files to transfer.</exception>
            <remarks>
            This method initializes asynchronous file uploading process and file will be uploaded to the server only when the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Completed" /> event will be generated or value of the <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode" /> property will be set to <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode" />.Completed.<br />
            <br />
            An uploading process can be aborted with the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Abort" /> method.
            </remarks>
            <example>This example shows how to upload acquired image as JPEG file to FTP server.
            <code lang="VB.NET">
            Dim _parentWindow As Window
            Dim _uploadStatus As TextBox
            Dim _progressBar As ProgressBar
            
            Dim _ftpUpload As FtpUpload
            
            Dim _sendingData As Boolean = False
            
            
            ' Upload acquired image to HTTP server.
            Private Sub UploadAcquiredImageAsJpegToFtp(ByVal acquiredImage As AcquiredImage)
                Try
                    ' create FTP uploader
                    _ftpUpload = New FtpUpload(_parentWindow)
            
                    ' subscribe to the events
                    AddHandler _ftpUpload.StatusChanged, AddressOf _ftpUpload_StatusChanged
                    AddHandler _ftpUpload.ProgressChanged, AddressOf _ftpUpload_ProgressChanged
                    AddHandler _ftpUpload.Completed, AddressOf _ftpUpload_Completed
            
                    ' set FTP upload parameters
                    _ftpUpload.Host = "ftp.test.com"
                    _ftpUpload.User = "user"
                    _ftpUpload.Password = "password"
                    _ftpUpload.PassiveMode = True
                    _ftpUpload.Timeout = 2000
                    _ftpUpload.Path = "/images/"
                    _ftpUpload.AddFile("scan.jpg", acquiredImage.GetAsStream(New TwainJpegEncoderSettings()))
            
                    ' post data to the server
                    _ftpUpload.PostData()
            
                Catch ex As Exception
                    _uploadStatus.Text += ex.ToString()
                Finally
                    ' set maximal value of the progress bar
                    _progressBar.Maximum = _ftpUpload.BytesTotal
                End Try
            End Sub
            
            ' Handler of the upload status changed event.
            Private Sub _ftpUpload_StatusChanged(ByVal sender As System.Object, _
                                                 ByVal e As Vintasoft.WpfTwain.ImageUploading.Ftp.StatusChangedEventArgs)
                ' show current upload status in the status string
                _uploadStatus.Text += e.StatusString + Environment.NewLine
            End Sub
            
            ' Handler of the upload progress event.
            Private Sub _ftpUpload_ProgressChanged(ByVal sender As Object, _
                                                    ByVal e As Vintasoft.WpfTwain.ImageUploading.Ftp.ProgressChangedEventArgs)
                ' show the size of uploading data (once per upload)
                If Not _sendingData Then
                    _uploadStatus.Text += "(" + e.BytesTotal + " bytes)" + Environment.NewLine
                    _sendingData = True
                End If
            
                ' show current upload progress in progress bar
                _progressBar.Value = e.BytesUploaded
            
                ' show current upload progress, in bytes, in the status string
                _uploadStatus.Text += e.BytesUploaded + " "
            End Sub
            
            ' Handler of the upload completed event.
            Private Sub _ftpUpload_Completed(ByVal sender As Object, _
                                             ByVal e As Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs)
                _uploadStatus.Text += Environment.NewLine
            
                If e.ErrorCode = Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.None Then
                    _uploadStatus.Text += "FTP: Image is uploaded successfully!"
                Else
                    _uploadStatus.Text += "FTP error: " + e.ErrorString
                End If
            
                _uploadStatus.Text += Environment.NewLine
            End Sub
            </code>
            <code lang="C#">
            private Window _parentWindow;
            private TextBox _uploadStatus;
            private ProgressBar _progressBar;
            
            private FtpUpload _ftpUpload = null;
            
            private bool _sendingData;
            
            
            // Upload acquired image to FTP server.
            private void UploadAcquiredImageAsJpegToFtp(AcquiredImage acquiredImage)
            {
                try
                {
                    // create FTP uploader
                    _ftpUpload = new FtpUpload(_parentWindow);
            
                    // subscribe to the events
                    _ftpUpload.StatusChanged += new EventHandler&lt;StatusChangedEventArgs&gt;(_ftpUpload_StatusChanged);
                    _ftpUpload.ProgressChanged += new EventHandler&lt;ProgressChangedEventArgs&gt;(_ftpUpload_ProgressChanged);
                    _ftpUpload.Completed += new EventHandler&lt;CompletedEventArgs&gt;(_ftpUpload_Completed);
            
                    // set FTP upload parameters
                    _ftpUpload.Host = "ftp.test.com";
                    _ftpUpload.User = "user";
                    _ftpUpload.Password = "password";
                    _ftpUpload.PassiveMode = true;
                    _ftpUpload.Timeout = 2000;
                    _ftpUpload.Path = "/images/";
                    _ftpUpload.AddFile("scan.jpg", acquiredImage.GetAsStream(new TwainJpegEncoderSettings()));
            
                    // post data to the server
                    _ftpUpload.PostData();
                }
                catch (Exception ex)
                {
                    _uploadStatus.Text += ex.ToString();
                }
                finally
                {
                    // set maximal value of the progress bar
                    _progressBar.Maximum = _ftpUpload.BytesTotal;
                }
            }
            
            // Handler of the upload status changed event.
            private void _ftpUpload_StatusChanged(object sender, StatusChangedEventArgs e)
            {
                // show current upload status in the status string
                _uploadStatus.Text += e.StatusString + Environment.NewLine;
            }
            
            // Handler of the upload progress event.
            private void _ftpUpload_ProgressChanged(object sender, ProgressChangedEventArgs e)
            {
                // show the size of uploading data (once per upload)
                if (!_sendingData)
                {
                    _uploadStatus.Text += "(" + e.BytesTotal + " bytes)" + Environment.NewLine;
                    _sendingData = true;
                }
            
                // show current upload progress in progress bar
                _progressBar.Value = e.BytesUploaded;
            
                // show current upload progress, in bytes, in the status string
                _uploadStatus.Text += e.BytesUploaded + " ";
            }
            
            // Handler of the upload completed event.
            private void _ftpUpload_Completed(object sender, Vintasoft.WpfTwain.ImageUploading.Ftp.CompletedEventArgs e)
            {
                _uploadStatus.Text += Environment.NewLine;
            
                if (e.ErrorCode == Vintasoft.WpfTwain.ImageUploading.Ftp.ErrorCode.None)
                    _uploadStatus.Text += "FTP: Image is uploaded successfully!";
                else
                    _uploadStatus.Text += "FTP error: " + e.ErrorString;
            
                _uploadStatus.Text += Environment.NewLine;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Abort">
            <summary>
            Aborts current uploading process.
            </summary>
            <remarks>
            An image uploading process will not be aborted immediately, it will be aborted (completed correctly) only when a <see cref="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Completed" /> event will be fired.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.LogOnType">
            <summary>
            Proxy server type.
            </summary>
            <value>Default value: <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.LogOnType" />.NoFirewall</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Host">
            <summary>
            FTP server name or IP address.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Port">
            <summary>
            FTP server port.
            </summary>
            <value>Default value: 21.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.User">
            <summary>
            FTP server user.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Password">
            <summary>
            FTP server password.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Account">
            <summary>
            Account on FTP server. It is used only when the proxy server is used.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Path">
            <summary>
            Path on a FTP server, for example "/imgs/".
            </summary>
            <remarks>Path should not contain a file name. File name should be set in the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.AddFile(System.String,System.IO.Stream)" /> method.</remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PassiveMode">
            <summary>
            Sets the passive/active method of transfer the file to the server.
            </summary>
            <value>Default value: <b>false</b>.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Timeout">
            <summary>
            Timeout in milliseconds assigned to the read-write operations with server.
            </summary>
            <value>Default value: 100.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProxyHost">
            <summary>
            Proxy server name or IP address.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProxyPort">
            <summary>
            Proxy server port.
            </summary>
            <value>Default value: 21.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProxyUser">
            <summary>
            Proxy server user.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProxyPassword">
            <summary>
            Proxy server password.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode">
            <summary>
            Returns a status code of an image uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusString">
            <summary>
            Returns a status string of an image uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ErrorCode">
            <summary>
            Returns an error code of an image uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ErrorString">
            <summary>
            Returns an error string of an image uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesTotal">
            <summary>
            Determines how many bytes will be uploaded onto FTP server.
            </summary>
            <remarks>
            Value of this property will be correct after execution of the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData" /> method.<br />
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.BytesUploaded">
            <summary>
            Determines how many bytes are uploaded onto FTP server.
            </summary>
            <remarks>
            Value of this property will be correct after execution of the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData" /> method.<br />
            <br />
            Value of this property will be changed only when the uploading process will be in state <see cref="P:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusCode" />.SendingData.<br />
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.PostData">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.StatusChanged">
            <summary>
            Occurs when the status is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.ProgressChanged">
            <summary>
            Occurs when the progress is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Ftp.FtpUpload.Completed">
            <summary>
            Occurs when the image uploading process is completed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Completed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Http.StatusCode,System.String,System.Net.HttpStatusCode,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="responseCode">Current response code.</param>
            <param name="responseString">Current response string.</param>
            <param name="responseContent">Current response content.</param>
            <param name="errorCode">Current error code.</param>
            <param name="errorString">Current error string.</param>        
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.ErrorCode">
            <summary>
            Gets the error code of current uploading process.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.ErrorString">
            <summary>
            Gets the error string of current uploading process.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.ResponseCode">
            <summary>
            Gets the response code from the server.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.ResponseString">
            <summary>
            Gets the response string from the server.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs.ResponseContent">
            <summary>
            Gets the response content from the HTTP server.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProgressChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Http.StatusCode,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="bytesTotal">Count of bytes that should be uploaded to HTTP server.</param>
            <param name="bytesUploaded">Count of bytes that already uploaded to HTTP server.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs.BytesUploaded">
            <summary>
            Gets the count of bytes that already uploaded to HTTP server.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs.BytesTotal">
            <summary>
            Gets the count of bytes that should be uploaded to HTTP server.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.#ctor(Vintasoft.WpfTwain.ImageUploading.Http.StatusCode,System.String,System.Int32,System.String,System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs" /> class.
            </summary>
            <param name="statusCode">Current status code.</param>
            <param name="statusString">Current status string.</param>
            <param name="errorCode">Current error code.</param>
            <param name="errorString">Current error string.</param>
            <param name="responseCode">Current response code.</param>
            <param name="responseString">Current response string.</param>
            <param name="responseContent">Current response content.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.StatusCode">
            <summary>
            Gets the current status code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.StatusString">
            <summary>
            Gets the current status string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.ErrorCode">
            <summary>
            Gets the current error code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.ErrorString">
            <summary>
            Gets the current error string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.ResponseCode">
            <summary>
            Gets the current response code.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.ResponseString">
            <summary>
            Gets the current response string.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs.ResponseContent">
            <summary>
            Gets the current response content.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode">
            <summary>
            Specifies available statuses of an image uploading process.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.None">
            <summary>
            HTTP transfer is not working.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.SendingRequest">
            <summary>
            Connecting to the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.WaitingResponse">
            <summary>
            Waiting response from the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.Sending">
            <summary>
            Receiving data from the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.Receiving">
            <summary>
            Receiving data from the server.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.Completed">
            <summary>
            Transfer completed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageUploading.Http.StatusCode.Aborting">
            <summary>
            Aborting connection with the server.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload">
            <summary>
            Provides an asynchronous uploading of files to HTTP or HTTPS server.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>transfer multiple files asynchronously</li>
            <li>get answer from the server</li>
            <li>use any authentication methods supported by .NET Framework</li>
            <li>get information about status of an uploading process</li>
            <li>get information about a progress of an uploading process</li>
            <li>get information about error if an uploading process was not completed successfully</li>
            <li>abort an uploading process</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload" /> class.
            </summary>
            <remarks>
            Use this constructor only if your application does not have a window form or you cannot access it,
            for example, in JavaScript.<br />
            <br />
            Image uploading process can be monitored with <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode" />, <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ErrorCode" />,
            <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesTotal" /> and <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesUploaded" /> properties.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.#ctor(System.Windows.Threading.DispatcherObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload" /> class.
            </summary>
            <param name="dispatcherObject">Context which should receive class events.</param>
            <remarks>
            Use this constructor if your application is a window forms application.<br />
            <br />
            Image uploading process can be monitored with <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusChanged" />, <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProgressChanged" />
            and <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Completed" /> events and <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode" />, <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ErrorCode" />,
            <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesTotal" /> and <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesUploaded" /> properties.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AddTextField(System.String,System.String)">
            <summary>
            Adds information about text field to the POST request.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldValue">Field value.</param>
            <returns>
            <b>true</b> if information about text field was added to the POST request successfully,
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.Exception">Thrown if field name or field value is null.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ClearTextFields" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ClearTextFields">
            <summary>
            Clears the text fields in HTTP request.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AddTextField(System.String,System.String)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AddFileField(System.String,System.String,System.IO.Stream)">
            <summary>
            Adds file field information to the POST request.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="fieldValue">Field value.</param>
            <param name="stream">Stream with the data of the file field.</param>
            <returns>
            <b>true</b> if information about file field was added to the POST request successfully;
            otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>fieldName</i>,
            <i>fieldValue</i> or <i>stream</i> is <b>null</b>.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ClearFileFields" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ClearFileFields">
            <summary>
            Clears the file fields in HTTP request.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AddFileField(System.String,System.String,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">
            <summary>
            Sends data to the HTTP/HTTPS server by the POST method.
            </summary>
            <returns><b>true</b> if upload process was started successfully, <b>false</b> otherwise.</returns>
            <exception cref="T:System.Exception">Thrown if URL is null.</exception>
            <remarks>
            This method initializes asynchronous file uploading process and file will be uploaded to the server only when the <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Completed" /> event will be generated or value of the <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode" /> property will be set to <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode" />.Completed.<br />
            <br />
            An uploading process can be aborted with the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Abort" /> method.
            </remarks>
            <example>This example shows how to upload acquired image as JPEG file to HTTP server.
            <code lang="VB.NET">
            Dim _parentWindow As Window
            Dim _uploadStatus As TextBox
            Dim _progressBar As ProgressBar
            
            Dim _httpUpload As HttpUpload
            
            Dim _sendingData As Boolean = False
            
            
            ' Upload acquired image to HTTP server.
            Private Sub UploadAcquiredImageAsJpegToHttp(ByVal acquiredImage As AcquiredImage)
                Try
                    ' create HTTP uploader
                    _httpUpload = New HttpUpload(_parentWindow)
            
                    ' subscribe to the events
                    AddHandler _httpUpload.StatusChanged, AddressOf _httpUpload_StatusChanged
                    AddHandler _httpUpload.ProgressChanged, AddressOf _httpUpload_ProgressChanged
                    AddHandler _httpUpload.Completed, AddressOf _httpUpload_Completed
            
                    ' set HTTP upload parameters
                    _httpUpload.Url = "http://www.vintasoft.com/scripts/vstwain-demo-upload.cgi"
                    _httpUpload.AddTextField("user", "guest")
                    _httpUpload.AddTextField("password", "guest")
                    _httpUpload.AddFileField("file", "demo.jpg", acquiredImage.GetAsStream(New TwainJpegEncoderSettings()))
            
                    ' post data to the server
                    _httpUpload.PostData()
                Catch ex As Exception
                    _uploadStatus.Text += ex.ToString()
                Finally
                    ' set maximal value of the progress bar
                    _progressBar.Maximum = _httpUpload.BytesTotal
                End Try
            End Sub
            
            ' Handler of the upload status changed event.
            Private Sub _httpUpload_StatusChanged(ByVal sender As Object, ByVal e As Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs)
                If _sendingData Then
                    _uploadStatus.Text = _uploadStatus.Text + Environment.NewLine
                    _sendingData = False
                End If
            
                ' show current upload status in the status string
                _uploadStatus.Text = _uploadStatus.Text + _httpUpload.StatusString + Environment.NewLine
            End Sub
            
            ' Handler of the upload progress event.
            Private Sub _httpUpload_ProgressChanged(ByVal sender As Object, ByVal e As Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs)
                ' show the size of uploading data (once per upload)
                If Not _sendingData Then
                    _uploadStatus.Text = _uploadStatus.Text + "(" + e.BytesTotal.ToString + " bytes)" + Environment.NewLine
                    _sendingData = True
                End If
            
                ' show current upload progress in progress bar
                _progressBar.Value = e.BytesUploaded
            
                ' show current upload progress, in bytes, in the status string
                _uploadStatus.Text = _uploadStatus.Text + e.BytesUploaded.ToString + " "
            End Sub
            
            ' Handler of the upload completed event.
            Private Sub _httpUpload_Completed(ByVal sender As Object, ByVal e As Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs)
                _uploadStatus.Text = _uploadStatus.Text + Environment.NewLine
            
                If e.ErrorCode = 0 Then  ' if no errors
                    If e.ResponseCode = Net.HttpStatusCode.OK Then  ' if server returned "OK" status
                        _uploadStatus.Text = _uploadStatus.Text + "HTTP: Image is uploaded successfully!"
                        _uploadStatus.Text = _uploadStatus.Text + Environment.NewLine + Environment.NewLine
                        _uploadStatus.Text = _uploadStatus.Text + "Response content: " + e.ResponseContent.ToString
            
                    Else  ' if server returned NOT "OK" status
                        _uploadStatus.Text = _uploadStatus.Text + "Response code: " + e.ResponseCode.ToString
                        _uploadStatus.Text = _uploadStatus.Text + Environment.NewLine + Environment.NewLine
                        _uploadStatus.Text = _uploadStatus.Text + "Response string: " + e.ResponseString
                    End If
            
            
                Else  ' if error occurs
                    _uploadStatus.Text = _uploadStatus.Text + "Error: " + e.ErrorString
                End If
            
                _uploadStatus.Text = _uploadStatus.Text + Environment.NewLine
            
                RaiseEvent Completed(Me, EventArgs.Empty)
            End Sub
            </code>
            <code lang="C#">
            private Window _parentWindow;
            private TextBox _uploadStatus;
            private ProgressBar _progressBar;
            
            private HttpUpload _httpUpload = null;
            
            private bool _sendingData = false;
            
            
            // Upload acquired image to HTTP server.
            private void UploadAcquiredImageAsJpegToHttp(AcquiredImage acquiredImage)
            {
                try
                {
                    // create HTTP uploader
                    _httpUpload = new HttpUpload(_parentWindow);
                    
                    // subscribe to the events
                    _httpUpload.StatusChanged += new EventHandler&lt;StatusChangedEventArgs&gt;(_httpUpload_StatusChanged);
                    _httpUpload.ProgressChanged += new EventHandler&lt;ProgressChangedEventArgs&gt;(_httpUpload_ProgressChanged);
                    _httpUpload.Completed += new EventHandler&lt;CompletedEventArgs&gt;(_httpUpload_Completed);
            
                    // set HTTP upload parameters
                    _httpUpload.Url = "http://www.vintasoft.com/scripts/vstwain-demo-upload.cgi";
                    _httpUpload.AddTextField("user", "guest");
                    _httpUpload.AddTextField("password", "guest");
                    _httpUpload.AddFileField("file", "demo.jpg", acquiredImage.GetAsStream(new TwainJpegEncoderSettings()));
            
                    // post data to the server
                    _httpUpload.PostData();
                }
                catch (Exception ex)
                {
                    _uploadStatus.Text += ex.ToString();
                }
                finally
                {
                    // set maximal value of the progress bar
                    _progressBar.Maximum = _httpUpload.BytesTotal;
                }
            }
            
            // Handler of the upload status changed event.
            private void _httpUpload_StatusChanged(object sender, Vintasoft.WpfTwain.ImageUploading.Http.StatusChangedEventArgs e)
            {
                if (_sendingData)
                {
                    _uploadStatus.Text += Environment.NewLine;
                    _sendingData = false;
                }
            
                // show current upload status in the status string
                _uploadStatus.Text += _httpUpload.StatusString + Environment.NewLine;
            }
            
            // Handler of the upload progress event.
            private void _httpUpload_ProgressChanged(object sender, Vintasoft.WpfTwain.ImageUploading.Http.ProgressChangedEventArgs e)
            {
                // show the size of uploading data (once per upload)
                if (!_sendingData)
                {
                    _uploadStatus.Text += "(" + e.BytesTotal + " bytes)" + Environment.NewLine;
                    _sendingData = true;
                }
            
                // show current upload progress in progress bar
                _progressBar.Value = e.BytesUploaded;
            
                // show current upload progress, in bytes, in the status string
                _uploadStatus.Text += e.BytesUploaded + " ";
            }
            
            // Handler of the upload completed event.
            private void _httpUpload_Completed(object sender, Vintasoft.WpfTwain.ImageUploading.Http.CompletedEventArgs e)
            {
                _uploadStatus.Text += Environment.NewLine;
            
                // if no errors
                if (e.ErrorCode == 0)
                {
                    // if server returned "OK" status
                    if (e.ResponseCode == HttpStatusCode.OK)
                    {
                        _uploadStatus.Text += "HTTP: Image is uploaded successfully!" + Environment.NewLine;
                        _uploadStatus.Text += Environment.NewLine;
                        _uploadStatus.Text += "Response content: " + e.ResponseContent;
                    }
                    // if server returned NOT "OK" status
                    else
                    {
                        _uploadStatus.Text += "Response code: " + e.ResponseCode + Environment.NewLine;
                        _uploadStatus.Text += Environment.NewLine;
                        _uploadStatus.Text += "Response string: " + e.ResponseString;
                    }
                }
                // if error occurs
                else
                    _uploadStatus.Text += "Error: " + e.ErrorString;
            
                _uploadStatus.Text += Environment.NewLine;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Abort">
            <summary>
            Aborts current uploading process.
            </summary>
            <remarks>
            An image uploading process will not be aborted immediately, it will be aborted
            (completed correctly) only when a <see cref="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Completed" /> event will be fired.
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Url">
            <summary>
            Gets or sets the URL of web resource to which the POST request should be sent.
            </summary>
            <value>
            Possible values:
            <ul>
            <li>http://www.my-server.com/my-upload-script.aspx</li>
            <li>https://my-secure-server/secure-dir/secure-upload.php</li>
            <li>http://192.168.0.1:8081/scripts/my-upload.cgi</li>
            </ul>
            </value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Referer">
            <summary>
            Gets or sets the URL of web resource from which the POST request is sent.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProxyHost">
            <summary>
            Gets or sets the name or IP address of the proxy server host.
            </summary>
            <value>
            Possible values:
            <ul>
            <li>proxy.server.com</li>
            <li>my-local-proxy-server</li>
            <li>192.168.0.1</li>
            </ul>
            </value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProxyUser">
            <summary>
            Gets or sets the proxy server user.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProxyPassword">
            <summary>
            Gets or sets the proxy server password.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProxyPort">
            <summary>
            Gets or sets the proxy server port.
            </summary>
            <value>Default value is 80.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.CookieHeader">
            <summary>
            Gets or sets the cookie header for current HTTP uploading session.
            </summary>
            <remarks>
            Cookie instances must be delimited by commas, here is an example: CUSTOMER=WILE_E_COYOTE, path=/, expires="Wednesday, 09-Nov-99 23:12:40 GMT"
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Timeout">
            <summary>
            Get or sets the timeout, in milliseconds, assigned to the read-write operations with server.
            </summary>
            <value>Default value is 100.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.UseDefaultCredentials">
            <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value that controls whether default
            credentials are sent with requests.
            </summary>
            <value><b>true</b> if the default credentials are used; otherwise <b>false</b>.
            Default value is <b>false</b>.</value>
            <remarks>
            Set this property to <b>true</b> when requests made by this <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload" />
            object should, if requested by the server, be authenticated using the
            credentials of the currently logged on user. For client applications, this
            is the desired behavior in most scenarios. For middle tier applications,
            such as ASP.NET applications, instead of using this property, you would
            typically set the <see cref="T:System.Net.ICredentials" /> property to the
            credentials of the client on whose behalf the request is made.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Credentials">
            <summary>
            Provides authentication information for the request.
            </summary>
            <remarks>
            The <b>Credentials</b> property contains authentication information to
            identify the maker of the request. The <b>Credentials</b> property can be
            either an instance of <see cref="T:System.Net.NetworkCredential" />, in which
            case the user, password, and domain information contained in the
            <b>NetworkCredential</b> instance is used to authenticate the request, or
            it can be an instance of <see cref="T:System.Net.CredentialCache" />, in which
            case the uniform resource identifier (URI) of the request is used to
            determine the user, password, and domain information to use to authenticate
            the request.
            </remarks>
            <example> The following example initializes a <b>CredentialCache</b> with multiple
            security credentials and uses those credentials with a <see cref="T:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload" />:
            <code lang="VB.NET">
            Private Sub SetCredentials(ByVal httpUpload1 As HttpUpload, ByVal userName As String, _
                                       ByVal securelyStoredPassword As String, ByVal domain As String)
                Dim myCache As CredentialCache = New CredentialCache()
                myCache.Add(New Uri("http://www.my-web-server.com/"), "Basic", _
                                New NetworkCredential(userName, securelyStoredPassword))
                myCache.Add(New Uri("http://www.my-web-server.com/"), "Digest", _
                            New NetworkCredential(userName, securelyStoredPassword, domain))
                httpUpload1.Credentials = myCache
            End Sub
            </code>
            <code lang="C#">
            private void SetCredentials(HttpUpload httpUpload, string userName,
                string securelyStoredPassword, string domain)
            {
                CredentialCache myCache = new CredentialCache();
                myCache.Add(new Uri("http://www.my-web-server.com/"), "Basic",
                            new NetworkCredential(userName, securelyStoredPassword));
                myCache.Add(new Uri("http://www.my-web-server.com/"), "Digest",
                            new NetworkCredential(userName, securelyStoredPassword, domain));
                httpUpload.Credentials = myCache;
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AllowAutoRedirect">
            <summary>
            Gets or sets a value that indicates whether the request should follow redirection responses.
            </summary>
            <value><b>true</b> if the request should automatically follow redirection responses from
            the Internet resource; otherwise <b>false</b>. Default value is <b>true</b>.</value>
            <remarks>
            Set <b>AllowAutoRedirect</b> to <b>true</b> if you want redirect
            the request automatically to the new location of
            the resource. The maximum number of redirections can be set with
            the <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.MaximumAutomaticRedirections" /> property.<br />
            <br />
            If <b>AllowAutoRedirect</b> is set to false all responses with an HTTP
            status code from 300 to 399 will be returned to the application.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.MaximumAutomaticRedirections">
            <summary>
            Gets or sets the maximum number of redirects that the request will follow.
            </summary>
            <value>
            The maximum number of redirection responses that the request will follow.
            Default value is 5. Maximal value is 50.
            </value>
            <remarks>
            The <b>MaximumAutomaticRedirections</b> method property sets the maximum number of redirections for the request to follow if the <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.AllowAutoRedirect" /> property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode">
            <summary>
            Gets the status code of current uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusString">
            <summary>
            Gets the status string of current uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ErrorCode">
            <summary>
            Gets the error code of current uploading process.
            </summary>
            <value>Possible values: 0 - no errors, 1 - error has occured at image uploading.</value>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ErrorString">
            <summary>
            Gets the error string of current uploading process.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ResponseCode">
            <summary>
            Gets the response code from the server.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ResponseString">
            <summary>
            Gets the response string from the server.
            </summary>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ResponseContent">
            <summary>
            Gets the response content from the HTTP server.
            </summary>
            <remarks>
            Response content - it's an answer from the server in HTML format,
            for example "&lt;HTML&gt;&lt;BODY&gt;Image are uploaded successfully!&lt;/BODY&gt;&lt;/HTML&gt;".
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesTotal">
            <summary>
            Gets the count of bytes that should be uploaded to HTTP server.
            </summary>
            <remarks>
            Value of this property will be correct after execution of the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData" /> method.<br />
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.BytesUploaded">
            <summary>
            Gets the count of bytes that already uploaded to HTTP server.
            </summary>
            <remarks>
            Value of this property will be correct after execution of the <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData" /> method.<br />
            <br />
            Value of this property will be changed only when the uploading process will be
            in state <see cref="P:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusCode" />.Sending.<br />
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.PostData">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.StatusChanged">
            <summary>
            Occurs when the status is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.ProgressChanged">
            <summary>
            Occurs when the progress is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.ImageUploading.Http.HttpUpload.Completed">
            <summary>
            Occurs when the image uploading process is completed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainGlobalSettings">
            <summary>
            Contains global settings of SDK.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainGlobalSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainGlobalSettings" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainGlobalSettings.ProductVersion">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainGlobalSettings.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.AcquiredImageCollection">
            <summary>
            Class that represent the collection of images acquired from TWAIN device.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.AcquiredImageCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Add(Vintasoft.WpfTwain.AcquiredImage)">
            <summary>
            Adds image to this collection.
            </summary>
            <param name="image">Image to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Add(System.IO.Stream)">
            <summary>
            Adds an image(s) to the internal images buffer.
            </summary>
            <param name="stream">Stream with image data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if image has unsupported format.</exception>
            <remarks>
            This method allows to load only image formats supported by .NET Framework:
            BMP, GIF, multipage GIF, JPEG, PNG, TIFF, multipage TIFF.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Add(System.IO.Stream,System.Int32)">
            <summary>
            Adds an image to the internal images buffer.
            </summary>
            <param name="stream">Stream with image data.</param>
            <param name="pageIndex">Index of page to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i> is less 0 -OR-
            greater than page count.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if image has unsupported format.</exception>
            <remarks>
            This method allows to load only image formats supported by .NET Framework:
            BMP, GIF, multipage GIF, JPEG, PNG, TIFF, multipage TIFF.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Add(System.String)">
            <summary>
            Adds an image(s) to the internal images buffer.
            </summary>
            <param name="filename">Filename of image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if image has unsupported format.</exception>
            <remarks>
            This method allows to load only image formats supported by .NET Framework:
            BMP, GIF, multipage GIF, JPEG, PNG, TIFF, multipage TIFF.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an image to the internal images buffer.
            </summary>
            <param name="filename">Filename of image file.</param>
            <param name="pageIndex">Index of page to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i> is less 0 -OR-
            greater than page count.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if image has unsupported format.</exception>
            <remarks>
            This method allows to load only image formats supported by .NET Framework:
            BMP, GIF, multipage GIF, JPEG, PNG, TIFF, multipage TIFF.
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two images in the collection.
            </summary>
            <param name="firstIndex">Zero based index of the first image
            in this collection.</param>
            <param name="secondIndex">Zero based index of the second image
            in this collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>firstIndex</i> or
            <i>secondIndex</i> are out of range.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImageCollection.ClearAndDisposeItems">
            <summary>
            Removes and disposes all images from the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.AcquiredImageCollection.Item(System.Int32)">
            <summary>
            Gets an acquired image at the specified index.
            </summary>
            <param name="index">The zero-based index of acquired image to get.</param>
            <returns>Acquired image at the specified index. </returns>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImageCollection.Adding">
            <summary>
            Occurs when new image is adding to the collection.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImageCollection.Added">
            <summary>
            Occurs when new image is added to the collection.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImageCollection.Clearing">
            <summary>
            Occurs when the collection is clearing.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImageCollection.Cleared">
            <summary>
            Occurs when the collection is cleared.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceManager">
            <summary>
            Class that allows to manipulate TWAIN device manager.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>determine that TWAIN is installed in the system</li>
            <li>choose which TWAIN device manager to use (1.x or 2.x)</li>
            <li>specify path to TWAIN device manager</li>
            <li>get number of TWAIN devices installed in the system</li>
            <li>select the device</li>
            <li>get access to object that manipulates TWAIN device</li>
            </ul>
            </remarks>
            <example>This example shows how to select the device and acquire images from the device.
            <code lang="VB.NET">
            Public Sub StartScan(ByVal deviceManager As DeviceManager)
                ' specify TWAIN name of this application
                deviceManager.ApplicationProductName = "MyTwainApplication"
                Try
                    ' open the device manager
                    deviceManager.Open()
            
                    ' show the default device selection dialog
                    If Not deviceManager.ShowDefaultDeviceSelectionDialog() Then
                        ' exit if default device is not selected
                        Exit Sub
                    End If
            
                    ' get reference to the default device
                    Dim device As Device = deviceManager.DefaultDevice
                    ' acquire image(s) from the device
                    device.Acquire()
            
                Catch ex As TwainException
                    MsgBox(ex.Message)
                End Try
            End Sub
            </code>
            <code lang="C#">
            private void StartScan(DeviceManager deviceManager)
            {
                // specify TWAIN name of this application
                deviceManager.ApplicationProductName = "MyTwainApplication";
                try
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // show the default device selection dialog
                    if (!deviceManager.ShowDefaultDeviceSelectionDialog())
                        // exit if default device is not selected
                        return;
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
                    // acquire image(s) from the device
                    device.Acquire();
                }
                catch (TwainException ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceManager" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.#ctor(System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceManager" /> class.
            </summary>
            <param name="parentWindow">Parent window.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceManager" /> class.
            </summary>
            <param name="parentWindowHandle">Handle of parent window.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.Finalize">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.Open">
            <summary>
            Opens the TWAIN device manager.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException">Thrown if
            <ul>
            <li>TWAIN device manager is not found - TWAIN_32.DLL or TWAINDSM.DLL file is not found</li>
            <li>TWAIN device manager is not loaded - TWAIN_32.DLL cannot be loaded in 64-bit system,
            recompile the project in x86 mode</li>
            <li>TWAIN device manager is not initialized</li>
            <li>parent window is not found - run <see cref="M:Vintasoft.WpfTwain.DeviceManager.Open" /> method in the Loaded handler
            of the form</li>
            </ul>
            </exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
            <remarks>
            Only <see cref="P:Vintasoft.WpfTwain.DeviceManager.ApplicationProductName" /> property can be used before this
            method. All other properties and methods must be used only after
            execution of this method.
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceManager">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.DeviceManager.Close" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.Close">
            <summary>
            Closes the TWAIN device manager.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException">Thrown if TWAIN device manager is not closed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
            <seealso cref="M:Vintasoft.WpfTwain.DeviceManager.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManager.ShowDefaultDeviceSelectionDialog">
            <summary>
            Displays the default device selection dialog so the user can change the default device.
            </summary>
            <returns>
            <b>true</b> - if the user has pressed the "Ok" button,<br />
            <b>false</b> - if an error occured or if the user has pressed the "Cancel" button.
            </returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device manager is not open.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceManager">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.IsTwainAvailable">
            <summary>
            Determines that TWAIN is installed in the system.
            </summary>
            <value>
            <b>true</b> - TWAIN Data Source Manager is found,
            <b>false</b> - TWAIN Data Source Manager not found.
            </value>
            <remarks>
            Path to the TWAIN Data Source Manager can be set manually in the
            <see cref="P:Vintasoft.WpfTwain.DeviceManager.TwainDllPath" /> property.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
            <seealso cref="P:Vintasoft.WpfTwain.DeviceManager.IsTwain2Compatible" />
            <seealso cref="P:Vintasoft.WpfTwain.DeviceManager.TwainDllPath" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.IsTwain2Compatible">
            <summary>
            Determines that TWAIN 2.x Data Source Manager should be used.
            </summary>
            <value>
            <b>true</b> - TWAINDSM.DLL should be used as Data Source Manager,<br />
            <b>false</b> (default value) - TWAIN_32.DLL should be used as Data Source Manager.
            Default value is <b>false</b>.
            </value>
            <remarks>
            Path to the TWAIN Data Source Manager will be detected anew when
            value of this property is changed.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            object is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if
            device manager is not closed.</exception>
            <seealso cref="P:Vintasoft.WpfTwain.DeviceManager.TwainDllPath" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.TwainDllPath">
            <summary>
            Gets or sets path to the TWAIN Data Source Manager.
            </summary>
            <value>
            Path to TWAIN_32.DLL or TWAINDSM.DLL.
            </value>
            <exception cref="T:System.ArgumentNullException">Path cannot be null.</exception>
            <exception cref="T:System.ArgumentException">File does not exist or not a DLL file.</exception>
            <remarks>
            This property should be used when non standard path to the TWAIN
            Data Source Manager is used, for example on Citrix. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
            <seealso cref="P:Vintasoft.WpfTwain.DeviceManager.IsTwain2Compatible" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.ApplicationProductName">
            <summary>
            Gets or sets the name of application which uses SDK.
            </summary>
            <value>
            The string value which specifies the application name.
            String must contain at least 8 symbols, but not more than 31 symbol.<br />
            Default is "VintaSoftTwain".
            </value>
            <remarks>
            This property can be used when you want to scan images without UI, but you want
            to use progress indicator. For example, HP's scanners show the following message
            in the progress indicator: "Scanning to VintasoftTwain...". Using this property you
            can change message in the progress indicator, for example, to the following:
            "Scanning to YourApplicationName...".<br />
            <br />
            This property should be used before the <see cref="M:Vintasoft.WpfTwain.DeviceManager.Open" /> method.<br />
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.ParentWindow">
            <summary>
            Gets the parent window of TWAIN device manager.
            </summary>
            <remarks>
            Value of this property can be set in the constructor of this class.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.ParentWindowHandle">
            <summary>
            Gets the handle of parent window of TWAIN device manager.
            </summary>
            <remarks>
            Value of this property can be set in the constructor of this class.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.State">
            <summary>
            Gets the state of the TWAIN device manager.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.Devices">
            <summary>
            Gets a collection of TWAIN devices installed in the system.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device manager is not open.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.DefaultDevice">
            <summary>
            Gets the default TWAIN device.
            </summary>
            <value>
            <see cref="T:Vintasoft.WpfTwain.Device" /> object if device manager has default device;
            <b>null</b> if default device is not found.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device manager is not open.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.OpenedDevice">
            <summary>
            Gets the device opened in device manager.
            </summary>
            <value>
            <see cref="T:Vintasoft.WpfTwain.Device" /> opened in device manager;
            <b>null</b> if there is no device opened in device manager.
            </value>
            <remarks>
            Only one device can be opened in device manager at one moment.
            Create several instances of <see cref="T:Vintasoft.WpfTwain.DeviceManager" /> class if several devices must
            be opened at one moment.
            </remarks>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device manager is not open.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if object is disposed.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManager.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
            <value>
            <b>true</b> if the object is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceManager.StateChanged">
            <summary>
            Occurs when TWAIN device manager state is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanging">
            <summary>
            Occurs before the opened device is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanged">
            <summary>
            Occurs when the opened device is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.AcquiredImage">
            <summary>
            Class that represents an image acquired from TWAIN device.
            </summary>
            <example>This example shows how to acquire images from the device, process images and
            save to a multipage TIFF file only not blank images.
            <code lang="VB.NET">
            Private Sub AcquireAndProcessImages()
                Using deviceManager As New DeviceManager()
                    ' open the device manager
                    deviceManager.Open()
            
                    deviceManager.ShowDefaultDeviceSelectionDialog()
            
                    ' get reference to the default device
                    Dim device As Device = deviceManager.DefaultDevice
            
                    ' open the device
                    device.Open()
            
                    ' set acquisition parameters
                    device.ShowUI = False
                    device.DisableAfterAcquire = True
                    device.TransferMode = TransferMode.Memory
                    device.PageSize = PageSize.A4
            
                    Dim tiffFilename As String = Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif")
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Dim acquiredImage As AcquiredImage
                    Do
                        acquireModalState1 = device.AcquireModal()
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' get reference to the acquired image
                                acquiredImage = device.AcquiredImage
            
                                ' despeckle/deskew/detect border
                                ProcessAcquiredImage(acquiredImage)
                                ' add image to multipage TIFF file if image is not blank
                                If Not acquiredImage.IsBlank(0.01F) Then
                                    acquiredImage.Save(tiffFilename)
                                End If
            
                                ' dispose the acquired image
                                device.AcquiredImage.Dispose()
                                Exit Select
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' close the device
                    device.Close()
            
                    ' close the device manager
                    deviceManager.Close()
                End Using
            End Sub
            
            Private Sub ProcessAcquiredImage(ByVal acquiredImage As AcquiredImage)
                Console.WriteLine(String.Format("Image ({0})", acquiredImage.ImageInfo))
            
                Try
                    ' subscribe to processing events
                    AddHandler acquiredImage.Processing, AddressOf acquiredImage_Processing
                    AddHandler acquiredImage.Progress, AddressOf acquiredImage_Progress
                    AddHandler acquiredImage.Processed, AddressOf acquiredImage_Processed
            
                    ' despeckle/deskew/detect border
                    acquiredImage.Despeckle(8, 25, 30, 400)
                    acquiredImage.Deskew(BorderColor.AutoDetect, 5, 5)
                    acquiredImage.DetectBorder(5)
                Catch ex As ImagingException
                    Console.WriteLine("Error: " + ex.Message)
                Finally
                    ' unsubscribe from processing events
                    RemoveHandler acquiredImage.Processing, AddressOf acquiredImage_Processing
                    RemoveHandler acquiredImage.Progress, AddressOf acquiredImage_Progress
                    RemoveHandler acquiredImage.Processed, AddressOf acquiredImage_Processed
                End Try
            End Sub
            
            Private Sub acquiredImage_Processing(ByVal sender As Object, ByVal e As AcquiredImageProcessingEventArgs)
                Console.Write(e.Action.ToString() + " ")
            End Sub
            
            Private Sub acquiredImage_Progress(ByVal sender As Object, ByVal e As AcquiredImageProcessingProgressEventArgs)
                Console.Write(".")
            End Sub
            
            Private Sub acquiredImage_Processed(ByVal sender As Object, ByVal e As AcquiredImageProcessedEventArgs)
                Console.WriteLine(" finished")
            End Sub
            </code>
            <code lang="C#">
            public static void AcquireAndProcessImages()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    deviceManager.ShowDefaultDeviceSelectionDialog();
            
                    // get reference to current device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.Memory;
                    device.PageSize = PageSize.A4;
            
                    string tiffFilename = Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif");
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    AcquiredImage acquiredImage;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // get reference to the image acquired from device
                                acquiredImage = device.AcquiredImage;
            
                                // despeckle/deskew/detect border
                                ProcessAcquiredImage(acquiredImage);
                                // add image to multipage TIFF file if image is not blank
                                if (!acquiredImage.IsBlank(0.01f))
                                    acquiredImage.Save(tiffFilename);
            
                                // dispose acquired image
                                acquiredImage.Dispose();
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // close the device
                    device.Close();
                
                    // close the device manager
                    deviceManager.Close();
                }
            }
            
            private static void ProcessAcquiredImage(AcquiredImage acquiredImage)
            {
                Console.WriteLine(string.Format("Image ({0})", acquiredImage.ImageInfo));
            
                try
                {
                    // subscribe to processing events
                    acquiredImage.Processing += new EventHandler&lt;AcquiredImageProcessingEventArgs&gt;(acquiredImage_Processing);
                    acquiredImage.Progress += new EventHandler&lt;AcquiredImageProcessingProgressEventArgs&gt;(acquiredImage_Progress);
                    acquiredImage.Processed += new EventHandler&lt;AcquiredImageProcessedEventArgs&gt;(acquiredImage_Processed);
            
                    // despeckle/deskew/detect border
                    acquiredImage.Despeckle(8, 25, 30, 400);
                    acquiredImage.Deskew(BorderColor.AutoDetect, 5, 5);
                    acquiredImage.DetectBorder(5);
                }
                catch (ImagingException ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
                finally
                {
                    // unsubscribe from processing events
                    acquiredImage.Processing -= new EventHandler&lt;AcquiredImageProcessingEventArgs&gt;(acquiredImage_Processing);
                    acquiredImage.Progress -= new EventHandler&lt;AcquiredImageProcessingProgressEventArgs&gt;(acquiredImage_Progress);
                    acquiredImage.Processed -= new EventHandler&lt;AcquiredImageProcessedEventArgs&gt;(acquiredImage_Processed);
                }
            }
            
            static void acquiredImage_Processing(object sender, AcquiredImageProcessingEventArgs e)
            {
                Console.Write(e.Action.ToString() + " ");
            }
            
            static void acquiredImage_Progress(object sender, AcquiredImageProcessingProgressEventArgs e)
            {
                Console.Write(".");
            }
            
            static void acquiredImage_Processed(object sender, AcquiredImageProcessedEventArgs e)
            {
                Console.WriteLine(" finished");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Finalize">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBitmapSource">
            <summary>
            Returns this image as <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object.
            </summary>
            <returns>This image as <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</returns>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image processing.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Returns this image as a <see cref="T:System.IO.MemoryStream" /> object.
            </summary>
            <param name="encoderSettings">Encoder settings.</param>
            <returns>This image as <see cref="T:System.IO.MemoryStream" />.</returns>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            Method:
            <ul>
            <li>Returns an image data received from scanner without modifications if image data
            can be saved to specified image file format, for example, scanner returned image data
            compressed with CCITT4 compression and you want get data as TIFF file (TIFF
            supports CCITT4 compression).</li>
            <li>Converts image data received from scanner if image data cannot be saved to
            specified image file format, for example, scanner returned image data compressed with
            CCITT4 compression and you want get data as BMP file (BMP does not support CCITT4
            compression).</li>
            </ul>
            </remarks>
            <example>This example shows how to store all acquired images as multipage PDF document
            in the memory. Further PDF document can be saved into database or transferred to the server.
            <code lang="VB.NET">
            Private Sub AcquireImagesAndSaveToStreamAsPdf()
                Using deviceManager As New DeviceManager()
                    ' open the device manager
                    deviceManager.Open()
            
                    deviceManager.ShowDefaultDeviceSelectionDialog()
            
                    ' get reference to the default device
                    Dim device As Device = deviceManager.DefaultDevice
            
                    ' open the device
                    device.Open()
            
                    ' set acquisition parameters
                    device.ShowUI = False
                    device.DisableAfterAcquire = True
                    device.TransferMode = TransferMode.Memory
                    device.PageSize = PageSize.A4
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Dim mem As MemoryStream = Nothing
                    Dim firstImage As Boolean = True
                    Do
                        acquireModalState1 = device.AcquireModal()
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' save all acquired images as PDF stored in the memory
                                If firstImage Then
                                    ' get the first image as PDF stored in the memory
                                    mem = device.AcquiredImage.GetAsStream(New TwainPdfEncoderSettings())
                                    firstImage = False
                                Else
                                    ' add image to PDF stored in the memory
                                    device.AcquiredImage.Save(mem, New TwainPdfEncoderSettings())
                                End If
            
                                ' dispose the acquired image
                                device.AcquiredImage.Dispose()
                                Exit Select
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' Upload stream data to the server or doing something else...
                    ' ...
            
                    ' close the device
                    device.Close()
                    ' close the device manager
                    deviceManager.Close()
            
                End Using
            End Sub
            </code>
            <code lang="C#">
            static void AcquireImagesAndSaveToStreamAsPdf()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    deviceManager.ShowDefaultDeviceSelectionDialog();
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.Memory;
                    device.PageSize = PageSize.A4;
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    MemoryStream mem = null;
                    bool firstImage = true;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // save all acquired images as PDF stored in the memory
                                if (firstImage)
                                {
                                    // get the first image as PDF stored in the memory
                                    mem = device.AcquiredImage.GetAsStream(new TwainPdfEncoderSettings());
                                    firstImage = false;
                                }
                                else
                                {
                                    // add image to PDF stored in the memory
                                    device.AcquiredImage.Save(mem, new TwainPdfEncoderSettings());
                                }
            
                                // dispose the acquired image
                                device.AcquiredImage.Dispose();
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // Upload stream data to the server or doing something else...
                    // ...
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.GetAsBase64String(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Gets an image as Base64 string.
            </summary>
            <param name="encoderSettings">Encoder settings.</param>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String)">
            <summary>
            Saves this image to a file.
            </summary>
            <param name="filename">Name of file where image must be saved.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if extension of filename is unsupported.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            Image can be:<br />
            - saved as image file (BMP, GIF, JPEG, PNG, TIFF)<br />
            - added to multipage TIFF file<br />
            - saved into new PDF or PDF/A document<br />
            - added to existing PDF or PDF/A document<br />
            <br />
            Available compressions for images saved into TIFF file: <br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Available compressions for images saved into PDF document:<br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Image can be added to PDF document compatible with version 1.4 or earlier of PDF standard.<br />
            <br />
            Image will be saved as BMP file if path has a 'bmp' extension.<br />
            Image will be saved as GIF file if path has a 'gif' extension.<br />
            Image will be saved as PNG file if path has a 'png' extension.<br />
            Image will be saved as new TIFF file or added to existing TIFF file if path has a 'tif' or 'tiff' extension.<br />
            Image will be saved into new PDF file or added to existing PDF file if path has a 'pdf' extension.<br />
            Image will be saved as JPEG file for all other extensions.<br />
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.SaveToFile(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Saves this image to a file.
            </summary>
            <param name="filename">Name of file where image must be saved.</param>
            <param name="encoderSettings">Image encoder settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if extension of filename is unsupported.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            Image can be:<br />
            - saved as image file (BMP, GIF, JPEG, PNG, TIFF)<br />
            - added to multipage TIFF file<br />
            - saved into new PDF or PDF/A document<br />
            - added to existing PDF or PDF/A document<br />
            <br />
            Available compressions for images saved into TIFF file: <br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Available compressions for images saved into PDF document:<br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Image can be added to a PDF document compatible with version 1.4 or
            earlier of PDF standard.<br />
            <br />
            <br />
            Image will be saved as BMP file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains 'bmp' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings" /></li>
            </ul>
            <br />
            Image will be saved as GIF file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains 'gif' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings" /></li>
            </ul>
            <br />
            Image will be saved as JPEG file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains not
            'bmp', 'gif', 'png', 'pdf', 'tif' and 'tiff' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings" /></li>
            </ul>
            <br />
            Image will be saved as PDF file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains 'pdf' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings" /></li>
            </ul>
            <br />
            Image will be saved as PNG file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains 'png' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings" /></li>
            </ul>
            <br />
            Image will be saved as TIFF file if
            <ul>
            <li><i>encoderSettings</i> is <b>null</b> and <i>filename</i> contains
            'tif' or 'tiff' extension</li>
            <li><i>encoderSettings</i> is not <b>null</b> and <i>encoderSettings</i> is an
            instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings" /></li>
            </ul>
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.SaveToFile(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.SaveToFile(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Saves this image to a file.
            </summary>
            <param name="filename">Name of file where image must be saved.</param>
            <param name="encoderSettings">Image encoder settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if extension of filename is unsupported.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            This method equals to the <see cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.String,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Saves this image to a specified stream in the specified format and
            with specified encoder settings.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where the image must be saved.</param>
            <param name="encoderSettings">Encoder settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> or
            <i>encoderSettings</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            Image can be:<br />
            - saved as image file (BMP, GIF, JPEG, PNG, TIFF)<br />
            - added to multipage TIFF file<br />
            - saved into new PDF or PDF/A document<br />
            - added to existing PDF or PDF/A document<br />
            <br />
            Available compressions for images saved into TIFF file: <br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Available compressions for images saved into PDF document:<br />
            - without compression<br />
            - CCITT Group 4 Fax compression<br />
            - LZW compression<br />
            - ZIP compression<br />
            - JPEG compression<br />
            <br />
            Image can be added to a PDF document compatible with version 1.4 or
            earlier of PDF standard.<br />
            <br />
            <br />
            Image will be saved as BMP file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an /// instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainBmpEncoderSettings" />.<br />
            <br />
            Image will be saved as GIF file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainGifEncoderSettings" />.<br />
            <br />
            Image will be saved as JPEG file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainJpegEncoderSettings" />.<br />
            <br />
            Image will be saved as PDF file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPdfEncoderSettings" />.<br />
            <br />
            Image will be saved as PNG file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainPngEncoderSettings" />.<br />
            <br />
            Image will be saved as TIFF file if <i>encoderSettings</i> is not <b>null</b> and
            <i>encoderSettings</i> is an instance of type <see cref="T:Vintasoft.WpfTwain.ImageEncoders.TwainTiffEncoderSettings" />.<br />
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.SaveToStream(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.SaveToStream(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">
            <summary>
            Saves this image to the specified stream in the specified format.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> where the image must be saved.</param>
            <param name="encoderSettings">Encoder settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> or
            <i>encoderSettings</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image saving.</exception>
            <remarks>
            This method equals to the <see cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Save(System.IO.Stream,Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)" />
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.AcquiredImage.GetAsStream(Vintasoft.WpfTwain.ImageEncoders.TwainImageEncoderSettings)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.IsBlank(System.Single,System.Single@)">
            <summary>
            Determines that this image is a blank image.
            </summary>
            <param name="maxNoiseLevel">Maximal possible value of noise in image in percents.
            Optimal value is 0.01 (%).</param>
            <param name="currentNoiseLevel">Current noise value in image. This value will be set
            after execution of the method.</param>
            <returns>
            <b>true</b> if image is a blank image;
            otherwise, <b>false</b>.
            </returns>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.IsBlank(System.Single)">
            <summary>
            Determines that this image is a blank image.
            </summary>
            <param name="maxNoiseLevel">Maximal possible value of noise in image in percents.
            Optimal value is 0.01 (%).</param>
            <returns>
            <b>true</b> if image is a blank image;
            otherwise, <b>false</b>.
            </returns>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Invert">
            <summary>
            Inverts the image.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image processing.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.ChangeBrightness(System.Int32)">
            <summary>
            Changes the brightness of the image.
            </summary>
            <param name="brightness">Brightness value. Possible values:
            <b>from -100 to 0</b> - decrease brightness,
            <b>0</b> - no effect,
            <b>from 0 to 100</b> - increase brightness.</param>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image processing.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.ChangeContrast(System.Int32)">
            <summary>
            Changes the contrast of the image.
            </summary>
            <param name="contrast">Contrast value. Possible values:
            <b>from -100 to 0</b> - decrease contrast,
            <b>0</b> - no effect,
            <b>from 0 to 100</b> - increase contrast.</param>
            <exception cref="T:Vintasoft.WpfTwain.ImagingException">Thrown if error occurs at the image processing.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Crop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops specified region of an image.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the crop rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the crop rectangle.</param>
            <param name="width">The width of the crop rectangle.</param>
            <param name="height">The height of the crop rectangle.</param>
            <returns>
            <b>true</b> if image is cropped;
            <b>false</b> if image is not cropped.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>cropRect</i> is not correct.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.ResizeCanvas(System.Int32,System.Int32,Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)">
            <summary>
            Changes size of image canvas.
            </summary>
            <param name="canvasWidth">Width of the image canvas.</param>
            <param name="canvasHeight">Height of the image canvas.</param>
            <param name="canvasColor">Color of the image canvas.</param>
            <param name="imageXPosition">X position of the original image within new image.</param>
            <param name="imageYPosition">Y position of the original image within new image.</param>
            <returns>
            <b>true</b> if the image canvas is changed;
            <b>false</b> if the image canvas is not changed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if image size is bigger than canvas size
            OR image is outside of canvas.</exception>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Rotate(System.Single,Vintasoft.WpfTwain.BorderColor)">
            <summary>
            Rotates this image to specified angle.
            </summary>
            <param name="angle">Rotation angle.</param>
            <param name="borderColor">Border color.</param>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes noise from image.
            </summary>
            <param name="level1">Maximal quantity of pixels in small noise. Possible values: 0 - 100.
            Default value is 8. What is "small noise" see below.</param>
            <param name="level2">Maximal quantity of pixels in medium noise. Possible values: 0 - 100.
            Default value is 25. What is "medium noise" see below.</param>
            <param name="radius">Radius of area around medium noise in which there are no "good objects".
            Possible values: 0 - 100. Default value is 30. What is "good objects" see below.</param>
            <param name="level3">Maximal quantity of pixels in "border" noise. Possible values: 0 - 3000.
            Default value is 400. What is "border noise" see below.</param>
            <remarks>
            This method removes noise from image. Current algorithm removes three types of noise:<br />
            <br />
            1. Small noise - a set of pixels (non background pixels) with quantity of pixels less than value
            of <i>level1</i> parameter. This set of pixels will be replaced to background pixels.<br />
            <br />
            2. Medium noise - a set of pixels (non background pixels) with quantity of pixels less than value
            of <i>level2</i> parameter. This set of pixels will be replaced to background pixels if around
            this set of  pixels in a region with radius of value of <i>radius</i> parameter there is no
            "good objects". "Good object" - not a noise.<br />
            <br />
            3. "Border" noise - a set of pixels (non background pixels) with quantity of pixels less
            than value of <i>level3</i> parameter. This set of pixels will be replaced to background
            pixels if at least one pixel from this set of pixels is located on an image border.<br />
            <br />
            Here is <b>a "good" sequence of operations for image processing</b>:<br />
            1. Despeckle an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)" /> method)<br />
            2. Deskew an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)" /> method)<br />
            3. Detect image border (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)" /> method)<br />
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)">
            <summary>
            Deskew an image, i.e. detects a correct position of image.
            </summary>
            <param name="borderColor">Free space around rotated image will be filled with this color.</param>
            <param name="scanIntervalX">Specifies scan interval for X axis. Recommended value is 5.</param>
            <param name="scanIntervalY">Specifies scan interval for X axis. Recommended value is 5.</param>
            <remarks>
            Here is <b>a "good" sequence of operations for image processing</b>:<br />
            1. Despeckle an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)" /> method)<br />
            2. Deskew an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)" /> method)<br />
            3. Detect image border (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)" /> method)<br />
            <br />
            Possible values for <em>scanIntervalX</em> and <em>scanIntervalY</em> parameters: 1 - every column
            (row) will be scanned, 2 - every second column (row) will be scanned, 3 - every third
            column (row) will be scanned, and so on. Big values of these parameters may speed
            up deskewing process, but may worsen results.
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)">
            <summary>
            Detects the border around the image.
            </summary>
            <param name="borderSize">Size of border around the image. Possible values: 0 - 100.
            Default value is 5.</param>
            <remarks>
            Here is <b>a "good" sequence of operations for image processing</b>:<br />
            1. Despeckle an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)" /> method)<br />
            2. Deskew an image (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)" /> method)<br />
            3. Detect image border (<see cref="M:Vintasoft.WpfTwain.AcquiredImage.DetectBorder(System.Int32)" /> method)<br />
            <br />
            Possible values for <em>scanIntervalX</em> and <em>scanIntervalY</em> parameters: 1 - every column
            (row) will be scanned, 2 - every second column (row) will be scanned, 3 - every third column
            (row) will be scanned, and so on. Big values of these parameters may speed up deskewing process,
            but may worsen results.
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Despeckle(System.Int32,System.Int32,System.Int32,System.Int32)" />
            <seealso cref="M:Vintasoft.WpfTwain.AcquiredImage.Deskew(Vintasoft.WpfTwain.BorderColor,System.Int32,System.Int32)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.AcquiredImage.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.AcquiredImage.ImageInfo">
            <summary>
            Gets information about this image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.AcquiredImage.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
            <value>
            <b>true</b> if the object is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImage.Processing">
            <summary>
            Occurs when image processing starts.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImage.Progress">
            <summary>
            Occurs when image processing is in progress.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImage.Processed">
            <summary>
            Occurs when image processing ends.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.AcquiredImage.ProcessingCanceled">
            <summary>
            Occurs when image processing is canceled.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.AcquiredImage">here</see>.</example>
        </member>
        <member name="T:Vintasoft.WpfTwain.Device">
            <summary>
            Class that allows to manipulate TWAIN device.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li><see cref="P:Vintasoft.WpfTwain.Device.Info">get information about the device</see></li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.Open">open</see> / <see cref="M:Vintasoft.WpfTwain.Device.Close">close</see> the device</li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.Enable">enable</see> / <see cref="M:Vintasoft.WpfTwain.Device.Disable">disable</see> the device</li>
            <li>control <see cref="P:Vintasoft.WpfTwain.Device.DocumentFeeder">the document feeder</see> of the device</li>
            <li>control <see cref="P:Vintasoft.WpfTwain.Device.ImageLayout">the image layout</see> of the device</li>
            <li>access standard capabilities of the device (<see cref="P:Vintasoft.WpfTwain.Device.PixelType" />, <see cref="P:Vintasoft.WpfTwain.Device.PageSize" />, etc)</li>
            <li>access all <see cref="P:Vintasoft.WpfTwain.Device.Capabilities">capabilities</see> of the device</li>
            <li>enable/disable UI of the device</li>
            <li>change <see cref="P:Vintasoft.WpfTwain.Device.TransferMode">the transfer mode</see> of the device</li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.Acquire">asynchronously acquire images</see> from device</li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.AcquireModal">synchronously acquire images</see> from device</li>
            <li>get information about current image transfer with events</li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.CancelTransfer">cancel</see> current image transfer</li>
            <li>access <see cref="P:Vintasoft.WpfTwain.Device.AcquiredImages">images</see> acquired from the device</li>
            <li><see cref="M:Vintasoft.WpfTwain.Device.LoadSettings(System.IO.Stream)">load</see> / <see cref="M:Vintasoft.WpfTwain.Device.SaveSettings(System.IO.Stream)">save</see> settings of the device</li>
            </ul>
            </remarks>
            <example>This example shows how to asynchronously acquire images from the device.
            <code lang="VB.NET">
            Imports System.IO
            Imports System.Windows
            Imports Vintasoft.WpfTwain
            
            Partial Public Class ScanAsynchronouslyDemoWindow
                Inherits Window
            
            #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' TWAIN device manager.
                ''' &lt;/summary&gt;
                Private _deviceManager As DeviceManager
            
                ''' &lt;summary&gt;
                ''' Current TWAIN device.
                ''' &lt;/summary&gt;
                Private _device As Device
            
            #End Region
            
            
            
            #Region "Constructors"
            
                Public Sub New()
                    InitializeComponent()
                End Sub
            
            #End Region
            
            
            
            #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Start image acquisition from scanner.
                ''' &lt;/summary&gt;
                Private Sub startImageAcquisitionButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
                    Try
                        ' create and open device manager
                        _deviceManager = New DeviceManager(Me)
                        _deviceManager.Open()
            
                        ' select the default device
                        _deviceManager.ShowDefaultDeviceSelectionDialog()
            
                        ' get reference to current device
                        _device = _deviceManager.DefaultDevice
            
                        ' subscribe to device events
                        AddHandler _device.ImageAcquiringProgress, AddressOf device_ImageAcquiringProgress
                        AddHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        AddHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        AddHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        AddHandler _device.ScanFailed, AddressOf device_ScanFailed
                        AddHandler _device.UserInterfaceClosed, AddressOf device_UserInterfaceClosed
            
                        ' set scanning settings
                        _device.ShowUI = True
                        _device.Open()
                        _device.PixelType = PixelType.BW
                        _device.Threshold = 128
                        _device.UnitOfMeasure = UnitOfMeasure.Inches
                        _device.Resolution = New Resolution(300.0F, 300.0F)
            
                        ' acquire images from device
                        _device.Acquire()
                    Catch ex As TwainException
                        MessageBox.Show(ex.Message)
                    End Try
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image acquisition is in progress.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquiringProgress(ByVal sender As Object, ByVal e As ImageAcquiringProgressEventArgs)
                    ' update progress bar
                    ProgressBar1.Value = e.Progress
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image is acquired.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquired(ByVal sender As Object, ByVal e As ImageAcquiredEventArgs)
                    ' dispose image stored in the picture box
                    If Image1.Source IsNot Nothing Then
                        Image1.Source = Nothing
                    End If
            
                    ' show acquired image in the picture box
                    Image1.Source = e.Image.GetAsBitmapSource()
            
                    ' save(add) acquired image to TIFF file
                    e.Image.Save(Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif"))
            
                    ' dispose the acquired image
                    e.Image.Dispose()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is completed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCompleted(ByVal sender As Object, ByVal e As EventArgs)
                    If Not _device.ShowUI Then
                        CloseDevice()
                    End If
            
                    MessageBox.Show("Scan is competed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is canceled.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCanceled(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("Scan is canceled.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is failed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanFailed(ByVal sender As Object, ByVal e As ScanFailedEventArgs)
                    CloseDevice()
            
                    MessageBox.Show(String.Format("Scan is failed: {0}", e.ErrorString))
                End Sub
            
                ''' &lt;summary&gt;
                ''' User interface of device is closed.
                ''' &lt;/summary&gt;
                Private Sub device_UserInterfaceClosed(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("User Interface is closed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Unsubscribe from device events and close the device.
                ''' &lt;/summary&gt;
                Private Sub CloseDevice()
                    If _device IsNot Nothing Then
                        ' unsubscribe from device events
                        RemoveHandler _device.ImageAcquiringProgress, AddressOf device_ImageAcquiringProgress
                        RemoveHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        RemoveHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        RemoveHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        RemoveHandler _device.ScanFailed, AddressOf device_ScanFailed
                        RemoveHandler _device.UserInterfaceClosed, AddressOf device_UserInterfaceClosed
            
                        ' if device is not closed
                        If _device.State &lt;&gt; DeviceState.Closed Then
                            ' close the device
                            _device.Close()
                        End If
                    End If
                End Sub
            
            #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows;
            using Vintasoft.WpfTwain;
            
            namespace Wpf.TwainExamples_CSharp
            {
                public partial class ScanAsynchronouslyDemoWindow : Window
                {
            
                    #region Fields
            
                    /// &lt;summary&gt;
                    /// TWAIN device manager.
                    /// &lt;/summary&gt;
                    DeviceManager _deviceManager;
            
                    /// &lt;summary&gt;
                    /// Current TWAIN device.
                    /// &lt;/summary&gt;
                    Device _device;
            
                    #endregion
            
            
            
                    #region Constructors
            
                    public ScanAsynchronouslyDemoWindow()
                    {
                        InitializeComponent();
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    /// &lt;summary&gt;
                    /// Start image acquisition from scanner.
                    /// &lt;/summary&gt;
                    private void startImageAcquisitionButton_Click(object sender, RoutedEventArgs e)
                    {
                        try
                        {
                            // create and open device manager
                            _deviceManager = new DeviceManager(this);
                            _deviceManager.Open();
            
                            // select the default device
                            _deviceManager.ShowDefaultDeviceSelectionDialog();
            
                            // get reference to current device
                            _device = _deviceManager.DefaultDevice;
            
                            // subscribe to device events
                            _device.ImageAcquiringProgress += new EventHandler&lt;ImageAcquiringProgressEventArgs&gt;(device_ImageAcquiringProgress);
                            _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted += new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled += new EventHandler(device_ScanCanceled);
                            _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
                            _device.UserInterfaceClosed += new EventHandler(device_UserInterfaceClosed);
            
                            // set scanning settings
                            _device.ShowUI = true;
                            _device.Open();
                            _device.PixelType = PixelType.BW;
                            _device.Threshold = 128;
                            _device.UnitOfMeasure = UnitOfMeasure.Inches;
                            _device.Resolution = new Resolution(300f, 300f);
            
                            // acquire images from device
                            _device.Acquire();
                        }
                        catch (TwainException ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Image acquisition is in progress.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquiringProgress(object sender, ImageAcquiringProgressEventArgs e)
                    {
                        // update progress bar
                        progressBar1.Value = e.Progress;
                    }
            
                    /// &lt;summary&gt;
                    /// Image is acquired.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquired(object sender, ImageAcquiredEventArgs e)
                    {
                        // dispose image stored in the picture box
                        if (image1.Source != null)
                        {
                            image1.Source = null;
                        }
            
                        // show acquired image in the picture box
                        image1.Source = e.Image.GetAsBitmapSource();
            
                        // save(add) acquired image to TIFF file
                        e.Image.Save(Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif"));
            
                        // dispose the acquired image
                        e.Image.Dispose();
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is completed.
                    /// &lt;/summary&gt;
                    private void device_ScanCompleted(object sender, EventArgs e)
                    {
                        if (!_device.ShowUI)
                            CloseDevice();
            
                        MessageBox.Show("Scan is competed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is canceled.
                    /// &lt;/summary&gt;
                    private void device_ScanCanceled(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("Scan is canceled.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is failed.
                    /// &lt;/summary&gt;
                    private void device_ScanFailed(object sender, ScanFailedEventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show(string.Format("Scan is failed: {0}", e.ErrorString));
                    }
            
                    /// &lt;summary&gt;
                    /// User interface of device is closed.
                    /// &lt;/summary&gt;
                    private void device_UserInterfaceClosed(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("User Interface is closed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Unsubscribe from device events and close the device.
                    /// &lt;/summary&gt;
                    private void CloseDevice()
                    {
                        if (_device != null)
                        {
                            // unsubscribe from device events
                            _device.ImageAcquiringProgress -= new EventHandler&lt;ImageAcquiringProgressEventArgs&gt;(device_ImageAcquiringProgress);
                            _device.ImageAcquired -= new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted -= new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled -= new EventHandler(device_ScanCanceled);
                            _device.ScanFailed -= new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
                            _device.UserInterfaceClosed -= new EventHandler(device_UserInterfaceClosed);
            
                            // if device is not closed
                            if (_device.State != DeviceState.Closed)
                                // close the device
                                _device.Close();
                        }
                    }
            
                    #endregion
            
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Finalize">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Open">
            <summary>
            Opens the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <remarks>
            Call this method only when device is closed (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Closed).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Close" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Disable" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Enable" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Close">
            <summary>
            Closes the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is transferring images.</exception>
            <remarks>
            Call this method only when device is opened
            (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened)
            or device is enabled
            (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Enabled).<br />
            <br />
            <b>Important</b>: Do not call this method when device is transferring images
            (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.TransferReady or
            <see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Transferring) - you
            need to cancel transfer with the <see cref="M:Vintasoft.WpfTwain.Device.CancelTransfer" /> method and only then
            call this method.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.CancelTransfer" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Disable" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Enable" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.ShowSetupDialog">
            <summary>
            Displays the device setup dialog if device supports setup dialog.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceException">Thrown if device does not support the setup dialog.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Enable">
            <summary>
            Enables the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is enabled already or
            transferring images.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceException">Thrown if device is not enabled.</exception>
            <remarks>
            Call this method only when device is closed
            (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Closed) or
            device is opened
            (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Disable">
            <summary>
            Disables the device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is closed or opened.</exception>
            <remarks>
            Call this method only when device is enabled (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Enabled).
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Acquire">
            <summary>
            Acquires image(s) from the device asynchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state <b>or</b>
            device is not set as current device in device manager.</exception>
            <example>This example shows how to asynchronously acquire images from the device.
            <code lang="VB.NET">
            Imports System.IO
            Imports System.Windows
            Imports Vintasoft.WpfTwain
            
            Partial Public Class ScanAsynchronouslyDemoWindow
                Inherits Window
            
            #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' TWAIN device manager.
                ''' &lt;/summary&gt;
                Private _deviceManager As DeviceManager
            
                ''' &lt;summary&gt;
                ''' Current TWAIN device.
                ''' &lt;/summary&gt;
                Private _device As Device
            
            #End Region
            
            
            
            #Region "Constructors"
            
                Public Sub New()
                    InitializeComponent()
                End Sub
            
            #End Region
            
            
            
            #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Start image acquisition from scanner.
                ''' &lt;/summary&gt;
                Private Sub startImageAcquisitionButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
                    Try
                        ' create and open device manager
                        _deviceManager = New DeviceManager(Me)
                        _deviceManager.Open()
            
                        ' select the default device
                        _deviceManager.ShowDefaultDeviceSelectionDialog()
            
                        ' get reference to current device
                        _device = _deviceManager.DefaultDevice
            
                        ' subscribe to device events
                        AddHandler _device.ImageAcquiringProgress, AddressOf device_ImageAcquiringProgress
                        AddHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        AddHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        AddHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        AddHandler _device.ScanFailed, AddressOf device_ScanFailed
                        AddHandler _device.UserInterfaceClosed, AddressOf device_UserInterfaceClosed
            
                        ' set scanning settings
                        _device.ShowUI = True
                        _device.Open()
                        _device.PixelType = PixelType.BW
                        _device.Threshold = 128
                        _device.UnitOfMeasure = UnitOfMeasure.Inches
                        _device.Resolution = New Resolution(300.0F, 300.0F)
            
                        ' acquire images from device
                        _device.Acquire()
                    Catch ex As TwainException
                        MessageBox.Show(ex.Message)
                    End Try
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image acquisition is in progress.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquiringProgress(ByVal sender As Object, ByVal e As ImageAcquiringProgressEventArgs)
                    ' update progress bar
                    ProgressBar1.Value = e.Progress
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image is acquired.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquired(ByVal sender As Object, ByVal e As ImageAcquiredEventArgs)
                    ' dispose image stored in the picture box
                    If Image1.Source IsNot Nothing Then
                        Image1.Source = Nothing
                    End If
            
                    ' show acquired image in the picture box
                    Image1.Source = e.Image.GetAsBitmapSource()
            
                    ' save(add) acquired image to TIFF file
                    e.Image.Save(Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif"))
            
                    ' dispose the acquired image
                    e.Image.Dispose()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is completed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCompleted(ByVal sender As Object, ByVal e As EventArgs)
                    If Not _device.ShowUI Then
                        CloseDevice()
                    End If
            
                    MessageBox.Show("Scan is competed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is canceled.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCanceled(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("Scan is canceled.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is failed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanFailed(ByVal sender As Object, ByVal e As ScanFailedEventArgs)
                    CloseDevice()
            
                    MessageBox.Show(String.Format("Scan is failed: {0}", e.ErrorString))
                End Sub
            
                ''' &lt;summary&gt;
                ''' User interface of device is closed.
                ''' &lt;/summary&gt;
                Private Sub device_UserInterfaceClosed(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("User Interface is closed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Unsubscribe from device events and close the device.
                ''' &lt;/summary&gt;
                Private Sub CloseDevice()
                    If _device IsNot Nothing Then
                        ' unsubscribe from device events
                        RemoveHandler _device.ImageAcquiringProgress, AddressOf device_ImageAcquiringProgress
                        RemoveHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        RemoveHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        RemoveHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        RemoveHandler _device.ScanFailed, AddressOf device_ScanFailed
                        RemoveHandler _device.UserInterfaceClosed, AddressOf device_UserInterfaceClosed
            
                        ' if device is not closed
                        If _device.State &lt;&gt; DeviceState.Closed Then
                            ' close the device
                            _device.Close()
                        End If
                    End If
                End Sub
            
            #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.IO;
            using System.Windows;
            using Vintasoft.WpfTwain;
            
            namespace Wpf.TwainExamples_CSharp
            {
                public partial class ScanAsynchronouslyDemoWindow : Window
                {
            
                    #region Fields
            
                    /// &lt;summary&gt;
                    /// TWAIN device manager.
                    /// &lt;/summary&gt;
                    DeviceManager _deviceManager;
            
                    /// &lt;summary&gt;
                    /// Current TWAIN device.
                    /// &lt;/summary&gt;
                    Device _device;
            
                    #endregion
            
            
            
                    #region Constructors
            
                    public ScanAsynchronouslyDemoWindow()
                    {
                        InitializeComponent();
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    /// &lt;summary&gt;
                    /// Start image acquisition from scanner.
                    /// &lt;/summary&gt;
                    private void startImageAcquisitionButton_Click(object sender, RoutedEventArgs e)
                    {
                        try
                        {
                            // create and open device manager
                            _deviceManager = new DeviceManager(this);
                            _deviceManager.Open();
            
                            // select the default device
                            _deviceManager.ShowDefaultDeviceSelectionDialog();
            
                            // get reference to current device
                            _device = _deviceManager.DefaultDevice;
            
                            // subscribe to device events
                            _device.ImageAcquiringProgress += new EventHandler&lt;ImageAcquiringProgressEventArgs&gt;(device_ImageAcquiringProgress);
                            _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted += new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled += new EventHandler(device_ScanCanceled);
                            _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
                            _device.UserInterfaceClosed += new EventHandler(device_UserInterfaceClosed);
            
                            // set scanning settings
                            _device.ShowUI = true;
                            _device.Open();
                            _device.PixelType = PixelType.BW;
                            _device.Threshold = 128;
                            _device.UnitOfMeasure = UnitOfMeasure.Inches;
                            _device.Resolution = new Resolution(300f, 300f);
            
                            // acquire images from device
                            _device.Acquire();
                        }
                        catch (TwainException ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Image acquisition is in progress.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquiringProgress(object sender, ImageAcquiringProgressEventArgs e)
                    {
                        // update progress bar
                        progressBar1.Value = e.Progress;
                    }
            
                    /// &lt;summary&gt;
                    /// Image is acquired.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquired(object sender, ImageAcquiredEventArgs e)
                    {
                        // dispose image stored in the picture box
                        if (image1.Source != null)
                        {
                            image1.Source = null;
                        }
            
                        // show acquired image in the picture box
                        image1.Source = e.Image.GetAsBitmapSource();
            
                        // save(add) acquired image to TIFF file
                        e.Image.Save(Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif"));
            
                        // dispose the acquired image
                        e.Image.Dispose();
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is completed.
                    /// &lt;/summary&gt;
                    private void device_ScanCompleted(object sender, EventArgs e)
                    {
                        if (!_device.ShowUI)
                            CloseDevice();
            
                        MessageBox.Show("Scan is competed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is canceled.
                    /// &lt;/summary&gt;
                    private void device_ScanCanceled(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("Scan is canceled.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is failed.
                    /// &lt;/summary&gt;
                    private void device_ScanFailed(object sender, ScanFailedEventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show(string.Format("Scan is failed: {0}", e.ErrorString));
                    }
            
                    /// &lt;summary&gt;
                    /// User interface of device is closed.
                    /// &lt;/summary&gt;
                    private void device_UserInterfaceClosed(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("User Interface is closed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Unsubscribe from device events and close the device.
                    /// &lt;/summary&gt;
                    private void CloseDevice()
                    {
                        if (_device != null)
                        {
                            // unsubscribe from device events
                            _device.ImageAcquiringProgress -= new EventHandler&lt;ImageAcquiringProgressEventArgs&gt;(device_ImageAcquiringProgress);
                            _device.ImageAcquired -= new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted -= new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled -= new EventHandler(device_ScanCanceled);
                            _device.ScanFailed -= new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
                            _device.UserInterfaceClosed -= new EventHandler(device_UserInterfaceClosed);
            
                            // if device is not closed
                            if (_device.State != DeviceState.Closed)
                                // close the device
                                _device.Close();
                        }
                    }
            
                    #endregion
            
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.AcquireModal" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.AcquiredImages" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.CancelTransfer" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Close" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.DisableAfterAcquire" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ShowUI" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ShowIndicators" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.AcquireModal">
            <summary>
            Acquires image(s) from the device synchronously.
            </summary>
            <returns>State of the modal acquisition process.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if device is disposed.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state <b>or</b>
            device is not set as current device in device manager.</exception>
            <remarks>
            <b>Important</b>: This method must be called in a loop while it does not return
            the <see cref="T:Vintasoft.WpfTwain.AcquireModalState" />.None value.
            </remarks>
            <example>This example shows how to synchronously acquire images from the device.
            <code lang="VB.NET">
            Shared Sub AcquireImageModal()
                Try
                    Using deviceManager As New DeviceManager()
                        ' open the device manager
                        deviceManager.Open()
            
                        ' get reference to the default device
                        Dim device As Device = deviceManager.DefaultDevice
            
                        ' open the device
                        device.Open()
            
                        ' set acquisition parameters
                        device.TransferMode = TransferMode.Memory
                        device.ShowUI = False
                        device.DisableAfterAcquire = True
                        device.PixelType = PixelType.BW
            
                        ' create directory for TIFF file
                        Dim directoryForImages As String = Path.GetDirectoryName(Directory.GetCurrentDirectory())
                        directoryForImages = Path.Combine(directoryForImages, "Images")
                        If Not Directory.Exists(directoryForImages) Then
                            Directory.CreateDirectory(directoryForImages)
                        End If
            
                        Dim multipageTiffFilename As String = Path.Combine(directoryForImages, "multipage.tif")
            
                        ' acquire image(s) from the device
                        Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                        Dim imageIndex As Integer = 0
                        Do
                            acquireModalState1 = device.AcquireModal()
                            Select Case acquireModalState1
                                Case AcquireModalState.ImageAcquired
                                    ' save image to file
                                    device.AcquiredImage.Save(multipageTiffFilename)
                                    ' output current state
                                    imageIndex = imageIndex + 1
                                    Console.WriteLine(String.Format("Image{0} is saved.", imageIndex))
                                    ' dispose the acquired image
                                    device.AcquiredImage.Dispose()
            
                                Case AcquireModalState.ScanCompleted
                                    ' output current state
                                    Console.WriteLine("Scan completed.")
            
                                Case AcquireModalState.ScanCanceled
                                    ' output current state
                                    Console.WriteLine("Scan canceled.")
            
                                Case AcquireModalState.ScanFailed
                                    ' output current state
                                    Console.WriteLine(String.Format("Scan failed: {0}", device.ErrorString))
                            End Select
                        Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                        ' close the device
                        device.Close()
            
                        ' close the device manager
                        deviceManager.Close()
                    End Using
                Catch ex As TwainException
                    Console.WriteLine("Error: " + ex.Message)
                End Try
            
                Console.ReadLine()
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImageModal()
            {
                try
                {
                    using (DeviceManager deviceManager = new DeviceManager())
                    {
                        // open the device manager
                        deviceManager.Open();
            
                        // get reference to the default device
                        Device device = deviceManager.DefaultDevice;
            
                        // open the device
                        device.Open();
            
                        // set acquisition parameters
                        device.TransferMode = TransferMode.Memory;
                        device.ShowUI = false;
                        device.DisableAfterAcquire = true;
                        device.PixelType = PixelType.BW;
            
                        // create directory for TIFF file
                        string directoryForImages = Path.GetDirectoryName(Directory.GetCurrentDirectory());
                        directoryForImages = Path.Combine(directoryForImages, "Images");
                        if (!Directory.Exists(directoryForImages))
                            Directory.CreateDirectory(directoryForImages);
            
                        string multipageTiffFilename = Path.Combine(directoryForImages, "multipage.tif");
            
                        // acquire image(s) from the device
                        AcquireModalState acquireModalState = AcquireModalState.None;
                        int imageIndex = 0;
                        do
                        {
                            acquireModalState = device.AcquireModal();
                            switch (acquireModalState)
                            {
                                case AcquireModalState.ImageAcquired:
                                    // save the acquired image to a file
                                    device.AcquiredImage.Save(multipageTiffFilename);
                                    // dispose the acquired image
                                    device.AcquiredImage.Dispose();
                                    // output current state
                                    Console.WriteLine(string.Format("Image{0} is saved.", imageIndex++));
                                    break;
            
                                case AcquireModalState.ScanCompleted:
                                    // output current state
                                    Console.WriteLine("Scan completed.");
                                    break;
            
                                case AcquireModalState.ScanCanceled:
                                    // output current state
                                    Console.WriteLine("Scan canceled.");
                                    break;
            
                                case AcquireModalState.ScanFailed:
                                    // output current state
                                    Console.WriteLine(string.Format("Scan failed: {0}", device.ErrorString));
                                    break;
                            }
                        }
                        while (acquireModalState != AcquireModalState.None);
            
                        // close the device
                        device.Close();
            
                        // close the device manager
                        deviceManager.Close();
                    }
                }
                catch (TwainException ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            
                Console.ReadLine();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Acquire" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.AcquiredImage" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.CancelTransfer" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Close" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ErrorString" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.DisableAfterAcquire" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ShowIndicators" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ShowUI" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.CancelTransfer">
            <summary>
            Sends the cancel current transfer command to the device (transfer will not be canceled
            right after execution of this method).
            </summary>
            <remarks>
            <b>Important</b>: Transfer will not be canceled right after execution of this method, transfer
            will be canceled when the <see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs or
            the <see cref="M:Vintasoft.WpfTwain.Device.AcquireModal" /> method returns <see cref="T:Vintasoft.WpfTwain.AcquireModalState" />.None.
            </remarks>
            <example>This example show how to cancel current asynchronous image transfer.
            <code lang="VB.NET">
            Imports System.Windows
            Imports Vintasoft.WpfTwain
            
            Partial Public Class CancelTransferDemoWindow
                Inherits Window
            
            #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' TWAIN device manager.
                ''' &lt;/summary&gt;
                Private _deviceManager As DeviceManager
            
                ''' &lt;summary&gt;
                ''' Current TWAIN device.
                ''' &lt;/summary&gt;
                Private _device As Device
            
            #End Region
            
            
            
            #Region "Constructors"
            
                Public Sub New()
                    InitializeComponent()
                End Sub
            
            #End Region
            
            
            
            #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Scan images asynchronously.
                ''' &lt;/summary&gt;
                Private Sub startImageAcquistionButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
                    Try
                        ' create and open device manager
                        _deviceManager = New DeviceManager(Me)
                        _deviceManager.Open()
            
                        ' get reference to the device
                        _device = _deviceManager.Devices.Find("KODAK Scanner: i5000")
            
                        ' subscribe to device events
                        AddHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        AddHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        AddHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        AddHandler _device.ScanFailed, AddressOf device_ScanFailed
            
                        ' set Memory transfer mode
                        _device.TransferMode = TransferMode.Memory
                        ' disable scanner's UI
                        _device.ShowUI = False
            
                        ' open the device
                        _device.Open()
                        ' specify that 2 images must be acquired from scanner
                        _device.XferCount = 2
            
                        ' start image acquisition from device
                        _device.Acquire()
                    Catch ex As TwainException
                        MessageBox.Show(ex.Message)
                    End Try
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image is acquired.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquired(ByVal sender As Object, ByVal e As ImageAcquiredEventArgs)
                    MessageBox.Show("Image is acquired.")
            
                    ' dispose the acquired image
                    e.Image.Dispose()
            
                    ' cancel the image acquistion
                    _device.CancelTransfer()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is completed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCompleted(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("Scan is completed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is canceled.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCanceled(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("Scan is canceled.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is failed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanFailed(ByVal sender As Object, ByVal e As ScanFailedEventArgs)
                    CloseDevice()
            
                    MessageBox.Show(String.Format("Scan is failed: {0}", e.ErrorString))
                End Sub
            
                ''' &lt;summary&gt;
                ''' Unsubscribe from device events and close the device.
                ''' &lt;/summary&gt;
                Private Sub CloseDevice()
                    If _device IsNot Nothing Then
                        ' unsubscribe from device events
                        RemoveHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        RemoveHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        RemoveHandler _device.ScanCanceled, AddressOf device_ScanCanceled
                        RemoveHandler _device.ScanFailed, AddressOf device_ScanFailed
            
                        ' if device is not closed
                        If _device.State &lt;&gt; DeviceState.Closed Then
                            ' close the device
                            _device.Close()
                        End If
                    End If
                End Sub
            #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows;
            using Vintasoft.WpfTwain;
            
            namespace Wpf.TwainExamples_CSharp
            {
                public partial class CancelTransferDemoWindow : Window
                {
            
                    #region Fields
            
                    /// &lt;summary&gt;
                    /// TWAIN device manager.
                    /// &lt;/summary&gt;
                    DeviceManager _deviceManager;
            
                    /// &lt;summary&gt;
                    /// Current TWAIN device.
                    /// &lt;/summary&gt;
                    Device _device;
            
                    #endregion
            
            
            
                    #region Constructors
            
                    public CancelTransferDemoWindow()
                    {
                        InitializeComponent();
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    /// &lt;summary&gt;
                    /// Scan images asynchronously.
                    /// &lt;/summary&gt;
                    private void startImageAcquistionButton_Click(object sender, RoutedEventArgs e)
                    {
                        try
                        {
                            // create and open device manager
                            _deviceManager = new DeviceManager(this);
                            _deviceManager.Open();
            
                            // get reference to the device
                            _device = _deviceManager.Devices.Find("KODAK Scanner: i5000");
            
                            // subscribe to device events
                            _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted += new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled += new EventHandler(device_ScanCanceled);
                            _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
            
                            // set Memory transfer mode
                            _device.TransferMode = TransferMode.Memory;
                            // disable scanner's UI
                            _device.ShowUI = false;
            
                            // open the device
                            _device.Open();
                            // specify that 2 images must be acquired from scanner
                            _device.XferCount = 2;
            
                            // start image acquisition from device
                            _device.Acquire();
                        }
                        catch (TwainException ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Image is acquired.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquired(object sender, ImageAcquiredEventArgs e)
                    {
                        MessageBox.Show("Image is acquired.");
            
                        // dispose the acquired image
                        e.Image.Dispose();
            
                        // cancel the image acquistion
                        _device.CancelTransfer();
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is completed.
                    /// &lt;/summary&gt;
                    private void device_ScanCompleted(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("Scan is completed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is canceled.
                    /// &lt;/summary&gt;
                    private void device_ScanCanceled(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("Scan is canceled.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is failed.
                    /// &lt;/summary&gt;
                    private void device_ScanFailed(object sender, ScanFailedEventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show(string.Format("Scan is failed: {0}", e.ErrorString));
                    }
            
                    /// &lt;summary&gt;
                    /// Unsubscribe from device events and close the device.
                    /// &lt;/summary&gt;
                    private void CloseDevice()
                    {
                        if (_device != null)
                        {
                            // unsubscribe from device events
                            _device.ImageAcquired -= new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted -= new EventHandler(device_ScanCompleted);
                            _device.ScanCanceled -= new EventHandler(device_ScanCanceled);
                            _device.ScanFailed -= new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
            
                            // if device is not closed
                            if (_device.State != DeviceState.Closed)
                                // close the device
                                _device.Close();
                        }
                    }
                    #endregion
            
                }
            }
            </code>
            </example>
            <seealso cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.StopFeeder">
            <summary>
            Stops the automatic document feeder is possible.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device not in
            the DeviceState.TransferReady state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainException">Thrown if feeder was not stopped.</exception>
            <remarks>
            Call this method only when the <see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event is fired.
            </remarks>
            <example>This example show how to pause the image acquisition from feeder (stop the feeder) and
            resume the image acquisition from feeder.
            <code lang="VB.NET">
            Imports System.Windows
            Imports Vintasoft.WpfTwain
            
            Partial Public Class StopFeederDemoWindow
                Inherits Window
            
            #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' TWAIN device manager.
                ''' &lt;/summary&gt;
                Private _deviceManager As DeviceManager
            
                ''' &lt;summary&gt;
                ''' Current TWAIN device.
                ''' &lt;/summary&gt;
                Private _device As Device
            
                ''' &lt;summary&gt;
                ''' Determines that feeder must be stopped when first image is acquired.
                ''' &lt;/summary&gt;
                Private _stopFeederAterFirstAcquiredImage As Boolean
            
            #End Region
            
            
            
            #Region "Constructors"
            
                Public Sub New()
                    InitializeComponent()
                End Sub
            
            #End Region
            
            
            
            #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Start the image acquisition from scanner.
                ''' &lt;/summary&gt;
                Private Sub startImageAcquisitionButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
                    Try
                        ' create and open device manager
                        _deviceManager = New DeviceManager(Me)
                        _deviceManager.Open()
            
                        ' get reference to the device
                        _device = _deviceManager.Devices.Find("KODAK Scanner: i5000")
            
                        ' subscribe to device events
                        AddHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        AddHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        AddHandler _device.ScanFailed, AddressOf device_ScanFailed
            
                        ' set Memory transfer mode
                        _device.TransferMode = TransferMode.Memory
                        ' disable scanner's UI
                        _device.ShowUI = False
            
                        ' open the device
                        _device.Open()
                        ' specify that 2 images must be acquired from scanner
                        _device.XferCount = 2
            
                        ' feeder must be stopped when first image is acquired 
                        _stopFeederAterFirstAcquiredImage = True
            
                        ' start image acquisition from device
                        _device.Acquire()
                    Catch ex As TwainException
                        MessageBox.Show(ex.Message)
                    End Try
                End Sub
            
                ''' &lt;summary&gt;
                ''' Resume the image acquisition from scanner.
                ''' &lt;/summary&gt;
                Private Sub resumeImageAcquisitionButton_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
                    Try
                        ' resume asynchronous image acquisition
                        _device.Acquire()
                    Catch ex As TwainException
                        MessageBox.Show(ex.Message)
            
                        startImageAcquisitionButton.IsEnabled = True
                    End Try
                End Sub
            
                ''' &lt;summary&gt;
                ''' Image is acquired.
                ''' &lt;/summary&gt;
                Private Sub device_ImageAcquired(ByVal sender As Object, ByVal e As ImageAcquiredEventArgs)
                    MessageBox.Show("Image is acquired.")
            
                    ' dispose the acquired image
                    e.Image.Dispose()
            
                    ' if first image is acquired
                    If _stopFeederAterFirstAcquiredImage Then
                        _stopFeederAterFirstAcquiredImage = False
            
                        Try
                            ' stop the feeder
                            _device.StopFeeder()
            
                            ' feeder is stopped successfully
                            resumeImageAcquisitionButton.IsEnabled = True
            
                            resumeImageAcquisitionButton.IsEnabled = True
                            ' feeder is not stopped
                        Catch
                        End Try
                    Else
                        startImageAcquisitionButton.IsEnabled = True
                        resumeImageAcquisitionButton.IsEnabled = False
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is completed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanCompleted(ByVal sender As Object, ByVal e As EventArgs)
                    CloseDevice()
            
                    MessageBox.Show("Scan is completed.")
                End Sub
            
                ''' &lt;summary&gt;
                ''' Scan is failed.
                ''' &lt;/summary&gt;
                Private Sub device_ScanFailed(ByVal sender As Object, ByVal e As ScanFailedEventArgs)
                    CloseDevice()
            
                    MessageBox.Show(String.Format("Scan is failed: {0}", e.ErrorString))
                End Sub
            
                ''' &lt;summary&gt;
                ''' Unsubscribe from device events and close the device.
                ''' &lt;/summary&gt;
                Private Sub CloseDevice()
                    If _device IsNot Nothing Then
                        ' unsubscribe from device events
                        RemoveHandler _device.ImageAcquired, AddressOf device_ImageAcquired
                        RemoveHandler _device.ScanCompleted, AddressOf device_ScanCompleted
                        RemoveHandler _device.ScanFailed, AddressOf device_ScanFailed
            
                        ' if device is not closed
                        If _device.State &lt;&gt; DeviceState.Closed Then
                            ' close the device
                            _device.Close()
                        End If
                    End If
                End Sub
            
            #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows;
            using Vintasoft.WpfTwain;
            
            namespace Wpf.TwainExamples_CSharp
            {
                public partial class StopFeederDemoWindow : Window
                {
            
                    #region Fields
            
                    /// &lt;summary&gt;
                    /// TWAIN device manager.
                    /// &lt;/summary&gt;
                    DeviceManager _deviceManager;
            
                    /// &lt;summary&gt;
                    /// Current TWAIN device.
                    /// &lt;/summary&gt;
                    Device _device;
            
                    /// &lt;summary&gt;
                    /// Determines that feeder must be stopped when first image is acquired.
                    /// &lt;/summary&gt;
                    bool _stopFeederAterFirstAcquiredImage;
            
                    #endregion
            
            
            
                    #region Constructors
            
                    public StopFeederDemoWindow()
                    {
                        InitializeComponent();
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    /// &lt;summary&gt;
                    /// Start the image acquisition from scanner.
                    /// &lt;/summary&gt;
                    private void startImageAcquisitionButton_Click(object sender, RoutedEventArgs e)
                    {
                        try
                        {
                            // create and open device manager
                            _deviceManager = new DeviceManager(this);
                            _deviceManager.Open();
            
                            // get reference to the device
                            _device = _deviceManager.Devices.Find("KODAK Scanner: i5000");
            
                            // subscribe to device events
                            _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted += new EventHandler(device_ScanCompleted);
                            _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
            
                            // set Memory transfer mode
                            _device.TransferMode = TransferMode.Memory;
                            // disable scanner's UI
                            _device.ShowUI = false;
            
                            // open the device
                            _device.Open();
                            // specify that 2 images must be acquired from scanner
                            _device.XferCount = 2;
            
                            // feeder must be stopped when first image is acquired 
                            _stopFeederAterFirstAcquiredImage = true;
            
                            // start image acquisition from device
                            _device.Acquire();
                        }
                        catch (TwainException ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Resume the image acquisition from scanner.
                    /// &lt;/summary&gt;
                    private void resumeImageAcquisitionButton_Click(object sender, RoutedEventArgs e)
                    {
                        try
                        {
                            // resume asynchronous image acquisition
                            _device.Acquire();
                        }
                        catch (TwainException ex)
                        {
                            MessageBox.Show(ex.Message);
            
                            startImageAcquisitionButton.IsEnabled = true;
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Image is acquired.
                    /// &lt;/summary&gt;
                    private void device_ImageAcquired(object sender, ImageAcquiredEventArgs e)
                    {
                        MessageBox.Show("Image is acquired.");
            
                        // dispose the acquired image
                        e.Image.Dispose();
            
                        // if first image is acquired
                        if (_stopFeederAterFirstAcquiredImage)
                        {
                            _stopFeederAterFirstAcquiredImage = false;
            
                            try
                            {
                                // stop the feeder
                                _device.StopFeeder();
            
                                // feeder is stopped successfully
                                resumeImageAcquisitionButton.IsEnabled = true;
            
                                resumeImageAcquisitionButton.IsEnabled = true;
                            }
                            catch
                            {
                                // feeder is not stopped
                            }
                        }
                        else
                        {
                            startImageAcquisitionButton.IsEnabled = true;
                            resumeImageAcquisitionButton.IsEnabled = false;
                        }
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is completed.
                    /// &lt;/summary&gt;
                    private void device_ScanCompleted(object sender, EventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show("Scan is completed.");
                    }
            
                    /// &lt;summary&gt;
                    /// Scan is failed.
                    /// &lt;/summary&gt;
                    private void device_ScanFailed(object sender, ScanFailedEventArgs e)
                    {
                        CloseDevice();
            
                        MessageBox.Show(string.Format("Scan is failed: {0}", e.ErrorString));
                    }
            
                    /// &lt;summary&gt;
                    /// Unsubscribe from device events and close the device.
                    /// &lt;/summary&gt;
                    private void CloseDevice()
                    {
                        if (_device != null)
                        {
                            // unsubscribe from device events
                            _device.ImageAcquired -= new EventHandler&lt;ImageAcquiredEventArgs&gt;(device_ImageAcquired);
                            _device.ScanCompleted -= new EventHandler(device_ScanCompleted);
                            _device.ScanFailed -= new EventHandler&lt;ScanFailedEventArgs&gt;(device_ScanFailed);
            
                            // if device is not closed
                            if (_device.State != DeviceState.Closed)
                                // close the device
                                _device.Close();
                        }
                    }
            
                    #endregion
            
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedTransferModes">
            <summary>
            Returns an array of transfer modes supported by device.
            </summary>
            <returns>An array of transfer modes supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.TransferMode" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedMaxBatchBufferValues">
            <summary>
            Returns an array with supported numbers of images that the device can buffer
            when <see cref="P:Vintasoft.WpfTwain.Device.AutoScan" /> is enabled.
            </summary>
            <returns>An array with supported numbers of images that the device can buffer
            when <see cref="P:Vintasoft.WpfTwain.Device.AutoScan" /> is enabled.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.MaxBatchBuffers" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedUnitsOfMeasure">
            <summary>
            Returns an array of units of measure supported by device.
            </summary>
            <returns>An array of units of measure supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.UnitOfMeasure" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedHorizontalResolutions">
            <summary>
            Returns an array of horizontal resolutions supported by device.
            </summary>
            <returns>An array of horizontal resolutions supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Resolution" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedVerticalResolutions">
            <summary>
            Returns an array of vertical resolutions supported by device.
            </summary>
            <returns>An array of vertical resolutions supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Resolution" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.SetResolution(System.Single,System.Single)">
            <summary>
            Sets the resolution of images for current scan session.
            </summary>
            <param name="horizontal">Horizontal resolution, in pixels per inch.</param>
            <param name="vertical">Vertical resolution, in pixels per inch.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported resolutions can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedHorizontalResolutions" /> method.<br />
            <br />
            <b>Important</b>: Use this method if you cannot use the <see cref="P:Vintasoft.WpfTwain.Device.Resolution" /> property,
            for example, in JavaScript.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.Device.Resolution" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedPageSizes">
            <summary>
            Returns an array of page sizes supported by device.
            </summary>
            <returns>An array of page sizes supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PageSize" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedPageOrientations">
            <summary>
            Returns an array of page orientations supported by device.
            </summary>
            <returns>An array of page orientations supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PageOrientation" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedPixelTypes">
            <summary>
            Returns an array of pixel types supported by device.
            </summary>
            <returns>An array of pixel types supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PixelType" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedPixelFlavors">
            <summary>
            Returns an array of pixel flavors supported by device.
            </summary>
            <returns>An array of pixel flavors supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PixelFlavor" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepths">
            <summary>
            Returns an array of bit depths supported by device.
            </summary>
            <returns>An array of bit depths supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="T:Vintasoft.WpfTwain.Device" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.BitDepth" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepthReductionModes">
            <summary>
            Returns an array of bit depth reduction modes supported by device.
            </summary>
            <returns>An array of bit depth reduction modes supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.BitDepthReductionMode" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedThresholdValues">
            <summary>
            Returns an array of threshold values supported by device.
            </summary>
            <returns>An array of threshold values supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Threshold" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedHalftones">
            <summary>
            Returns an array of halftones supported by device.
            </summary>
            <returns>An array of halftones supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Halftones" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedImageFilters">
            <summary>
            Returns an array of image filters supported by device.
            </summary>
            <returns>An array of image filters supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ImageFilter" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedNoiseFilters">
            <summary>
            Returns an array of noise filters supported by device.
            </summary>
            <returns>An array of noise filters supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.ImageFilter" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedLightPaths">
            <summary>
            Returns an array of light paths supported by device.
            </summary>
            <returns>An array of light paths supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightPath" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedLightSources">
            <summary>
            Returns an array of light sources supported by device.
            </summary>
            <returns>An array of light sources supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightSource" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedBrightnessValues">
            <summary>
            Returns an array of brightness values supported by device.
            </summary>
            <returns>An array of brightness values supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Brightness" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedContrastValues">
            <summary>
            Returns an array of contrast values supported by device.
            </summary>
            <returns>An array of contrast values supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Contrast" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedImageFileFormats">
            <summary>
            Returns an array of image file formats supported by device in File transfer mode.
            </summary>
            <returns>An array of image file formats supported by device in File transfer mode.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileFormat" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedImageCompressions">
            <summary>
            Returns an array of image compressions supported by device in File transfer mode.
            </summary>
            <returns>An array of compressions supported by device in File transfer mode.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.Device.ImageCompression" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.GetSupportedJobControlValues">
            <summary>
            Returns an array of job control values supported by device.
            </summary>
            <returns>An array of job control values supported by device.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> == DeviceState.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.JobControl" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.ClearBuffers(Vintasoft.WpfTwain.ClearBufferMode)">
            <summary>
            Clears the device buffers according to the specified mode.
            </summary>
            <param name="value">Specifies how device buffers must be cleared.</param>
            <seealso cref="P:Vintasoft.WpfTwain.Device.AutoScan" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.BufferedImageCount" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.MaxBatchBuffers" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.SaveSettings(System.IO.Stream)">
            <summary>
            Saves the current device settings to the steram.
            </summary>
            <param name="stream">Stream to save the device settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have write access.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support profiles
            with settings.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>This example shows how to save the current device settings to a file.
            <code lang="VB.NET">
            Shared Sub SaveSettings(ByVal device As Device)
                device.Open()
                Dim fs As FileStream = New FileStream("scanner-setup.xml", FileMode.Append, FileAccess.Write)
                device.SaveSettings(fs)
                fs.Close()
            End Sub
            </code>
            <code lang="C#">
            private void SaveSettings(Device device)
            {
                device.Open();
                FileStream fs = new FileStream("scanner-setup.xml", FileMode.Append, FileAccess.Write);
                device.SaveSettings(fs);
                fs.Close();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.LoadSettings(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.LoadSettings(System.IO.Stream)">
            <summary>
            Loads device settings from the stream.
            </summary>
            <param name="stream">Stream with device settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have read access.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support profiles
            with settings.</exception>
            <remarks>
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>This example shows how to load previously saved device settings into the device.
            <code lang="VB.NET">
            Shared Sub LoadSettings(ByVal device As Device)
                device.Open()
                Dim fs As FileStream = New FileStream("scanner-setup.xml", FileMode.Open, FileAccess.Read)
                device.LoadSettings(fs)
                fs.Close()
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void LoadSettings(Device device)
            {
                device.Open();
                FileStream fs = new FileStream("scanner-setup.xml", FileMode.Open, FileAccess.Read);
                device.LoadSettings(fs);
                fs.Close();
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.SaveSettings(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.Device.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Info">
            <summary>
            Gets the information about device.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.State">
            <summary>
            Gets the state of device.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Closed.</value>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Language">
            <summary>
            Gets or sets the language of device.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.WpfTwain.LanguageType" />.EnglishUsa
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.TransferMode">
            <summary>
            Gets or sets the transfer mode of device.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.WpfTwain.Device.TransferMode" />.Memory
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.DisableAfterAcquire">
            <summary>
            Determines that device must be disabled after acquisition of images.
            </summary>
            <value>
            <b>true</b> - disable the device after image acquisition,
            <b>false</b> - do not disable the device after image acquisition.
            Default value is <b>false</b>.
            </value>
            <remarks>
            <see cref="M:Vintasoft.WpfTwain.Device.Disable" /> method is automatically called after image acquisition if value
            of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.AcquiredImage">
            <summary>
            Gets the last acquired image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.AcquiredImages">
            <summary>
            This property is obsolete. From version 9.0 device does not have associated image collection.
            Instance of <a href="AcquiredImageCollection" /> class must be created separately
            if acquired images must be stored as collection. More info can be found
            <a href="http://www.vintasoft.com/docs/vstwain-dotnet/Programming_Twain_ChangesHistory_v9_0.html">here</a>.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ErrorString">
            <summary>
            Gets the string that describes the error.
            </summary>
            <seealso cref="M:Vintasoft.WpfTwain.Device.AcquireModal" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ShowUI">
            <summary>
            Determines that the User Interface of device should be shown.
            </summary>
            <value>
            <b>true</b> - show the UI of the device,
            <b>false</b> - do not show the UI of the device.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ModalUI">
            <summary>
            Determines that the User Interface of device should be shown in modal state.
            </summary>
            <value>
            <b>true</b> - show modally the UI of the device,
            <b>false</b> - do not show modally the UI of the device.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ShowIndicators">
            <summary>
            Determines that progress indicator of scan process should be shown.
            </summary>
            <value>
            <b>true</b> - show the progress indicators of the device,
            <b>false</b> - do not show the progress indicators of the device.
            Default value is <b>true</b>.
            </value>
            <example>This example shows how to disable the progress indicator dialog if UI is not used.
            <code lang="VB.NET">
            Private Sub ScanColorImage(ByVal device As Device)
                device.ShowUI = False
                device.ShowIndicators = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
                device.ImageLayout.Set(1, 1, 5, 5)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImage(Device device)
            {
                device.ShowUI = false;
                device.ShowIndicators = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
                device.ImageLayout.Set(1f, 1f, 5f, 5f);
            
                device.Acquire();
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.HasFlatbed">
            <summary>
            Determines that device has flatbed.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.FlatbedPresent">
            <summary>
            Determines that device has flatbed.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.HasFeeder">
            <summary>
            Determines that device has automatic document feeder.
            </summary>
            <seealso cref="P:Vintasoft.WpfTwain.Device.DocumentFeeder" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.FeederPresent">
            <summary>
            Determines that device has automatic document feeder.
            </summary>
            <seealso cref="P:Vintasoft.WpfTwain.Device.DocumentFeeder" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.DocumentFeeder">
            <summary>
            Allows to manipulate the document feeder of device.
            </summary>
            <example>Please see example <see cref="P:Vintasoft.WpfTwain.Device.DocumentFeeder">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ImageLayout">
            <summary>
            Allows to manipulate the image layout of device.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Cameras">
            <summary>
            Gets a list of cameras supported by device.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ExtendedImageInfo">
            <summary>
            Allows to receive the extended information about the acquired image from the device.
            </summary>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfoCollection">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Online">
            <summary>
            Determines that the device is powered up and available.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.XferCount">
            <summary>
            Specifies how many images application wants to receive from the device.
            </summary>
            <value>
            Possible values:<br />
            -1 - application wants to receive all available images from the device,<br />
            1..215 - application wants to receive only N images<br />
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>This example shows how to acquire all images from the document feeder of device.
            <code lang="VB.NET">
            Private Sub ScanImageFromFeeder(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.XferCount = -1
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
            
                If device.DocumentFeeder.DuplexMode &lt;&gt; DuplexMode.None Then
                    device.DocumentFeeder.DuplexEnabled = True
                End If
            
                If device.HasFeeder Then
                    device.DocumentFeeder.Enabled = True
                    device.XferCount = -1
                    If device.DocumentFeeder.Loaded Then
                        device.DocumentFeeder.AutoFeed = True
                        device.Acquire()
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            private void ScanImageFromFeeder(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.XferCount = -1;
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                if (device.DocumentFeeder.DuplexMode != DuplexMode.None)
                    device.DocumentFeeder.DuplexEnabled = true;
            
                if (device.HasFeeder)
                {
                    device.DocumentFeeder.Enabled = true;
                    device.XferCount = -1;
                    if (device.DocumentFeeder.Loaded)
                    {
                        device.DocumentFeeder.AutoFeed = true;
                        device.Acquire();
                    }
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Acquire" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.AcquireModal" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.UnitOfMeasure">
            <summary>
            Gets or sets the unit of measure for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pages sizes can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedUnitsOfMeasure" /> method.<br />
            <br />
            This property has effect only if you do not use User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=False).<br />
            </remarks>
            <example>This example shows how to acquire part of color image with 200 dpi from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImage(ByVal device As Device)
                device.ShowUI = False
                device.ShowIndicators = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
                device.ImageLayout.Set(1, 1, 5, 5)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImage(Device device)
            {
                device.ShowUI = false;
                device.ShowIndicators = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
                device.ImageLayout.Set(1f, 1f, 5f, 5f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedUnitsOfMeasure" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Resolution">
            <summary>
            Gets or sets the resolution of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported resolutions can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedHorizontalResolutions" /> method.<br />
            </remarks>
            <example>This example shows how to acquire images from the device with different X and Y resolutions.
            <code lang="VB.NET">
            Private Sub ScanColorImage(ByVal device As Device)
                device.ShowUI = False
                device.ShowIndicators = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
                device.ImageLayout.Set(1, 1, 5, 5)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImage(Device device)
            {
                device.ShowUI = false;
                device.ShowIndicators = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
                device.ImageLayout.Set(1f, 1f, 5f, 5f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedHorizontalResolutions" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedVerticalResolutions" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.PageSize">
            <summary>
            Gets or sets the page size for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pages sizes can be received by the <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedPageSizes" /> method.<br />
            <br />
            This property has effect only if you do not use User Interface (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=False).<br />
            </remarks>
            <example>This example shows how to acquire A4 black-white images from the device.
            <code lang="VB.NET">
            Private Sub ScanPage(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.BW
                device.PageSize = PageSize.A4
                device.PageOrientation = PageOrientation.Landscape
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanPage(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.BW;
                device.PageSize = PageSize.A4;
                device.PageOrientation = PageOrientation.Landscape;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedPageSizes" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.PageOrientation">
            <summary>
            Gets or sets the orientation of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="T:Vintasoft.WpfTwain.DeviceState" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>This example shows how to acquire A4 black-white images from the device.
            <code lang="VB.NET">
            Private Sub ScanPage(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.BW
                device.PageSize = PageSize.A4
                device.PageOrientation = PageOrientation.Landscape
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanPage(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.BW;
                device.PageSize = PageSize.A4;
                device.PageOrientation = PageOrientation.Landscape;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PageSize" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.PageAutoSize">
            <summary>
            Gets or sets the mode of size detection for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            <b>This capability is supported from TWAIN 2.0.</b>
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PageSize" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedPageSizes" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.PixelType">
            <summary>
            Gets or sets the pixel type of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pixel types can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedPixelTypes" /> method.<br />
            </remarks>
            <example>This example shows how to acquire part of color image with 200 dpi from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImage(ByVal device As Device)
                device.ShowUI = False
                device.ShowIndicators = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
                device.ImageLayout.Set(1, 1, 5, 5)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImage(Device device)
            {
                device.ShowUI = false;
                device.ShowIndicators = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
                device.ImageLayout.Set(1f, 1f, 5f, 5f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.BitDepth" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedPixelTypes" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PixelFlavor" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.PixelFlavor">
            <summary>
            Gets or sets the value of pixel flavor for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This property has effect only on black-white images.<br />
            </remarks>
            <example>This example shows how to acquire black-white images from the device.
            <code lang="VB.NET">
            Private Sub ScanBlackWhiteImage(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.BW
                device.PixelFlavor = PixelFlavor.Chocolate
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanBlackWhiteImage(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.BW;
                device.PixelFlavor = PixelFlavor.Chocolate;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PixelType" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.BitDepth">
            <summary>
            Gets or sets the bit depth of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of bit depths can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepths" /> method.<br />
            </remarks>
            <example>This example shows how to acquire 4-bpp palette images from the device.
            <code lang="VB.NET">
            Private Sub ScanPaletteImage(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.Palette
                device.BitDepth = 4
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanPaletteImage(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.Palette;
                device.BitDepth = 4;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepths" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.PixelType" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.BitDepthReductionMode">
            <summary>
            Gets or sets the bit depth reduction mode of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of brightness can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepthReductionModes" /> method.
            </remarks>
            <example>This example shows how to acquire black-white images from the device.
            <code lang="VB.NET">
            Private Sub ScanBlackWhiteImageWithBitDepthReductionMode(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.BW
                device.PixelFlavor = PixelFlavor.Chocolate
                device.BitDepthReductionMode = BitDepthReductionMode.Threshold
                device.Threshold = 128
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanBlackWhiteImageWithBitDepthReductionMode(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.BW;
                device.PixelFlavor = PixelFlavor.Chocolate;
                device.BitDepthReductionMode = BitDepthReductionMode.Threshold;
                device.Threshold = 128;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedBitDepthReductionModes" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Threshold">
            <summary>
            Gets or sets the threshold of black-white images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of brightness can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedThresholdValues" /> method.
            </remarks>
            <example>This example shows how to acquire black-white images from the device.
            <code lang="VB.NET">
            Private Sub ScanBlackWhiteImageWithBitDepthReductionMode(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.BW
                device.PixelFlavor = PixelFlavor.Chocolate
                device.BitDepthReductionMode = BitDepthReductionMode.Threshold
                device.Threshold = 128
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanBlackWhiteImageWithBitDepthReductionMode(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.BW;
                device.PixelFlavor = PixelFlavor.Chocolate;
                device.BitDepthReductionMode = BitDepthReductionMode.Threshold;
                device.Threshold = 128;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedThresholdValues" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Halftones">
            <summary>
            Gets or sets the halftones for bit depth reduction of images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of halftones can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedHalftones" /> method.<br />
            <br />
            <b>Important</b>: Value of the <see cref="P:Vintasoft.WpfTwain.Device.BitDepthReductionMode" /> property must be set to
            the <see cref="P:Vintasoft.WpfTwain.Device.BitDepthReductionMode" />.Halftones value before usage
            of this property.
            </remarks>
            <example>This example shows how to apply halftones to images acquired from the device.
            <code lang="VB.NET">
            Private Sub ScanPaletteImageWithHalftones(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.Gray
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(200, 200)
                device.BitDepthReductionMode = BitDepthReductionMode.Halftones
                device.Halftones = "Dither Pattern 1"
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanPaletteImageWithHalftones(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.Gray;
                device.BitDepthReductionMode = BitDepthReductionMode.Halftones;
                device.Halftones = "Dither Pattern 1";
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedHalftones" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Brightness">
            <summary>
            Gets or sets the brightness of gray/palette/color images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of brightness can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedBrightnessValues" /> method.<br />
            <br />
            This property has effect only if you do not use User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=False).<br />
            <br />
            This property has effect only for gray/palette/color images. <see cref="P:Vintasoft.WpfTwain.Device.Threshold" /> property
            must be used for black-white images.
            </remarks>
            <example>This example shows how to adjust brightness/contrast and acquire
            color images from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithBrightness(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.Brightness = 128
                device.Contrast = 0
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithBrightness(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.Brightness = 128f;
                device.Contrast = 0;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.AutoBright" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedBrightnessValues" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Threshold" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.AutoBright">
            <summary>
            Determines that brightness should be automatically detected.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This property has effect only if you do not use User Interface (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=False).<br />
            <br />
            This property has effect only for gray/palette/color images. <see cref="P:Vintasoft.WpfTwain.Device.Threshold" /> property
            must be used for black-white images.
            </remarks>
            <example>This example shows how to adjust brightness/contrast and acquire
            color images from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithAutoBright(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.AutoBright = True
                device.Contrast = 0
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithAutoBright(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.AutoBright = true;
                device.Contrast = 0;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.Brightness" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedBrightnessValues" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Threshold" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Contrast">
            <summary>
            Gets or sets the contrast of gray/palette/color images for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of brightness can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedContrastValues" /> method.<br />
            <br />
            This property has effect only for gray/palette/color images. <see cref="P:Vintasoft.WpfTwain.Device.Threshold" /> property
            must be used for black-white images.
            </remarks>
            <example>This example shows how to adjust brightness/contrast and acquire
            color images from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithBrightness(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.Brightness = 128
                device.Contrast = 0
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithBrightness(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.Brightness = 128f;
                device.Contrast = 0;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedContrastValues" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.Threshold" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ImageFilter">
            <summary>
            Gets or sets the image filter for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pixel types can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedImageFilters" /> method.
            </remarks>
            <example>This example shows how to apply Green filter to images acquired from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithImageFilter(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.ImageFilter = ImageFilter.Green
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithImageFilter(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.ImageFilter = ImageFilter.Green;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedImageFilters" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.NoiseFilter">
            <summary>
            Gets or sets the noise filter for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pixel types can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedNoiseFilters" /> method.
            </remarks>
            <example>This example shows how to apply automatic noise filter to images acquired from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithNoiseFilter(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.NoiseFilter = NoiseFilter.Auto
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithNoiseFilter(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.NoiseFilter = NoiseFilter.Auto;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedNoiseFilters" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.LampState">
            <summary>
            Determines that the lamp of device is on.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightPath" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightSource" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.LightPath">
            <summary>
            Determines that the image was captured transmissively or reflectively.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pixel types can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedLightPaths" /> method.
            </remarks>
            <example>This example shows how to acquire positive films from the device.
            <code lang="VB.NET">
            Private Sub ScanColorImageWithLightPath(ByVal device As Device)
                device.ShowUI = False
                device.DisableAfterAcquire = True
            
                device.Open()
                device.PixelType = PixelType.RGB
                device.UnitOfMeasure = UnitOfMeasure.Inches
                device.Resolution = New Resolution(300, 300)
                device.LightPath = LightPath.Transmissive
            
                device.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void ScanColorImageWithLightPath(Device device)
            {
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
            
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(300f, 300f);
                device.LightPath = LightPath.Transmissive;
            
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedLightPaths" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LampState" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightSource" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.LightSource">
            <summary>
            Gets or sets the general color characteristic of the light source for current scan session.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported pixel types can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedLightSources" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedLightSources" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LampState" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.LightPath" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.FileName">
            <summary>
            Gets or sets the path to a file where next acquired image should be saved
            when File transfer mode is used.
            </summary>
            <value>Default value is "test.bmp". Path must contain not more than 255 symbols.</value>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>value</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>value</i> has wrong length.</exception>
            <example>This example shows how to acquire images directly to TIFF files.
            <code lang="VB.NET">
            Private Sub AcquireImagesUsingFileTransferModeAsJpegFiles()
                Using deviceManager1 As DeviceManager = New DeviceManager
                    ' open the device manager
                    deviceManager1.Open()
            
                    ' get reference to the default device
                    Dim device1 As Device = deviceManager1.DefaultDevice
            
                    ' open the device
                    device1.Open()
            
                    ' set acquisition parameters
                    Dim imageCount As Integer = 0
                    device1.ShowUI = False
                    device1.DisableAfterAcquire = True
                    device1.PixelType = PixelType.BW
                    device1.TransferMode = TransferMode.File
                    device1.FileFormat = TwainImageFileFormat.Jpeg
                    device1.FileJpegQuality = 70
            
                    ' set filename the first acquired image
                    device1.FileName = String.Format("c:\images\page{0}.tif", imageCount)
                    imageCount = imageCount + 1
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Do
                        acquireModalState1 = device1.AcquireModal
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' set filename for next acquired image
                                device1.FileName = String.Format("c:\images\page{0}.jpg", imageCount)
                                imageCount = imageCount + 1
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' close the device
                    device1.Close()
            
                    ' close the device manager
                    deviceManager1.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImagesUsingFileTransferModeAsJpegFiles()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    int imageCount = 0;
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.File;
                    device.FileFormat = TwainImageFileFormat.Jpeg;
                    device.FileJpegQuality = 70;
            
                    // set filename the first acquired image
                    device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // set filename for next acquired image
                                device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileFormat" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.TransferMode" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.FileFormat">
            <summary>
            Gets or sets the file format for images when File transfer mode is used.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported file formats can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedImageFileFormats" /> method.<br />
            </remarks>
            <example>This example shows how to save acquire images directly to a disk as JPEG
            files with 70% quality.
            <code lang="VB.NET">
            Private Sub AcquireImagesUsingFileTransferModeAsJpegFiles()
                Using deviceManager1 As DeviceManager = New DeviceManager
                    ' open the device manager
                    deviceManager1.Open()
            
                    ' get reference to the default device
                    Dim device1 As Device = deviceManager1.DefaultDevice
            
                    ' open the device
                    device1.Open()
            
                    ' set acquisition parameters
                    Dim imageCount As Integer = 0
                    device1.ShowUI = False
                    device1.DisableAfterAcquire = True
                    device1.PixelType = PixelType.BW
                    device1.TransferMode = TransferMode.File
                    device1.FileFormat = TwainImageFileFormat.Jpeg
                    device1.FileJpegQuality = 70
            
                    ' set filename the first acquired image
                    device1.FileName = String.Format("c:\images\page{0}.tif", imageCount)
                    imageCount = imageCount + 1
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Do
                        acquireModalState1 = device1.AcquireModal
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' set filename for next acquired image
                                device1.FileName = String.Format("c:\images\page{0}.jpg", imageCount)
                                imageCount = imageCount + 1
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' close the device
                    device1.Close()
            
                    ' close the device manager
                    deviceManager1.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImagesUsingFileTransferModeAsJpegFiles()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    int imageCount = 0;
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.File;
                    device.FileFormat = TwainImageFileFormat.Jpeg;
                    device.FileJpegQuality = 70;
            
                    // set filename the first acquired image
                    device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // set filename for next acquired image
                                device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileJpegQuality" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileName" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.TransferMode" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.FileJpegQuality">
            <summary>
            Gets or sets the JPEG quality for acquired images saved as JPEG files
            when File transfer mode is used.
            </summary>
            <value>
            Allowed values:
            <ul>
            <li>-4 - Unknown</li>
            <li>-3 - Low</li>
            <li>-2 - Medium</li>
            <li>-1 - High</li>
            <li>From 0 to 100</li>
            </ul>
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>This example shows how to save acquire images directly to a disk as JPEG
            files with 70% quality.
            <code lang="VB.NET">
            Private Sub AcquireImagesUsingFileTransferModeAsJpegFiles()
                Using deviceManager1 As DeviceManager = New DeviceManager
                    ' open the device manager
                    deviceManager1.Open()
            
                    ' get reference to the default device
                    Dim device1 As Device = deviceManager1.DefaultDevice
            
                    ' open the device
                    device1.Open()
            
                    ' set acquisition parameters
                    Dim imageCount As Integer = 0
                    device1.ShowUI = False
                    device1.DisableAfterAcquire = True
                    device1.PixelType = PixelType.BW
                    device1.TransferMode = TransferMode.File
                    device1.FileFormat = TwainImageFileFormat.Jpeg
                    device1.FileJpegQuality = 70
            
                    ' set filename the first acquired image
                    device1.FileName = String.Format("c:\images\page{0}.tif", imageCount)
                    imageCount = imageCount + 1
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Do
                        acquireModalState1 = device1.AcquireModal
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' set filename for next acquired image
                                device1.FileName = String.Format("c:\images\page{0}.jpg", imageCount)
                                imageCount = imageCount + 1
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' close the device
                    device1.Close()
            
                    ' close the device manager
                    deviceManager1.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImagesUsingFileTransferModeAsJpegFiles()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    int imageCount = 0;
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.File;
                    device.FileFormat = TwainImageFileFormat.Jpeg;
                    device.FileJpegQuality = 70;
            
                    // set filename the first acquired image
                    device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // set filename for next acquired image
                                device.FileName = string.Format(@"c:\images\page{0}.jpg", imageCount++);
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileFormat" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.FileName" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.TransferMode" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.ImageCompression">
            <summary>
            Gets or sets the image compression for images when Memory or File transfer mode is used.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported image compressions can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedImageCompressions" /> method.<br />
            </remarks>
            <example>This example shows how to save acquire images directly to a disk as TIFF
            files with CCITT Group 4 compression.
            <code lang="VB.NET">
            Private Sub AcquireImagesUsingFileTransferModeAsTiffFiles()
                Using deviceManager1 As DeviceManager = New DeviceManager
                    ' open the device manager
                    deviceManager1.Open()
            
                    ' get reference to the default device
                    Dim device1 As Device = deviceManager1.DefaultDevice
            
                    ' open the device
                    device1.Open()
            
                    ' set acquisition parameters
                    Dim imageCount As Integer = 0
                    device1.ShowUI = False
                    device1.DisableAfterAcquire = True
                    device1.TransferMode = TransferMode.File
                    device1.PixelType = PixelType.BW
                    device1.FileFormat = TwainImageFileFormat.Tiff
                    device1.ImageCompression = TwainImageCompression.Group4
            
                    ' set filename the first acquired image
                    device1.FileName = String.Format("c:\images\page{0}.tif", imageCount)
                    imageCount = imageCount + 1
            
                    ' acquire images from device
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Do
                        acquireModalState1 = device1.AcquireModal
                        Select Case acquireModalState1
                            Case AcquireModalState.ImageAcquired
                                ' set filename for next acquired image
                                device1.FileName = String.Format("c:\images\page{0}.tif", imageCount)
                                imageCount = imageCount + 1
                        End Select
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                    ' close the device
                    device1.Close()
            
                    ' close the device manager
                    deviceManager1.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImagesUsingFileTransferModeAsTiffFiles()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // set acquisition parameters
                    int imageCount = 0;
                    device.ShowUI = false;
                    device.DisableAfterAcquire = true;
                    device.TransferMode = TransferMode.File;
                    device.FileFormat = TwainImageFileFormat.Tiff;
                    device.ImageCompression = TwainImageCompression.Group4;
            
                    // set filename the first acquired image
                    device.FileName = string.Format(@"c:\images\page{0}.tif", imageCount++);
            
                    // acquire images from device
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    do
                    {
                        acquireModalState = device.AcquireModal();
                        switch (acquireModalState)
                        {
                            case AcquireModalState.ImageAcquired:
                                // set filename for next acquired image
                                device.FileName = string.Format(@"c:\images\page{0}.tif", imageCount++);
                                break;
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
                    // close the device
                    device.Close();
                
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedImageCompressions" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.TransferMode" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.JobControl">
            <summary>
            Allows multiple jobs in batch mode.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            Supported values of brightness can be received by the
            <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedJobControlValues" /> method.
            </remarks>
            <example>This example shows how to detect job separators during scanning.
            <code lang="VB.NET">
            Dim _deviceManager1 As DeviceManager
            Dim _device1 As Device
            Dim _jobCounter As Integer = -1
            
            Private Sub ScanImageWithJobControl()
                Try
                    ' create and open device manager
                    _deviceManager1 = New DeviceManager()
                    _deviceManager1.Open()
            
                    ' get reference to the default device
                    _device1 = _deviceManager1.DefaultDevice
                    ' create handlers of events
                    AddHandler _device1.ImageAcquired, AddressOf _device1_ImageAcquired
                    AddHandler _device1.ScanCompleted, AddressOf _device1_ScanCompleted
                    AddHandler _device1.ScanCanceled, AddressOf _device1_ScanCanceled
                    AddHandler _device1.ScanFailed, AddressOf _device1_ScanFailed
            
                    ' set scanning settings
                    _device1.ShowUI = False
                    _device1.DisableAfterAcquire = True
                    _device1.Open()
                    _device1.JobControl = JobControl.DetectAndIncludeJobSeparatorAndContinueScanning
                    _jobCounter = _jobCounter + 1
            
                    ' acquire images from device
                    _device1.Acquire()
                Catch ex As TwainException
                    MsgBox(ex.Message)
                End Try
            End Sub
            
            Private Sub _device1_ImageAcquired(ByVal sender As System.Object, _
                                          ByVal e As ImageAcquiredEventArgs)
                If _device.EndOfJob Then
                    _jobCounter = _jobCounter + 1
                Else
                    Try
                        ' save the acquired image
                        e.Image.Save("c:\job" + Str(_jobCounter) + ".tif")
            
                        ' dispose the acquired image
                        e.Image.Dispose()
            
                    Catch ex As ImagingException
                        MsgBox(ex.Message)
                    End Try
                End If
            End Sub
            
            Private Sub _device1_ScanCompleted(ByVal sender As System.Object, _
                                                 ByVal e As System.EventArgs)
                _device.Close()
                MsgBox("Scan completed.")
            End Sub
            
            Private Sub _device1_ScanCanceled(ByVal sender As System.Object, _
                                                 ByVal e As System.EventArgs)
                _device.Close()
                MsgBox("Scan canceled.")
            End Sub
            
            Private Sub _device1_ScanFailed(ByVal sender As System.Object, _
                                                 ByVal e As ScanFailedEventArgs)
                _device.Close()
                MsgBox("Scan failed: " + e.ErrorString)
            End Sub
            </code>
            <code lang="C#">
            DeviceManager _deviceManager;
            Device _device;
            int _jobCounter = -1;
            
            private void ScanImageWithJobControl()
            {
                try
                {
                    // create and open device manager
                    _deviceManager = new DeviceManager();
                    _deviceManager.Open();
            
                    // get reference to the default device
                    _device = _deviceManager.DefaultDevice;
                    // subscribe to device events
                    _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(_device1_ImageAcquired);
                    _device.ScanCompleted += new EventHandler(_device1_ScanCompleted);
                    _device.ScanCanceled += new EventHandler(_device1_ScanCanceled);
                    _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(_device1_ScanFailed);
            
                    // set scanning settings
                    _device.ShowUI = false;
                    _device.DisableAfterAcquire = true;
                    _device.Open();
                    _device.JobControl = JobControl.DetectAndIncludeJobSeparatorAndContinueScanning;
                    _jobCounter = _jobCounter + 1;
            
                    // acquire images from device
                    _device.Acquire();
                }
                catch (TwainException ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            
            private void _device1_ImageAcquired(object sender, ImageAcquiredEventArgs e)
            {
                if (_device.EndOfJob)
                    _jobCounter = _jobCounter + 1;
                else
                {
                    try
                    {
                        // save the acquired image
                        e.Image.Save(string.Format(@"c:\job{0}.tif", _jobCounter));
            
                        // dispose the acquired image
                        e.Image.Dispose();
                    }
                    catch (ImagingException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            
            private void _device1_ScanCompleted(object sender, EventArgs e)
            {
                _device.Close();
                Console.WriteLine("Scan completed.");
            }
            
            private void _device1_ScanCanceled(object sender, EventArgs e)
            {
                // close the device
                _device.Close();
                Console.WriteLine("Scan canceled.");
            }
            
            private void _device1_ScanFailed(object sender, ScanFailedEventArgs e)
            {
                // close the device
                _device.Close();
                Console.WriteLine("Scan failed: " + e.ErrorString);
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.EndOfJob" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedJobControlValues" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.EndOfJob">
            <summary>
            Detects the end of batch job.
            </summary>
            <value>
            <b>true</b> - end of batch job was reached;
            <b>false</b> otherwise.
            </value>
            <remarks>
            <b>Value of this property is valid only</b>:
            <ul>
            <li>in the handler of the <see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event</li>
            <li>when <see cref="M:Vintasoft.WpfTwain.Device.AcquireModal" /> method returns <see cref="T:Vintasoft.WpfTwain.AcquireModalState" />.ImageAcquired</li>
            </ul>
            </remarks>
            <example>This example shows how to detect job separators during scanning.
            <code lang="VB.NET">
            Dim _deviceManager1 As DeviceManager
            Dim _device1 As Device
            Dim _jobCounter As Integer = -1
            
            Private Sub ScanImageWithJobControl()
                Try
                    ' create and open device manager
                    _deviceManager1 = New DeviceManager()
                    _deviceManager1.Open()
            
                    ' get reference to the default device
                    _device1 = _deviceManager1.DefaultDevice
                    ' create handlers of events
                    AddHandler _device1.ImageAcquired, AddressOf _device1_ImageAcquired
                    AddHandler _device1.ScanCompleted, AddressOf _device1_ScanCompleted
                    AddHandler _device1.ScanCanceled, AddressOf _device1_ScanCanceled
                    AddHandler _device1.ScanFailed, AddressOf _device1_ScanFailed
            
                    ' set scanning settings
                    _device1.ShowUI = False
                    _device1.DisableAfterAcquire = True
                    _device1.Open()
                    _device1.JobControl = JobControl.DetectAndIncludeJobSeparatorAndContinueScanning
                    _jobCounter = _jobCounter + 1
            
                    ' acquire images from device
                    _device1.Acquire()
                Catch ex As TwainException
                    MsgBox(ex.Message)
                End Try
            End Sub
            
            Private Sub _device1_ImageAcquired(ByVal sender As System.Object, _
                                          ByVal e As ImageAcquiredEventArgs)
                If _device.EndOfJob Then
                    _jobCounter = _jobCounter + 1
                Else
                    Try
                        ' save the acquired image
                        e.Image.Save("c:\job" + Str(_jobCounter) + ".tif")
            
                        ' dispose the acquired image
                        e.Image.Dispose()
            
                    Catch ex As ImagingException
                        MsgBox(ex.Message)
                    End Try
                End If
            End Sub
            
            Private Sub _device1_ScanCompleted(ByVal sender As System.Object, _
                                                 ByVal e As System.EventArgs)
                _device.Close()
                MsgBox("Scan completed.")
            End Sub
            
            Private Sub _device1_ScanCanceled(ByVal sender As System.Object, _
                                                 ByVal e As System.EventArgs)
                _device.Close()
                MsgBox("Scan canceled.")
            End Sub
            
            Private Sub _device1_ScanFailed(ByVal sender As System.Object, _
                                                 ByVal e As ScanFailedEventArgs)
                _device.Close()
                MsgBox("Scan failed: " + e.ErrorString)
            End Sub
            </code>
            <code lang="C#">
            DeviceManager _deviceManager;
            Device _device;
            int _jobCounter = -1;
            
            private void ScanImageWithJobControl()
            {
                try
                {
                    // create and open device manager
                    _deviceManager = new DeviceManager();
                    _deviceManager.Open();
            
                    // get reference to the default device
                    _device = _deviceManager.DefaultDevice;
                    // subscribe to device events
                    _device.ImageAcquired += new EventHandler&lt;ImageAcquiredEventArgs&gt;(_device1_ImageAcquired);
                    _device.ScanCompleted += new EventHandler(_device1_ScanCompleted);
                    _device.ScanCanceled += new EventHandler(_device1_ScanCanceled);
                    _device.ScanFailed += new EventHandler&lt;ScanFailedEventArgs&gt;(_device1_ScanFailed);
            
                    // set scanning settings
                    _device.ShowUI = false;
                    _device.DisableAfterAcquire = true;
                    _device.Open();
                    _device.JobControl = JobControl.DetectAndIncludeJobSeparatorAndContinueScanning;
                    _jobCounter = _jobCounter + 1;
            
                    // acquire images from device
                    _device.Acquire();
                }
                catch (TwainException ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            
            private void _device1_ImageAcquired(object sender, ImageAcquiredEventArgs e)
            {
                if (_device.EndOfJob)
                    _jobCounter = _jobCounter + 1;
                else
                {
                    try
                    {
                        // save the acquired image
                        e.Image.Save(string.Format(@"c:\job{0}.tif", _jobCounter));
            
                        // dispose the acquired image
                        e.Image.Dispose();
                    }
                    catch (ImagingException ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            
            private void _device1_ScanCompleted(object sender, EventArgs e)
            {
                _device.Close();
                Console.WriteLine("Scan completed.");
            }
            
            private void _device1_ScanCanceled(object sender, EventArgs e)
            {
                // close the device
                _device.Close();
                Console.WriteLine("Scan canceled.");
            }
            
            private void _device1_ScanFailed(object sender, ScanFailedEventArgs e)
            {
                // close the device
                _device.Close();
                Console.WriteLine("Scan failed: " + e.ErrorString);
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.JobControl" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.Capabilities">
            <summary>
            Gets the collection of the device capabilities.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <example>This example shows how to get information about all pixel types supported by the device.
            <code lang="VB.NET">
            Shared Sub GetPixelTypesInfo()
                Dim deviceManager1 As DeviceManager = New DeviceManager
            
                ' open the device manager
                deviceManager1.Open()
            
                ' get reference to the default device
                Dim device1 As Device = deviceManager1.DefaultDevice
            
                ' open the device
                device1.Open()
            
                ' get reference to object that manipulates IPixelType capability
                Dim pixelTypeCap As DeviceCapability = device1.Capabilities.Find(DeviceCapabilityId.IPixelType)
                ' if IPixelType capability supported
                If Not pixelTypeCap Is Nothing Then
                    ' get information about current, default and supported values of capability
                    Dim capValue As TwainValueContainerBase = pixelTypeCap.GetValue()
            
                    Select Case capValue.ContainerType
                        Case TwainValueContainerType.Enum
                            Dim capValueAsEnum As TwainEnumValueContainer = CType(capValue, TwainEnumValueContainer)
                            Dim enumValues As Array = capValueAsEnum.EnumValues
            
                            ' output the capability values in human readable format
                            Console.WriteLine(String.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)))
                            Console.WriteLine(String.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)))
                            Console.Write("Supported pixel types:")
                            For i As Integer = 0 To enumValues.Length - 1
                                Console.Write(String.Format(" {0}", enumValues.GetValue(i)))
                            Next i
                    End Select
            
                    Console.WriteLine()
                End If
            
                ' close the device
                device1.Close()
            
                ' close the device manager
                deviceManager1.Close()
            End Sub
            </code>
            <code lang="C#">
            private static void GetPixelTypesInfo()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
                    
                    // get reference to the default device
                    Device device = deviceManager.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // get reference to object that manipulates IPixelType capability
                    DeviceCapability pixelTypeCap = device.Capabilities.Find(DeviceCapabilityId.IPixelType);
                    // if IPixelType capability supported
                    if (pixelTypeCap != null)
                    {
                        // get information about current, default and supported values of capability
                        TwainValueContainerBase capValue = pixelTypeCap.GetValue();
            
                        switch (capValue.ContainerType)
                        {
                            case TwainValueContainerType.Enum:
                                TwainEnumValueContainer capValueAsEnum = (TwainEnumValueContainer)capValue;
                                Array enumValues = capValueAsEnum.EnumValues;
            
                                // output the capability values in human readable format
                                Console.WriteLine(string.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)));
                                Console.WriteLine(string.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)));
                                Console.Write("Supported pixel types:");
                                for (int i = 0; i &lt; enumValues.Length; i++)
                                    Console.Write(string.Format(" {0}", enumValues.GetValue(i)));
                                break;
                        }
            
                        Console.WriteLine();
                    }
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.AutoScan">
            <summary>
            Gets or sets a value indicating whether the device should capture the number of images indicated
            by the value of <see cref="P:Vintasoft.WpfTwain.Device.XferCount" /> without waiting for the Application to request
            the image transfers.
            </summary>
            <value>
            <b>true</b> - device should capture the number of images indicated by the value
            of <see cref="P:Vintasoft.WpfTwain.Device.XferCount" /> without waiting for the Application to request the image transfers;
            <b>false</b> - device should capture one image, wait while the Application requests the image,
            transfer image to the Application and only after this capture new image.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.Device.MaxBatchBuffers" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.BufferedImageCount" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.ClearBuffers(Vintasoft.WpfTwain.ClearBufferMode)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.MaxBatchBuffers">
            <summary>
            Gets or sets the number of images that the device can buffer
            when <see cref="P:Vintasoft.WpfTwain.Device.AutoScan" /> is enabled.
            </summary>
            <value>
            Supports values from 1 to Int32.Max - 1.
            </value>
            <seealso cref="P:Vintasoft.WpfTwain.Device.AutoScan" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.GetSupportedMaxBatchBufferValues" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.BufferedImageCount" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.ClearBuffers(Vintasoft.WpfTwain.ClearBufferMode)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.BufferedImageCount">
            <summary>
            Gets the count of images in the device buffer.
            </summary>
            <seealso cref="P:Vintasoft.WpfTwain.Device.AutoScan" />
            <seealso cref="P:Vintasoft.WpfTwain.Device.MaxBatchBuffers" />
            <seealso cref="M:Vintasoft.WpfTwain.Device.ClearBuffers(Vintasoft.WpfTwain.ClearBufferMode)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Device.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
            <value>
            <b>true</b> if the object is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.StateChanged">
            <summary>
            Occurs when device state was changed.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ImageAcquiring">
            <summary>
            Occurs when image acquisition starts
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress">
            <summary>
            Occurs when image acquisition is in progress (only if Memory transfer mode is used).
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ImageAcquired">
            <summary>
            Occurs when image was acquired from device (only if Memory transfer mode is used).
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ScanCanceled">
            <summary>
            Occurs when scan process was canceled.
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ScanFailed">
            <summary>
            Occurs when scan process was failed.
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.ScanCompleted">
            <summary>
            Occurs when scan process was successfully completed.
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed">
            <summary>
            Occurs when the User Interface of device is closed.
            </summary>
            <remarks>
            Here is a sequence of events if scan is successfully completed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCompleted" /> event occurs when scan is completed</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.UserInterfaceClosed" /> event occurs when UI is closed (only if UI is used)</li>
            </ul>
            <br />
            Here is a sequence of events if scan is canceled:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanCanceled" /> event occurs when scan is canceled</li>
            </ul>
            <br />
            Here is a sequence of events if scan is failed:
            <ul>
            <li>for each acquired image
            <ul>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event occurs before image is acquiring</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> events occurs during image acquisition (only if Memory transfer mode is used)</li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event occurs after image is acquired</li>
            </ul>
            </li>
            <li><see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event occurs when scan is failed</li>
            </ul>
            </remarks>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.Device.Acquire">here</see>.</example>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCamera">
            <summary>
            Class that contains information about camera of device.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCamera.ToString">
            <summary>
            Returns string representation of this object.
            </summary>
            <returns />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCamera.Name">
            <summary>
            Get the name of camera.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCamera.Side">
            <summary>
            Gets the side type of camera.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCameraCollection">
            <summary>
            Class that represents a collection of cameras supported by device.
            </summary>
            <example>This example shows how to use Dual Stream feature of Kodak scanner.
            <code lang="VB.NET">
            Private Shared Sub AcquiredImagesWithDualStream()
                Using deviceManager As New DeviceManager()
                    ' open TWAIN device manager
                    deviceManager.Open()
            
                    ' get reference to Kodak scanner
                    Dim device As Device = deviceManager.Devices.Find("KODAK Scanner: i1410/i1420/i1440")
            
                    ' open device
                    device.Open()
            
                    ' disable UI
                    device.ShowUI = False
                    ' set inches as units of measure
                    device.UnitOfMeasure = UnitOfMeasure.Inches
                    ' enable duplex
                    device.DocumentFeeder.DuplexEnabled = True
            
                    ' select color camera
                    device.Cameras.SelectedCamera = "/Camera_Color_Both"
                    ' set resolution for color images
                    device.Resolution = New Resolution(300, 300)
                    ' enable color camera
                    device.Cameras.EnableSelectedCamera()
            
                    ' select black-white camera
                    device.Cameras.SelectedCamera = "/Camera_Bitonal_Both"
                    ' set resolution for black-white images
                    device.Resolution = New Resolution(200, 200)
                    ' enable black-white camera
                    device.Cameras.EnableSelectedCamera()
            
            
                    ' modally acquire images from the scanner
                    Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                    Dim acquiredImageInfo As ImageInfo
                    Do
                        ' acquire image from scanner
                        acquireModalState1 = device.AcquireModal()
            
                        ' write information about acquired image
                        If acquireModalState1 = AcquireModalState.ImageAcquired Then
                            ' get info about acquired image
                            acquiredImageInfo = device.AcquiredImage.ImageInfo
                            ' output info about acquired image
                            Console.WriteLine(acquiredImageInfo.PixelType.ToString() &amp; " " &amp; acquiredImageInfo.Resolution.ToString())
            
                            ' dispose acquired image
                            device.AcquiredImage.Dispose()
                        End If
                    Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
            
                    ' close the scanner
                    device.Close()
            
                    ' close TWAIN device manager
                    deviceManager.Close()
                End Using
            End Sub
            </code>
            <code lang="C#">
            private static void AcquiredImagesWithDualStream()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open TWAIN device manager
                    deviceManager.Open();
            
                    // get reference to Kodak scanner
                    Device device = deviceManager.Devices.Find("KODAK Scanner: i1410/i1420/i1440");
            
                    // open device
                    device.Open();
            
                    // disable UI
                    device.ShowUI = false;
                    // set inches as units of measure
                    device.UnitOfMeasure = UnitOfMeasure.Inches;
                    // enable duplex
                    device.DocumentFeeder.DuplexEnabled = true;
            
                    // select color camera
                    device.Cameras.SelectedCamera = "/Camera_Color_Both";
                    // set resolution for color images
                    device.Resolution = new Resolution(300, 300);
                    // enable color camera
                    device.Cameras.EnableSelectedCamera();
            
                    // select black-white camera
                    device.Cameras.SelectedCamera = "/Camera_Bitonal_Both";
                    // set resolution for black-white images
                    device.Resolution = new Resolution(200, 200);
                    // enable black-white camera
                    device.Cameras.EnableSelectedCamera();
            
            
                    // modally acquire images from the scanner
                    AcquireModalState acquireModalState = AcquireModalState.None;
                    ImageInfo acquiredImageInfo;
                    do
                    {
                        // acquire image from scanner
                        acquireModalState = device.AcquireModal();
            
                        // write information about acquired image
                        if (acquireModalState == AcquireModalState.ImageAcquired)
                        {
                            // get info about acquired image
                            acquiredImageInfo = device.AcquiredImage.ImageInfo;
                            // output info about acquired image
                            Console.WriteLine(acquiredImageInfo.PixelType.ToString() + " " + acquiredImageInfo.Resolution.ToString());
            
                            // dispose the acquired image
                            device.AcquiredImage.Dispose();
                        }
                    }
                    while (acquireModalState != AcquireModalState.None);
            
            
                    // close the scanner
                    device.Close();
            
                    // close TWAIN device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCameraCollection.EnableSelectedCamera">
            <summary>
            Enables the selected camera.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCameraCollection.DisableSelectedCamera">
            <summary>
            Disables the selected camera.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCameraCollection.Item(System.Int32)">
            <summary>
            Gets the device camera at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The device camera at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than zero or
            <i>index</i> is equal to or greater than <see cref="P:System.Collections.ReadOnlyCollectionBase.Count" />.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCameraCollection.IsReadOnly">
            <summary>
            Determines that this collection is readonly.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCameraCollection.SelectedCamera">
            <summary>
            Gets or sets the selected camera.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCameraSide">
            <summary>
            Specifies available sides of camera.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCameraSide.Both">
            <summary>
            Camera acquires top and bottom sides of page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCameraSide.Top">
            <summary>
            Camera acquires top side of page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCameraSide.Bottom">
            <summary>
            Camera acquires bottom side of page.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCapabilityCollection">
            <summary>
            Class that represents a collection of capabilities supported by device.
            </summary>
            <example>This example shows how to get information about all pixel types supported by the device.
            <code lang="VB.NET">
            Shared Sub GetPixelTypesInfo()
                Dim deviceManager1 As DeviceManager = New DeviceManager
            
                ' open the device manager
                deviceManager1.Open()
            
                ' get reference to the default device
                Dim device1 As Device = deviceManager1.DefaultDevice
            
                ' open the device
                device1.Open()
            
                ' get reference to object that manipulates IPixelType capability
                Dim pixelTypeCap As DeviceCapability = device1.Capabilities.Find(DeviceCapabilityId.IPixelType)
                ' if IPixelType capability supported
                If Not pixelTypeCap Is Nothing Then
                    ' get information about current, default and supported values of capability
                    Dim capValue As TwainValueContainerBase = pixelTypeCap.GetValue()
            
                    Select Case capValue.ContainerType
                        Case TwainValueContainerType.Enum
                            Dim capValueAsEnum As TwainEnumValueContainer = CType(capValue, TwainEnumValueContainer)
                            Dim enumValues As Array = capValueAsEnum.EnumValues
            
                            ' output the capability values in human readable format
                            Console.WriteLine(String.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)))
                            Console.WriteLine(String.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)))
                            Console.Write("Supported pixel types:")
                            For i As Integer = 0 To enumValues.Length - 1
                                Console.Write(String.Format(" {0}", enumValues.GetValue(i)))
                            Next i
                    End Select
            
                    Console.WriteLine()
                End If
            
                ' close the device
                device1.Close()
                ' close the device manager
                deviceManager1.Close()
            End Sub
            </code>
            <code lang="C#">
            private static void GetPixelTypesInfo()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the deafult device
                    Device device = deviceManager.DefaultDevice;
                    
                    // open the device
                    device.Open();
            
                    // get reference to object that manipulates IPixelType capability
                    DeviceCapability pixelTypeCap = device.Capabilities.Find(DeviceCapabilityId.IPixelType);
                    // if IPixelType capability supported
                    if (pixelTypeCap != null)
                    {
                        // get information about current, default and supported values of capability
                        TwainValueContainerBase capValue = pixelTypeCap.GetValue();
            
                        switch (capValue.ContainerType)
                        {
                            case TwainValueContainerType.Enum:
                                TwainEnumValueContainer capValueAsEnum = (TwainEnumValueContainer)capValue;
                                Array enumValues = capValueAsEnum.EnumValues;
            
                                // output the capability values in human readable format
                                Console.WriteLine(string.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)));
                                Console.WriteLine(string.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)));
                                Console.Write("Supported pixel types:");
                                for (int i = 0; i &lt; enumValues.Length; i++)
                                    Console.Write(string.Format(" {0}", enumValues.GetValue(i)));
                                break;
                        }
            
                        Console.WriteLine();
                    }
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.IndexOf(System.UInt16)">
            <summary>
            Finds the index of capability in this collection by ID of capability.
            </summary>
            <param name="id">ID of capability.</param>
            <returns>Index of capability in this collection if capability is found; otherwise, <b>-1</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.IndexOf(Vintasoft.WpfTwain.DeviceCapabilityId)">
            <summary>
            Finds the index of capability in this collection by ID of capability.
            </summary>
            <param name="id">ID of capability.</param>
            <returns>Index of capability in this collection if capability is found; otherwise, <b>-1</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Find(System.UInt16)">
            <summary>
            Finds the capability by ID of capability.
            </summary>
            <param name="id">ID of capability.</param>
            <returns><see cref="T:Vintasoft.WpfTwain.DeviceCapability" /> if capability is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Find(Vintasoft.WpfTwain.DeviceCapabilityId)">
            <summary>
            Finds the capability by ID of capability.
            </summary>
            <param name="id">ID of capability.</param>
            <returns><see cref="T:Vintasoft.WpfTwain.DeviceCapability" /> if capability is found; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Save(System.IO.Stream)">
            <summary>
            Saves information about current values of capabilites to the steram.
            </summary>
            <param name="stream">Stream to save the current values of capabilities.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <n>null</n> (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <i>stream</i> does not have write access.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <example>This example shows how to save values of current device capabilities to a file.
            <code lang="VB.NET">
            Private Sub SaveDeviceCapabilitCollection(ByVal device1 As Device)
                device1.Open()
                Dim fs As FileStream = New FileStream("scanner-capabilities.xml", FileMode.Append, FileAccess.Write)
                device1.Capabilities.Save(fs)
                fs.Close()
            End Sub
            </code>
            <code lang="C#">
            private void SaveDeviceCapabilitCollection(Device device)
            {
                device.Open();
                FileStream fs = new FileStream("scanner-capabilities.xml", FileMode.Append, FileAccess.Write);
                device.Capabilities.Save(fs);
                fs.Close();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Load(System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Load(System.IO.Stream)">
            <summary>
            Loads current values of capabilities from the stream.
            </summary>
            <param name="stream">Stream with current values of capabilites.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> (Nothing in VB).</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have write access.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <example>This example shows how to load previously saved values of device capabilities.
            <code lang="VB.NET">
            Private Sub LoadDeviceCapabilitCollection(ByVal device1 As Device)
                device1.Open()
                Dim fs As FileStream = New FileStream("scanner-capabilities.xml", FileMode.Open, FileAccess.Read)
                device1.Capabilities.Load(fs)
                fs.Close()
                device1.Acquire()
            End Sub
            </code>
            <code lang="C#">
            private void LoadDeviceCapabilitCollection(Device device)
            {
                device.Open();
                FileStream fs = new FileStream("scanner-capabilities.xml", FileMode.Open, FileAccess.Read);
                device.Capabilities.Load(fs);
                fs.Close();
                device.Acquire();
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.WpfTwain.DeviceCapabilityCollection.Save(System.IO.Stream)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapabilityCollection.Item(System.Int32)">
            <summary>
            Gets the capability at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The capability at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than zero or
            <i>index</i> is equal to or greater than <see cref="P:System.Collections.ReadOnlyCollectionBase.Count" />.</exception>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapabilityCollection.IsReadOnly">
            <summary>
            Determines that this collection is readonly.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.Fix32">
            <summary>
            Stores a Fixed point number in two parts, a whole and a fractional part.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.Fix32.Empty">
            <summary>
            Represents a <see cref="T:Vintasoft.WpfTwain.Fix32" /> class with its properties left uninitialized.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.#ctor(System.Int16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.Fix32" /> class.
            </summary>
            <param name="whole">The Whole part of the floating point number.</param>
            <param name="frac">The Fractional part of the floating point number.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.ToFloat">
            <summary>
            Returns a float value that represents the current object.
            </summary>
            <returns>Float value that represents the current object.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A String that represents the current Object. </returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal
            to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><b>true</b> if obj is an instance of <see cref="T:Vintasoft.WpfTwain.Fix32" />
            and equals the value of this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A 32-bit signed integer that indicates the relative order of
            the objects being compared.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Fix32.GetHashCode">
            <summary>
            Serves as a hash function for Fix32 type.
            </summary>
            <returns>A hash code for the current System.Object.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.Fix32.Whole">
            <summary>
            The Whole part of the floating point number.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Fix32.Frac">
            <summary>
            The Fractional part of the floating point number.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.Frame">
            <summary>
            Defines a frame rectangle in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" /> coordinates.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.Frame.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.Frame" /> class.
            </summary>
            <param name="left">Value of the left-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.</param>
            <param name="top">Value of the top-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.</param>
            <param name="right">Value of the right-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.</param>
            <param name="bottom">Value of the bottom-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.Frame.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A String that represents the current Object. </returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Frame.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>A 32-bit signed integer that indicates the relative order
            of the objects being compared.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Frame.ToRectangleF">
            <summary>
            Returns frame as a <see cref="T:Vintasoft.WpfTwain.RectangleF" />.
            </summary>
            <returns>Frame as a <see cref="T:Vintasoft.WpfTwain.RectangleF" />.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.Frame.Left">
            <summary>
            Value of the left-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Frame.Top">
            <summary>
            Value of the top-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Frame.Right">
            <summary>
            Value of the right-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Frame.Bottom">
            <summary>
            Value of the bottom-most edge of the rectangle, in <see cref="T:Vintasoft.WpfTwain.UnitOfMeasure" />.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.Range`1">
            <summary>
            Class that contains information about the range.
            </summary>
            <typeparam name="T" />
        </member>
        <member name="P:Vintasoft.WpfTwain.Range`1.Value">
            <summary>
            Gets the current value of the range.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Range`1.DefaultValue">
            <summary>
            Gets the default value of the range.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Range`1.MinValue">
            <summary>
            Get the minimal value of the range.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Range`1.MaxValue">
            <summary>
            Get the maximal value of the range.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Range`1.StepSize">
            <summary>
            Get the step size of values in the range.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.Resolution">
            <summary>
            Stores an ordered pair of float values, typically the horizontal and
            vertical resolution.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.Resolution.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.Resolution" /> class.
            </summary>
            <param name="horizontal">Horizontal resolution in inches.</param>
            <param name="vertical">Vertical resolution in inches.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.Resolution.#ctor(System.Single,System.Single,Vintasoft.WpfTwain.UnitOfMeasure)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.Resolution" /> class.
            </summary>
            <param name="horizontal">Horizontal resolution in <i>unitOfMeasure</i>.</param>
            <param name="vertical">Vertical resolution in <i>unitOfMeasure</i>.</param>
            <param name="unitOfMeasure">Unit of measure.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.Resolution.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal
            to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><b>true</b> if obj is an instance of <see cref="T:Vintasoft.WpfTwain.Resolution" />
            and equals the value of this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Resolution.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.WpfTwain.Resolution" />.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Resolution.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.Resolution.Horizontal">
            <summary>
            Gets the horizontal resolution, in pixels per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Resolution.Vertical">
            <summary>
            Gets the vertical resolution, in pixels per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Resolution.UnitOfMeasure">
            <summary>
            Gets the unit of measure.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCapability">
            <summary>
            Class that allows to manipulate the device capability.
            </summary>
            <example>This example shows how to get information about all pixel types supported by the device.
            <code lang="VB.NET">
            Shared Sub GetPixelTypesInfo()
                Dim deviceManager1 As DeviceManager = New DeviceManager
            
                ' open the device manager
                deviceManager1.Open()
            
                ' get reference to the default device
                Dim device1 As Device = deviceManager1.DefaultDevice
            
                ' open the device
                device1.Open()
            
                ' get reference to object that manipulates IPixelType capability
                Dim pixelTypeCap As DeviceCapability = device1.Capabilities.Find(DeviceCapabilityId.IPixelType)
                ' if IPixelType capability supported
                If Not pixelTypeCap Is Nothing Then
                    ' get information about current, default and supported values of capability
                    Dim capValue As TwainValueContainerBase = pixelTypeCap.GetValue()
            
                    Select Case capValue.ContainerType
                        Case TwainValueContainerType.Enum
                            Dim capValueAsEnum As TwainEnumValueContainer = CType(capValue, TwainEnumValueContainer)
                            Dim enumValues As Array = capValueAsEnum.EnumValues
            
                            ' output the capability values in human readable format
                            Console.WriteLine(String.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)))
                            Console.WriteLine(String.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)))
                            Console.Write("Supported pixel types:")
                            For i As Integer = 0 To enumValues.Length - 1
                                Console.Write(String.Format(" {0}", enumValues.GetValue(i)))
                            Next i
                    End Select
            
                    Console.WriteLine()
                End If
            
                ' close the device
                device1.Close()
                ' close the device manager
                deviceManager1.Close()
            End Sub
            </code>
            <code lang="C#">
            private static void GetPixelTypesInfo()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    // open the device manager
                    deviceManager.Open();
            
                    // get reference to the deafult device
                    Device device = deviceManager.DefaultDevice;
                    
                    // open the device
                    device.Open();
            
                    // get reference to object that manipulates IPixelType capability
                    DeviceCapability pixelTypeCap = device.Capabilities.Find(DeviceCapabilityId.IPixelType);
                    // if IPixelType capability supported
                    if (pixelTypeCap != null)
                    {
                        // get information about current, default and supported values of capability
                        TwainValueContainerBase capValue = pixelTypeCap.GetValue();
            
                        switch (capValue.ContainerType)
                        {
                            case TwainValueContainerType.Enum:
                                TwainEnumValueContainer capValueAsEnum = (TwainEnumValueContainer)capValue;
                                Array enumValues = capValueAsEnum.EnumValues;
            
                                // output the capability values in human readable format
                                Console.WriteLine(string.Format("Current pixel type: {0}", enumValues.GetValue(capValueAsEnum.ValueIndex)));
                                Console.WriteLine(string.Format("Default pixel type: {0}", enumValues.GetValue(capValueAsEnum.DefaultValueIndex)));
                                Console.Write("Supported pixel types:");
                                for (int i = 0; i &lt; enumValues.Length; i++)
                                    Console.Write(string.Format(" {0}", enumValues.GetValue(i)));
                                break;
                        }
            
                        Console.WriteLine();
                    }
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.GetUsageMode">
            <summary>
            Gets the usage modes of device capability.
            </summary>
            <returns>Usage modes of device capability.</returns>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceCapability">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.GetValue">
            <summary>
            Returns value of capability.
            </summary>
            <returns>Value of capability.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.GetCurrentValue">
            <summary>
            Return current value of capability.
            </summary>
            <returns>Current value of capability.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.GetDefaultValue">
            <summary>
            Returns default value of capability.
            </summary>
            <returns>Default value of capability.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>This example shows how to enable duplex using capability of device.
            <code lang="VB.NET">
            Shared Sub SetDuplexEnabledCapValue()
                Dim deviceManager1 As DeviceManager = New DeviceManager
            
                ' open the device manager
                deviceManager1.Open()
            
                ' get reference to the default device
                Dim device1 As Device = deviceManager1.DefaultDevice
            
                ' open the device
                device1.Open()
            
                ' get reference to object that manipulates DuplexEnabled capability
                Dim duplexEnabledCap As DeviceCapability = device1.Capabilities.Find(DeviceCapabilityId.DuplexEnabled)
                ' if duplexEnabledCap capability supported
                If duplexEnabledCap IsNot Nothing Then
                    ' set value of DuplexEnabled capability
                    duplexEnabledCap.SetValue(True)
                End If
            
                ' close the device
                device1.Close()
                ' close the device manager
                deviceManager1.Close()
            End Sub
            </code>
            <code lang="C#">
            private static void SetDuplexEnabledCapValue()
            {
                using (DeviceManager deviceManager1 = new DeviceManager())
                {
                    // open the device manager
                    deviceManager1.Open();
            
                    // get reference to the default device
                    Device device = deviceManager1.DefaultDevice;
            
                    // open the device
                    device.Open();
            
                    // get reference to object that manipulates DuplexEnabled capability
                    DeviceCapability duplexEnabledCap = device.Capabilities.Find(DeviceCapabilityId.DuplexEnabled);
                    // if DuplexEnabled capability supported
                    if (duplexEnabledCap != null)
                    {
                        // set value of DuplexEnabled capability
                        duplexEnabledCap.SetValue(true);
                    }
            
                    // close the device
                    device.Close();
            
                    // close the device manager
                    deviceManager1.Close();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.SByte)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Byte)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.UInt16)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Int16)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Int32)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.UInt32)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Single)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.String)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(Vintasoft.WpfTwain.RectangleF)">
            <summary>
            Sets the current value of device capability.
            </summary>
            <param name="value">New current value of device capability.</param>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during setting value of capability.</exception>
            <example>Please see example <see cref="M:Vintasoft.WpfTwain.DeviceCapability.SetValue(System.Boolean)">here</see>.</example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.ResetValue">
            <summary>
            Resets the current value of device capability.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if error occurs during resetting value of capability.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified <see cref="T:Vintasoft.WpfTwain.DeviceCapability" />.
            </summary>
            <param name="obj">A <see cref="T:Vintasoft.WpfTwain.DeviceCapability" /> that evaluates to this instance.</param>
            <returns>A 32-bit signed integer indicating the relationship between the two comparands.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCapability.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapability.Id">
            <summary>
            Gets the ID of capability.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapability.Name">
            <summary>
            Gets the name of capability.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapability.EnumType">
            <summary>
            Gets the type of enumeration associated with this capability.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapability.UsageMode">
            <summary>
            Gets the usage mode of capability.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.WpfTwain.DeviceCapabilityUsageMode" />.Undefined.</value>
            <remarks>
            <b>Important</b>: This property has correct value only after execution of the GetValue(s) or
            SetValue methods.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCapability.ValueType">
            <summary>
            Gets the type of value(s) of capability.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.WpfTwain.TwainValueType" />.Undefined.</value>
            <remarks>
            <b>Important</b>: This property has correct value only after execution of the GetValue(s) or
            SetValue methods.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainArrayValueContainer">
            <summary>
            Class that stores information about TWAIN value represented as array.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainValueContainerBase">
            <summary>
            Abstract base class for TWAIN value.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsBool">
            <summary>
            Returns current value of TWAIN value as boolean value.
            </summary>
            <returns>Current value of TWAIN value as boolean value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to bool.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsSByte">
            <summary>
            Returns current value of TWAIN value as sbyte value.
            </summary>
            <returns>Current value of TWAIN value as sbyte value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to sbyte.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsByte">
            <summary>
            Returns current value of TWAIN value as byte value.
            </summary>
            <returns>Current value of TWAIN value as byte value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to byte.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsInt16">
            <summary>
            Returns current value of TWAIN value as Int16 value.
            </summary>
            <returns>Current value of TWAIN value as Int16 value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to Int16.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsUInt16">
            <summary>
            Returns current value of TWAIN value as UInt16 value.
            </summary>
            <returns>Current value of TWAIN value as UInt16 value.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if TWAIN value does not support
            current value OR TWAIN value has wrong container.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to UInt16.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsInt32">
            <summary>
            Returns current value of TWAIN value as Int32 value.
            </summary>
            <returns>Current value of TWAIN value as Int32 value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to Int32.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsUInt32">
            <summary>
            Returns current value of TWAIN value as UInt32 value.
            </summary>
            <returns>Current value of TWAIN value as UInt32 value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to UInt32.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsFloat">
            <summary>
            Returns current value of TWAIN value as float value.
            </summary>
            <returns>Current value of TWAIN value as float value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to float.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsString">
            <summary>
            Returns current value of TWAIN value as string value.
            </summary>
            <returns>Current value of TWAIN value as string value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to string.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsFrame">
            <summary>
            Returns current value of TWAIN value as frame value.
            </summary>
            <returns>Current value of TWAIN value as frame value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if current value of TWAIN value
            cannot be converted to frame.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsArray">
            <summary>
            Gets the supported values of TWAIN value as array of values.
            </summary>
            <returns>Supported values of TWAIN value as array of values.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if supported values of TWAIN value
            cannot be converted to array.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsFloatArray">
            <summary>
            Gets the supported values of TWAIN value as array of float values.
            </summary>
            <returns>Supported values of TWAIN value as array of float values.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if supported values of TWAIN value
            cannot be converted to array.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainValueContainerBase.GetAsEnumArray">
            <summary>
            Gets the supported values of TWAIN value as array of enum values.
            </summary>
            <returns>Supported values of TWAIN value as array of enum values.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if supported values of TWAIN value
            cannot be converted to array.</exception>
            <remarks>
            Enum type can be retrieved from the <see cref="P:Vintasoft.WpfTwain.TwainValueContainerBase.EnumType" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainValueContainerBase.ContainerType">
            <summary>
            Gets the container type of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainValueContainerBase.EnumType">
            <summary>
            Gets the type of enumeration associated with this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainArrayValueContainer.Values">
            <summary>
            Gets the supported values of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainArrayValueContainer.EnumValues">
            <summary>
            Gets the supported values as values of TWAIN enumeration.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainEnumValueContainer">
            <summary>
            Class that stores information about TWAIN value represented as enumeration.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnumValueContainer.ValueIndex">
            <summary>
            Gets the index of the current value in the <see cref="P:Vintasoft.WpfTwain.TwainArrayValueContainer.Values" /> array.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnumValueContainer.DefaultValueIndex">
            <summary>
            Gets the index of the default value in the <see cref="P:Vintasoft.WpfTwain.TwainArrayValueContainer.Values" /> array.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainOneValueContainer">
            <summary>
            Class that stores information about TWAIN value represented as single value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainOneValueContainer.Value">
            <summary>
            Gets the current value of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainOneValueContainer.EnumValue">
            <summary>
            Gets the current value as value from TWAIN enumeration.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainRangeValueContainer">
            <summary>
            Class that stores information about TWAIN value represented as range.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainRangeValueContainer.GetAsRangeOfFloatValues">
            <summary>
            Returns the range of float values.
            </summary>
            <returns>Range of float values.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainRangeValueContainer.DefaultValue">
            <summary>
            Gets the default value of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainRangeValueContainer.MinValue">
            <summary>
            Gets the minimal value of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainRangeValueContainer.MaxValue">
            <summary>
            Gets the maximal value of this TWAIN value.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainRangeValueContainer.StepSize">
            <summary>
            Gets the step size of this TWAIN value.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainValueContainerType">
            <summary>
            Specifies available types of container for TWAIN values.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueContainerType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueContainerType.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueContainerType.Enum">
            <summary>
            Enumeration
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueContainerType.OneValue">
            <summary>
            One value
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueContainerType.Range">
            <summary>
            Range
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PageAutoSize">
            <summary>
            Specifies available methods of image size detection.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageAutoSize.None">
            <summary>
            Size of acquired image will not be adjusted.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageAutoSize.Auto">
            <summary>
            Size of acquired image will be adjusted to nearest size from sizes
            available in <see cref="M:Vintasoft.WpfTwain.Device.GetSupportedPageSizes" />.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageAutoSize.Current">
            <summary>
            Size of acquired image will be adjusted to size specified in
            <see cref="P:Vintasoft.WpfTwain.Device.PageSize" />.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.BitDepthReductionMode">
            <summary>
            Specifies available reduction methods for bit depth loss.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BitDepthReductionMode.Threshold">
            <summary>
            Threshold
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BitDepthReductionMode.Halftones">
            <summary>
            Halftones
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BitDepthReductionMode.CustomHalftone">
            <summary>
            Custom halftones
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BitDepthReductionMode.Diffusion">
            <summary>
            Diffusion
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCapabilityId">
            <summary>
            Specifies available device capabilities.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.XferCount">
            <summary>
            The application is willing to accept this number of images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ICompression">
            <summary>
            Allows the application and Source to identify which compression schemes
            they have in common for Buffered Memory and File transfers.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPixelType">
            <summary>
            The type of pixel data that a Source is capable of acquiring (for example,
            black and white, gray, RGB, etc.).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IUnits">
            <summary>
            Determines the unit of measure for all quantities.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IXferMech">
            <summary>
            Allows the application and Source to identify which transfer mechanisms
            they have in common.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Author">
            <summary>
            The name or other identifying information about the Author of the image.
            It may include a copyright string.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Caption">
            <summary>
            A general note about the acquired image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederEnabled">
            <summary>
            If TRUE, Source must acquire data from the document feeder acquire area
            and other feeder capabilities can be used. If FALSE, Source must acquire
            data from the non-feeder acquire area and no other feeder capabilities
            can be used.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederLoaded">
            <summary>
            Reflect whether there are documents loaded in the Source's feeder.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.TimeDate">
            <summary>
            The date and time the image was acquired.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.SupportedCaps">
            <summary>
            Returns a list of all the capabilities for which the Source will answer
            inquiries. Does not indicate which capabilities the Source will allow to
            be set by the application.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ExtendedCaps">
            <summary>
            Allows the application and Source to negotiate capabilities to be used in
            States 5 and 6.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.AutoFeed">
            <summary>
            If TRUE, the Source will automatically feed the next page from the document
            feeder after the number of frames negotiated for capture from each page
            are acquired.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ClearPage">
            <summary>
            If TRUE, the Source will eject the current page being acquired from and
            will leave the feeder acquire area empty.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeedPage">
            <summary>
            If TRUE, the Source will eject the current page and advance the next page
            in the document feeder into the feeder acquire area.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.RewindPage">
            <summary>
            If TRUE, the Source will return the current page to the input side of the
            document feeder and feed the last page from the output side of the feeder
            back into the acquisition area.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Indicators">
            <summary>
            If TRUE, the Source will display a progress indicator during acquisition
            and transfer, regardless of whether the Source's user interface is active.
            If FALSE, the progress indicator will be suppressed if the Source's user
            interface is inactive.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.SupportedCapsExt">
            <summary>
            Returns a list of all the capabilities for which the Source will answer
            inquiries.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PaperDetectable">
            <summary>
            This capability determines whether the device has a paper sensor that
            can detect documents on the ADF or Flatbed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.UIControllable">
            <summary>
            If TRUE, indicates that this Source supports acquisition with the UI
            disabled. If FALSE, indicates that this Source can only support
            acquisition with the UI enabled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DeviceOnline">
            <summary>
            If TRUE, the physical hardware (e.g., scanner, digital camera, image
            database, etc.) that represents the image source is attached, powered on,
            and communicating.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.AutoScan">
            <summary>
            This capability is intended to boost the performance of a Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ThumbnailsEnabled">
            <summary>
            Allows an application to request the delivery of thumbnail representations
            for the set of images that are to be delivered.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Duplex">
            <summary>
            This indicates whether the scanner supports duplex. If so, it further
            indicates whether one-path or  two-path duplex is supported.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DuplexEnabled">
            <summary>
            The user can set the duplex option to be TRUE or FALSE. If TRUE, the
            scanner scans both sides of a paper; otherwise, the scanner will scan
            only one side of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.EnableDsUiOnly">
            <summary>
            Queries an application to see if it implements the new user
            interface settings dialog.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CustomDsData">
            <summary>
            Allows the application to query the data source to see if current
            settings of device can be get/set.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.EndOrSer">
            <summary>
            Allows the application to specify the starting endorser / imprinter number.
            All other endorser/imprinter properties should be handled through the data
            source's user interface.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.JobControl">
            <summary>
            Allows multiple jobs in batch mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Alarms">
            <summary>
            Turns specific audible alarms on and off.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.AlarmVolume">
            <summary>
            The volume of a device's audible alarm. Note that this control affects
            the volume of all alarms; no specific volume control for individual types
            of alarms is provided.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.AutomaticCapture">
            <summary>
            The number of images to automatically capture. This does not refer to
            the number of images to be sent to the Application, use
            DeviceCapability.XferCount for that.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.TimeBeforeFirstCapture">
            <summary>
            For automatic capture, this value selects the number of milliseconds
            before the first picture is to be taken, or the first image is to be scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.TimeBetweenCaptures">
            <summary>
            For automatic capture, this value selects the milliseconds to wait
            between pictures taken, or images scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ClearBuffers">
            <summary>
            MSG_GET reports the presence of data in the scanner's buffers.
            MSG_SET with a value of TWCB_CLEAR immediately clears the buffers.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.MaxBatchBuffers">
            <summary>
            Describes the number of pages that the scanner can buffer when
            DeviceCapability.AutoScan is enabled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DeviceTimeDate">
            <summary>
            The date and time of the device's clock.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PowerSupply">
            <summary>
            MSG_GET reports the kinds of power available to the device.
            MSG_GETCURRENT reports the current power supply in use.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CameraPreviewUI">
            <summary>
            This capability queries the Source for UI support for preview mode.
            If TRUE, the Source supports preview UI.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DeviceEvent">
            <summary>
            Specifies which events the Application wants the Source to report.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.SerialNumber">
            <summary>
            A string containing the serial number of the currently selected device in
            the Source. Multiple devices may all report the same serial number.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Printer">
            <summary>
            MSG_GET returns the current list of available printer devices, along with
            the one currently being used for negotiation.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterEnabled">
            <summary>
            Turns the current DeviceCapability.Printer device on or off.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndex">
            <summary>
            The User can set the starting number for the current DeviceCapability.Printer
            device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterMode">
            <summary>
            Specifies the appropriate current DeviceCapability.Printer device mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterString">
            <summary>
            Specifies the string(s) that are to be used in the string component when
            the current DeviceCapability.Printer device is enabled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterSuffix">
            <summary>
            Specifies the string that shall be used as the current
            DeviceCapability.Printer device's suffix.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Language">
            <summary>
            Allows Application and Source to identify which languages they have in
            common for the exchange of string data, and to select the language of
            the internal UI.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederAlignment">
            <summary>
            Helps the Application determine any special actions it may need to take
            when negotiating frames with the Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederOrder">
            <summary>
            TWFO_FIRSTPAGEFIRST if the feeder starts with the top of the first page.
            TWFO_LASTPAGEFIRST is the feeder starts with the top of the last page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ReacquireAllowed">
            <summary>
            Indicates whether the physical hardware (e.g. scanner, digital camera)
            is capable of acquiring multiple images of the same page without changes
            to the physical registration of that page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.BatteryMinutes">
            <summary>
            The minutes of battery power remaining to the device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.BatteryPercentage">
            <summary>
            When used with MSG_GET, return the percentage of battery power level
            on camera. If -1 is returned, it indicates that the battery is not present.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CameraSide">
            <summary>
            Sets the top and bottom values of cameras in a scanning device.
            Supported from TWAIN 1.91.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.Segmented">
            <summary>
            Describes the segmentation setting for captured images.
            Supported from TWAIN 1.91.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.AutomaticSenseMedium">
            <summary>
            Specifies whether to acquire images from the Automatic Document Feeder or from the Flatbed.
            </summary>
            <value>
            <b>true</b> - always attempts to acquire first image from the Automatic Document Feeder;
            if paper is not present in the feeder, then images are acquired from the Flatbed.<br />
            <b>false</b> - source of images (feeder or flatbed) is determined by
            the <i>FeederEnabled</i> capability.
            </value>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CameraEnable">
            <summary>
            Delivers images from the current camera.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CameraOrder">
            <summary>
            Selects the order of output for Single Document Multiple Image mode.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.MicrEnabled">
            <summary>
            Enables actions needed to support check scanning.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederPrep">
            <summary>
            Improve the movement of paper through a scanner ADF.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.FeederPocket">
            <summary>
            Report what pockets are available as paper leaves a device.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.CustomInterfaceGuid">
            <summary>
            Uniquely identifies an interface for a Data Source.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DoubleFeedDetection">
            <summary>
            Controls the way the data source detects double feed events.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DoubleFeedDetectionLength">
            <summary>
            Adjusts double feed detection for document length.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DoubleFeedDetectionSensitivity">
            <summary>
            Adjusts double feed detection for ultrasonic.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.DoubleFeedDetectionResponse">
            <summary>
            Adjusts how the data source handles double feed events.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PaperHandling">
            <summary>
            Control paper handling.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IndicatorsMode">
            <summary>
            Controls GUI messages allowed when the full GUI isn’t being displayed.
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterVerticalOffset">
            <summary>
            Y-Offset for current Printer device.
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PowerSaveTime">
            <summary>
            Gets or sets the camera power down timer in seconds.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.SupportedExtImageInfo">
            <summary>
            Lists all of the information that the Source is capable of returning from
            a call to DAT_EXTIMAGEINFO.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutoBright">
            <summary>
            TRUE enables and FALSE disables the Source's Auto-brightness function 
            (if any).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBrightness">
            <summary>
            The brightness values available within the Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IContrast">
            <summary>
            The contrast values available within the Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ICustomHalftone">
            <summary>
            Specifies the square-cell halftone (dithering) matrix the Source should
            use to halftone the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IExposureTime">
            <summary>
            Specifies the exposure time used to capture the image, in seconds.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFilter">
            <summary>
            Describes the color characteristic of the subtractive filter applied to
            the image data. Multiple filters may be applied to a single acquisition.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFlashUsed">
            <summary>
            Specifies whether or not the image was acquired using a flash.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IGamma">
            <summary>
            Gamma correction value for the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IHalftones">
            <summary>
            A list of names of the halftone patterns available within the Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IHighlight">
            <summary>
            Specifies which value in an image should be interpreted as the lightest
            "highlight."
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IImageFileFormat">
            <summary>
            Informs the application which file formats the Source can generate (MSG_GET).
            Tells the Source which file formats the application can handle (MSG_SET).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ILampState">
            <summary>
            TRUE means the lamp is currently, or should be set to ON. Sources may
            not support MSG_SET operations.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ILightSource">
            <summary>
            Describes the general color characteristic of the light source used
            to acquire the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IOrientation">
            <summary>
            Defines which edge of the "paper" the image's "top" is aligned with.
            This information is used to adjust the frames to match the scanning
            orientation of the paper.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPhysicalWidth">
            <summary>
            The maximum physical width (X-axis) the Source can acquire (measured
            in units of IUnits).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPhysicalHeight">
            <summary>
            The maximum physical height (Y-axis) the Source can acquire (measured
            in units of IUnits).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IShadow">
            <summary>
            Specifies which value in an image should be interpreted as the darkest
            "shadow." All values "darker" than this value will be clipped to this value.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFrames">
            <summary>
            The list of frames the Source will acquire on each page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IXNativeResolution">
            <summary>
            The native optical resolution along the X-axis of the device being
            controlled by the Source. Most devices will respond with a single
            value (TW_ONEVALUE).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IYNativeResolution">
            <summary>
            The native optical resolution along the Y-axis of the device being
            controlled by the Source.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IXResolution">
            <summary>
            All the X-axis resolutions the Source can provide.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IYResolution">
            <summary>
            All the Y-axis resolutions the Source can provide.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IMaxFrames">
            <summary>
            The maximum number of frames the Source can provide or the application can
            accept per page. This is a bounding capability only. It does not establish
            current or future behavior.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ITiles">
            <summary>
            This is used with buffered memory transfers. If TRUE, Source can provide
            application with tiled image data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBitOrder">
            <summary>
            Specifies how the bytes in an image are filled by the Source. TWBO_MSBFIRST
            indicates that the leftmost bit in the byte (usually bit 7) is the byte's
            Most Significant Bit.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ICcittKFactor">
            <summary>
            Used for CCITT Group 3 2-dimensional compression. The ‘K’ factor indicates how often
            the new compression baseline should be re-established. A value of 2 or 4 is common
            in facsimile communication. A value of zero in this field will indicate an infinite
            K factor—the baseline is only calculated at the beginning of the transfer.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ILightPath">
            <summary>
            Describes whether the image was captured transmissively or reflectively.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPixelFlavor">
            <summary>
            Sense of the pixel whose numeric value is zero (minimum data value).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPlanarChunky">
            <summary>
            Allows the application and Source to identify which color data formats
            are available. There are two options, "planar" and "chunky."
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IRotation">
            <summary>
            How the Source can/should rotate the scanned image data prior to transfer.
            This doesn't use IUnits. It is always measured in degrees. Any applied
            value is additive with any rotation specified in IOrientation.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ISupportedSizes">
            <summary>
            For devices that support fixed frame sizes. Defined sizes match typical
            page sizes. This specifies the size(s) the Source can/should use to
            acquire image data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IThreshold">
            <summary>
            Specifies the dividing line between black and white.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IXScaling">
            <summary>
            All the X-axis scaling values available. A value of '1.0' is equivalent to
            100% scaling. Do not use values less than or equal to zero.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IYScaling">
            <summary>
            All the Y-axis scaling values available. A value of '1.0' is equivalent to
            100% scaling. Do not use values less than or equal to zero.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBitOrderCodes">
            <summary>
            Used for CCITT data compression only. Indicates the bit order representation
            of the stored compressed codes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPixelFlavorCodes">
            <summary>
            Used only for CCITT data compression. Specifies whether the compressed
            codes' pixel "sense" will be inverted from the Current value of
            IPixelFlavor prior to transfer.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IJpegPixelType">
            <summary>
            Specifies the JPEG pixel type.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ITimeFill">
            <summary>
            Used only with CCITT data compression. Specifies the minimum number of
            words of compressed codes (compressed data) to be transmitted per line.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBitDepth">
            <summary>
            Specifies the pixel bit depths for the Current value of IPixelType.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBitDepthReduction">
            <summary>
            Specifies the Reduction Method the Source should use to reduce the bit
            depth of the data. Most commonly used with IPixelType = PixelType.BW to
            reduce gray data to black and white.
            Supported from TWAIN 1.5.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IUndefinedImageSize">
            <summary>
            If TRUE the Source will issue a MSG_XFERREADY before starting the scan.
            Supported from TWAIN 1.6.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IImageDataSet">
            <summary>
            Gets or sets the image indices that will be delivered during the standard
            image transfer done in States 6 and 7.
            Supported from TWAIN 1.7.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IExtImageInfo">
            <summary>
            Allows the application to query the data source to see if it supports
            the new operation triplet DG_IMAGE/DAT_EXTIMAGEINFO/MSG_GET.
            Supported from TWAIN 1.7.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IMinimumHeight">
            <summary>
            Allows the source to define the minimum height (Y-axis) that the source can acquire.
            Supported from TWAIN 1.7.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IMinimumWidth">
            <summary>
            Allows the source to define theminimum width (X-axis) that the source can acquire.
            Supported from TWAIN 1.7.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFlipRotation">
            <summary>
            Flip rotation is used to properly orient images that flip orientation
            every other image.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeDetectionEnabled">
            <summary>
            Turns bar code detection on and off.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ISupportedBarCodeTypes">
            <summary>
            Provides a list of bar code types that can be detected by the current Data Source.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeMaxSearchPriorities">
            <summary>
            The maximum number of supported search priorities.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeSearchPriorities">
            <summary>
            A prioritized list of bar code types dictating the order in which bar
            codes will be sought.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeSearchMode">
            <summary>
            Restricts bar code searching to certain orientations, or prioritizes
            one orientation over the other.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeMaxRetries">
            <summary>
            Restricts the number of times a search will be retried if none are
            found on each page.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IBarCodeTimeout">
            <summary>
            Restricts the total time spent on searching for a bar code on each page.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IZoomFactor">
            <summary>
            Returns all camera supported lens zooming range or sets zooming value.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeDetectionEnabled">
            <summary>
            Turns patch code detection on and off.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.ISupportedPatchCodeTypes">
            <summary>
            A list of patch code types that may be detected by the current Data Source.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeMaxSearchPriorities">
            <summary>
            The maximum number of supported search priorities.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeSearchPriorities">
            <summary>
            A prioritized list of patch code types dictating the order in which
            patch codes will be sought.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeSearchMode">
            <summary>
            Restricts patch code searching to certain orientations, or prioritizes
            one orientation over the other.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeMaxRetries">
            <summary>
            Restricts the number of times a search will be retried if none are found
            on each page.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IPatchCodeTimeout">
            <summary>
            Restricts the total time spent on searching for a patch code on each page.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFlashUsed2">
            <summary>
            For devices that support flash. MSG_SET selects the flash to be used
            (if any). MSG_GET reports the current setting. This capability replaces
            IFlashUsed, which is only able to negotiate the flash being on or off.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IImageFilter">
            <summary>
            For devices that support image enhancement filtering. This capability
            selects the algorithm used to improve the quality of the image.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.INoiseFilter">
            <summary>
            For devices that support noise filtering. This capability selects the
            algorithm used to remove noise.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IOverScan">
            <summary>
            Overscan is used to scan outside of the boundaries described by
            IFrames, and is used to help acquire image data that may be lost
            because of skewing.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticBorderDetection">
            <summary>
            Turns automatic border detection on and off.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticDeskew">
            <summary>
            Turns automatic deskew correction on and off.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticRotate">
            <summary>
            When TRUE this capability depends on intelligent features within the
            Source to automatically rotate the image to the correct position.
            Supported from TWAIN 1.8.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IJpegQuality">
            <summary>
            Specifies quality for JPEG images.
            Supported from TWAIN 1.91.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFeederType">
            <summary>
            Allows the Application to set scan parameters depending upon the type of feeder.
            Supported from TWAIN 1.91.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IIccProfile">
            <summary>
            Embeds or links ICC profiles into files.
            Supported from TWAIN 1.91.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutoSize">
            <summary>
            Force the output image dimensions to match either the current value
            of ISupportedSizes or any of its current allowed values.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutoDiscardBlankPages">
            <summary>
            Discards blank pages.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticCropUsesFrame">
            <summary>
            Reduces the amount of data captured from the device, potentially improving
            the performance of the driver.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticLengthDetection">
            <summary>
            Controls the automatic detection of the length of a document, this is
            intended for use with an Automatic Document Feeder.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticColorEnabled">
            <summary>
            Detects the pixel type of the image and returns either a color image or a non-color
            image specified by AutomaticColorNonColorPixelType.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IAutomaticColorNonColorPixelType">
            <summary>
            Specifies the non-color pixel type to use when automatic color is enabled.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IColorManagementEnabled">
            <summary>
            Disables the Source's color and gamma tables for color and grayscale images,
            resulting in output that that could be termed "raw".
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IImageMerge">
            <summary>
            Merges the front and rear image of a document in one of four orientations: front on the top.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IImageMergeHeightThreshold">
            <summary>
            Specifies a Y-Offset in ICAP_UNITS units.
            Supported from TWAIN 2.1.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IFilmType">
            <summary>
            Specify the type of transmissive media (positive or negative).
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IMirror">
            <summary>
            Controls output of a mirror image of the input document.
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.IJpegSubsampling">
            <summary>
            Selects JPEG quantization.
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterCharRotation">
            <summary>
            Rotates characters printed on documents.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterFontStyle">
            <summary>
            Selects characteristics of the font printed on documents (ex: bold, italic).
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndexLeadChar">
            <summary>
            Selects the left side padding of numeric values printed on documents (ex: zero fill).
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndexMaxValue">
            <summary>
            Maximum allowed value for DeviceCapabilityId.PrintIndex.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndexNumDigits">
            <summary>
            Total number of digits allowed in DeviceCapabilityId.PrinterIndex.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndexStep">
            <summary>
            Step size when incrementing DeviceCapabilityId.PrinterIndex for each document.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterIndexTrigger">
            <summary>
            Kinds of documents that cause DeviceCapabilityId.PrinterIndex to increment.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityId.PrinterStringPreview">
            <summary>
            A sample string representing the currently selected printing options.
            Supported from TWAIN 2.3.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCapabilityUsageMode">
            <summary>
            Specifies available usage modes of device capability.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Get">
            <summary>
            Value of device capability can be get.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Set">
            <summary>
            Current value of device capability can be set.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.GetDefault">
            <summary>
            Value(s) of device capability can be get.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.GetCurrent">
            <summary>
            Current value of device capability can be set.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Reset">
            <summary>
            Value of device capability can be reset.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Kodak_Machine">
            <summary>
            Kodak_Machine
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Kodak_Bitonal">
            <summary>
            Kodak_Bitonal
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceCapabilityUsageMode.Kodak_Color">
            <summary>
            Kodak_Color
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageFilter">
            <summary>
            Specifies available image filters.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Magenta">
            <summary>
            Magenta
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ImageFilter.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.LightPath">
            <summary>
            Specifies available light paths.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightPath.Reflective">
            <summary>
            Reflective
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightPath.Transmissive">
            <summary>
            Transmissive
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.LightSource">
            <summary>
            Specifies available color characteristic of the light sources used to acquire the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.UltraViolet">
            <summary>
            Ultra violet
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LightSource.InfraRed">
            <summary>
            Infra red
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.NoiseFilter">
            <summary>
            Specifies available noise filter algorithms.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.NoiseFilter.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.NoiseFilter.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.NoiseFilter.LonePixel">
            <summary>
            LonePixel
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.NoiseFilter.MajorityRule">
            <summary>
            MajorityRule
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PageOrientation">
            <summary>
            Specifies available page orientations.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.Portrait">
            <summary>
            Portrait (no rotation).
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.Rotation90">
            <summary>
            Rotates the original image 90 degrees to the "left".
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.Rotation180">
            <summary>
            Rotates the original image 180 degrees to the "left".
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.Landscape">
            <summary>
            Landscape (rotates the original image 270 degrees to the "left").
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.Auto">
            <summary>
            Orients the image according to criteria determined by the source. <b>Available from TWAIN 2.0.</b>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.AutoText">
            <summary>
            Orients the document using text only algorithms. <b>Available from TWAIN 2.0.</b>
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageOrientation.AutoPicture">
            <summary>
            Orients the document using image only algorithms. <b>Available from TWAIN 2.0.</b>
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PageSize">
            <summary>
            Specifies available page sizes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A4">
            <summary>
            A4LETTER, A4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.B5">
            <summary>
            B5LETTER, JISB5
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.USLETTER">
            <summary>
            USLETTER
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.USLEGAL">
            <summary>
            USLEGAL
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A5">
            <summary>
            A5
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.B4">
            <summary>
            B4, ISOB4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.B6">
            <summary>
            B6, ISOB6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.USLEDGER">
            <summary>
            USLEDGER
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.USEXECUTIVE">
            <summary>
            USEXECUTIVE
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A3">
            <summary>
            A3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.B3">
            <summary>
            B3, ISOB3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A6">
            <summary>
            A6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C4">
            <summary>
            C4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C5">
            <summary>
            C5
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C6">
            <summary>
            C6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A0x4">
            <summary>
            4A0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A0x2">
            <summary>
            2A0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A0">
            <summary>
            A0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A1">
            <summary>
            A1
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A2">
            <summary>
            A
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A7">
            <summary>
            A7
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A8">
            <summary>
            A8
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A9">
            <summary>
            A9
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.A10">
            <summary>
            A10
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB0">
            <summary>
            ISOB0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB1">
            <summary>
            ISOB1
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB2">
            <summary>
            ISOB2
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB3">
            <summary>
            ISOB3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB4">
            <summary>
            ISOB4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB5">
            <summary>
            ISOB5
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB6">
            <summary>
            ISOB6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB7">
            <summary>
            ISOB7
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB8">
            <summary>
            ISOB8
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB9">
            <summary>
            ISOB9
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.ISOB10">
            <summary>
            ISOB10
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB0">
            <summary>
            JISB0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB1">
            <summary>
            JISB1
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB2">
            <summary>
            JISB2
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB3">
            <summary>
            JISB3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB4">
            <summary>
            JISB4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB6">
            <summary>
            JISB6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB7">
            <summary>
            JISB7
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB8">
            <summary>
            JISB8
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB9">
            <summary>
            JISB9
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.JISB10">
            <summary>
            JISB10
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C0">
            <summary>
            C0
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C1">
            <summary>
            C1
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C2">
            <summary>
            C2
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C3">
            <summary>
            C3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C7">
            <summary>
            C7
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C8">
            <summary>
            C8
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C9">
            <summary>
            C9
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.C10">
            <summary>
            C10
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.USSTATEMENT">
            <summary>
            USSTATEMENT
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PageSize.BUSINESSCARD">
            <summary>
            BUSINESSCARD
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PatchCodeType">
            <summary>
            Specifies patch code types which can be recognized by the TWAIN device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.Patch1">
            <summary>
            Patch 1
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.Patch2">
            <summary>
            Patch 2
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.Patch3">
            <summary>
            Patch 3
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.Patch4">
            <summary>
            Patch 4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.Patch6">
            <summary>
            Patch 6
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PatchCodeType.PatchT">
            <summary>
            Patch T
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PixelFlavor">
            <summary>
            Specifies available pixel flavors for black-white images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelFlavor.Chocolate">
            <summary>
            Zero pixel represents darkest shade.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelFlavor.Vanilla">
            <summary>
            Zero pixel represents lightest shade.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.PixelType">
            <summary>
            Specifies available pixel types.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.BW">
            <summary>
            Black-white image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.Gray">
            <summary>
            Gray (palette) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.RGB">
            <summary>
            Color (RGB) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.Palette">
            <summary>
            Color (palette) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.CMY">
            <summary>
            CMY
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.CMYK">
            <summary>
            Color (CMYK) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.YUV">
            <summary>
            Color (YUV) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.YUVK">
            <summary>
            Color (YUVK) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.CIEXYZ">
            <summary>
            CIEXYZ
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.Lab">
            <summary>
            Lab
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.SRGB">
            <summary>
            Color (RGB) image with ICC profile
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.SRGB64">
            <summary>
            Color (gamut RGB) image with ICC profile
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.BGR">
            <summary>
            Color (BGR) image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.CIELAB">
            <summary>
            CIELAB
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.CIELUV">
            <summary>
            CIELUV
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.YCBCR">
            <summary>
            YCBCR
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.PixelType.Infrared">
            <summary>
            Infrared
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainImageFileFormat">
            <summary>
            Specifies available file formats for a file transfer mode.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Tiff">
            <summary>
            Tagged Image File Format
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Pict">
            <summary>
            Macintosh PICT
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Bmp">
            <summary>
            Windows Bitmap
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.XBM">
            <summary>
            X-Windows Bitmap
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Jpeg">
            <summary>
            JPEG File Interchange Format
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.FlashPix">
            <summary>
            Flash Pix
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.TiffMulti">
            <summary>
            Mult-page TIFF file
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Png">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.SPIFF">
            <summary>
            SPIFF
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.EXIF">
            <summary>
            EXIF
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.PDF">
            <summary>
            Portable Document Format
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Jpeg2000">
            <summary>
            JPEG 2000
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Jpeg2000JPN">
            <summary>
            JPEG 2000 (JPN)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Jpeg2000JPX">
            <summary>
            JPEG 2000 (JPX)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.Dejavu">
            <summary>
            Dejavu (a file format from LizardTech)
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageFileFormat.PDFA">
            <summary>
            Portable Document Format / A
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.UnitOfMeasure">
            <summary>
            Specifies available units of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Picas">
            <summary>
            Picas
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Twips">
            <summary>
            Twips
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Pixels">
            <summary>
            Pixels
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.UnitOfMeasure.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceCollection">
            <summary>
            Class that allows to get information about TWAIN devices installed in the system.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCollection.GetDevice(System.Int32)">
            <summary>
            Returns the device at the specified index.
            </summary>
            <param name="index">The zero-based index of the device.</param>
            <returns>The device at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than zero or
            <i>index</i> is equal to or greater than <see cref="P:System.Collections.ReadOnlyCollectionBase.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCollection.Find(System.String)">
            <summary>
            Finds the device by device's name.
            </summary>
            <param name="deviceName">Name of the device to find.</param>
            <returns>The device with specified name.</returns>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException">Thrown if TWAIN device manager is not found
            or not initialized.</exception>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceCollection.Select">
            <summary>
            This method is obsolete, use the <see cref="M:Vintasoft.WpfTwain.DeviceManager.ShowDefaultDeviceSelectionDialog" /> method instead.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCollection.Item(System.Int32)">
            <summary>
            Gets the device at the specified index.
            </summary>
            <param name="index">The zero-based index of the device to get.</param>
            <returns>The device at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than zero or
            <i>index</i> is equal to or greater than <see cref="P:System.Collections.ReadOnlyCollectionBase.Count" />.</exception>
            <seealso cref="M:Vintasoft.WpfTwain.DeviceCollection.GetDevice(System.Int32)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCollection.CurrentIndex">
            <summary>
            This property is obsolete, use the <see cref="P:Vintasoft.WpfTwain.DeviceManager.OpenedDevice" /> property instead.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceCollection.Current">
            <summary>
            This property is obsolete, use the <see cref="P:Vintasoft.WpfTwain.DeviceManager.OpenedDevice" /> property instead.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceCollection.CurrentDeviceChanging">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanging" /> event instead.
            </summary>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceCollection.CurrentDeviceChanged">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanged" /> event instead.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DocumentFeeder">
            <summary>
            Class that allows to manipulate the automatic document feeder of TWAIN device.
            </summary>
            <example>This example shows how to use document feeder of the device.
            <code lang="VB.NET">
            Private Sub AcquireImagesFromAdf(ByVal device1 As Device)
                ' set scan settings
                device1.ShowUI = False
                device1.DisableAfterAcquire = True
                device1.Open()
                device1.PixelType = PixelType.RGB
                device1.UnitOfMeasure = UnitOfMeasure.Inches
                device1.Resolution = New Resolution(200, 200)
            
                ' set document feeder settings
                If device1.HasFeeder Then
                    device1.DocumentFeeder.Enabled = True
                    device1.XferCount = -1
            
                    ' enable duplex if possible
                    If device1.DocumentFeeder.DuplexMode &lt;&gt; DuplexMode.None Then
                        device1.DocumentFeeder.DuplexEnabled = True
                    End If
            
                    ' acquire images from device
                    If device1.DocumentFeeder.PaperDetectable Then
                        If device1.DocumentFeeder.Loaded Then
                            device1.Acquire()
                        End If
                    Else
                        device1.Acquire()
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            private void AcquireImagesFromAdf(Device device)
            {
                // set scan settings
                device.ShowUI = false;
                device.DisableAfterAcquire = true;
                device.Open();
                device.PixelType = PixelType.RGB;
                device.UnitOfMeasure = UnitOfMeasure.Inches;
                device.Resolution = new Resolution(200f, 200f);
            
                // set document feeder settings
                if (device.HasFeeder)
                {
                    device.DocumentFeeder.Enabled = true;
                    device.XferCount = -1;
            
                    // enable duplex if possible
                    if (device.DocumentFeeder.DuplexMode != DuplexMode.None)
                        device.DocumentFeeder.DuplexEnabled = true;
            
                    // acquire images from device
                    if (device.DocumentFeeder.PaperDetectable)
                    {
                        if (device.DocumentFeeder.Loaded)
                            device.Acquire();
                    }
                    else
                        device.Acquire();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DocumentFeeder.FeedPage">
            <summary>
            Feeds the page in the document feeder.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.DocumentFeeder.ClearPage">
            <summary>
            Clears the page from the document feeder.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.DocumentFeeder.RewindPage">
            <summary>
            Rewinds the page in the document feeder.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.Enabled">
            <summary>
            Determines that document feeder is enabled.
            </summary>
            <value>
            <b>true</b> - document feeder is enabled,
            <b>false</b> - document feeder is disabled.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DocumentFeeder">here</see>.</example>
            <seealso cref="P:Vintasoft.WpfTwain.Device.FeederPresent" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.PaperDetectable">
            <summary>
            Determines that device can detect paper in the document feeder.
            </summary>
            <value>
            <b>true</b> - device has a paper sensor,
            <b>false</b> - device does not have paper sensor.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DocumentFeeder">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.Loaded">
            <summary>
            Determines that documents are loaded in the document feeder.
            </summary>
            <value>
            <b>true</b> - documents are loaded in the document feeder,
            <b>false</b> - documents are not loaded in the document feeder.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DocumentFeeder">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.DuplexMode">
            <summary>
            Gets the duplex mode supported by the device.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DocumentFeeder">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.DuplexEnabled">
            <summary>
            Enables or disables the duplex scanning.
            </summary>
            <value>
            <b>true</b> - duplex is enabled,
            <b>false</b> - duplex is disabled.
            </value>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DocumentFeeder">here</see>.</example>
        </member>
        <member name="P:Vintasoft.WpfTwain.DocumentFeeder.AutoFeed">
            <summary>
            Enables or disables the auto feed feature of document feeder.
            </summary>
            <exception cref="T:Vintasoft.WpfTwain.TwainInvalidStateException">Thrown if device is in wrong state.</exception>
            <exception cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">Thrown if device does not support capability.</exception>
            <remarks>
            Call this property only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfTwain.DuplexMode">
            <summary>
            Specifies available duplex modes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DuplexMode.None">
            <summary>
            Duplex is not supported
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DuplexMode.OnePass">
            <summary>
            One-pass duplex is supported
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DuplexMode.TwoPass">
            <summary>
            Two-pass duplex is supported
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.AcquireModalState">
            <summary>
            Specifies available states of the <see cref="M:Vintasoft.WpfTwain.Device.AcquireModal" /> method.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.ImageAcquiring">
            <summary>
            Image is acquiring.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.ImageAcquired">
            <summary>
            Image is acquired.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.ScanCompleted">
            <summary>
            Scan process is completed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.ScanFailed">
            <summary>
            Scan process is failed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.ScanCanceled">
            <summary>
            Scan process is canceled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.AcquireModalState.UserInterfaceClosed">
            <summary>
            User Interface of device is closed.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ClearBufferMode">
            <summary>
            Specifies available modes of clearing.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ClearBufferMode.Auto">
            <summary>
            Clear the device buffer when device state is changing from Enabled state to the Open state.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ClearBufferMode.Clear">
            <summary>
            Clear the device buffer immediately.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ClearBufferMode.NoClear">
            <summary>
            Do not clear the device buffer when device state is changing from Enabled state to the Open state.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceState">
            <summary>
            Specifies available states of device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceState.Closed">
            <summary>
            Device is closed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceState.Opened">
            <summary>
            Device is opened.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceState.Enabled">
            <summary>
            Device is enabled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceState.TransferReady">
            <summary>
            Device is ready to transfer image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceState.Transferring">
            <summary>
            Device transferring an image.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.LanguageType">
            <summary>
            Specifies available languages of the device.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.UserLocale">
            <summary>
            User locale
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Danish">
            <summary>
            Danish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Dutch">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.English">
            <summary>
            English
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.FrenchCanadian">
            <summary>
            French Canadian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Finnish">
            <summary>
            Finnish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.French">
            <summary>
            French
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.German">
            <summary>
            German
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Icelandic">
            <summary>
            Icelandic
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Italian">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Norwegian">
            <summary>
            Norwegian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Portuguese">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Swedish">
            <summary>
            Swedish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishUsa">
            <summary>
            English USA
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Afrikaans">
            <summary>
            Afrikaans
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Albania">
            <summary>
            Albania
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Arabic">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicAlgeria">
            <summary>
            Arabic Algeria
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicBahrain">
            <summary>
            Arabic Bahrain
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicEgypt">
            <summary>
            Arabic Egypt
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicIraq">
            <summary>
            Arabic Iraq
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicJordan">
            <summary>
            Arabic Jordan
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicKuwait">
            <summary>
            Arabic Kuwait
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicLebanon">
            <summary>
            Arabic Lebanon
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicLibya">
            <summary>
            Arabic Libya
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicMorocco">
            <summary>
            Arabic Morocco
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicOman">
            <summary>
            Arabic Oman
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicQatar">
            <summary>
            Arabic Qatar
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicSaudiArabia">
            <summary>
            Arabic Saudi Arabia
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicSyria">
            <summary>
            Arabic Syria
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicTunisia">
            <summary>
            Arabic Tunisia
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicUae">
            <summary>
            Arabic UAE
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ArabicYemen">
            <summary>
            Arabic Yemen
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Basque">
            <summary>
            Basque
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Byelorussian">
            <summary>
            Byelorussian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Bulgarian">
            <summary>
            Bulgarian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Catalan">
            <summary>
            Catalan
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Chinese">
            <summary>
            Chinese
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChineseHongkong">
            <summary>
            Chinese Hongkong
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChinesePrc">
            <summary>
            People's Republic of China
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChineseSingapore">
            <summary>
            Chinese Singapore
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChineseSimplified">
            <summary>
            Chinese Simplified
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChineseTaiwan">
            <summary>
            Chinese Taiwan
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ChineseTraditional">
            <summary>
            Chinese Traditional
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Croatia">
            <summary>
            Croatia
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Czech">
            <summary>
            Czech
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.DutchBelgian">
            <summary>
            Dutch Belgian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishAustralian">
            <summary>
            English Australian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishCanadian">
            <summary>
            English Canadian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishIreland">
            <summary>
            English Ireland
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishNewZealand">
            <summary>
            English New Zealand
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishSouthAfrica">
            <summary>
            English South Africa
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.EnglishUnitedKingdom">
            <summary>
            English United Kingdom
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Estonian">
            <summary>
            Estonian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Faeroese">
            <summary>
            Faeroese
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Farsi">
            <summary>
            Farsi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.FrenchBelgian">
            <summary>
            French Belgian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.FrenchLuxembourg">
            <summary>
            French Luxembourg
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.FrenchSwiss">
            <summary>
            French Swiss
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.GermanAustrian">
            <summary>
            German Austrian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.GermanLuxembourg">
            <summary>
            German Luxembourg
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.GermanLiechtenstein">
            <summary>
            German Liechtenstein
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.GermanSwiss">
            <summary>
            German Swiss
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Greek">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Hebrew">
            <summary>
            Hebrew
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Hungarian">
            <summary>
            Hungarian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Indonesian">
            <summary>
            Indonesian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.ItalianSwiss">
            <summary>
            Italian Swiss
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Japanese">
            <summary>
            Japanese
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Korean">
            <summary>
            Korean
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.KoreanJihab">
            <summary>
            Korean Jihab
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Latvian">
            <summary>
            Latvian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Lithuanian">
            <summary>
            Lithuanian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.NorwegianBokmal">
            <summary>
            Norwegian Bokmal
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.NorwegianNynorsk">
            <summary>
            Norwegian Nynorsk
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Polish">
            <summary>
            Polish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.PortugueseBrazil">
            <summary>
            Portuguese Brazil
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Romanian">
            <summary>
            Romanian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Russian">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.SerbianLatin">
            <summary>
            Serbian Latin
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Slovak">
            <summary>
            Slovak
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Slovenian">
            <summary>
            Slovenian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.SpanishMexican">
            <summary>
            Spanish Mexican
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.SpanishModern">
            <summary>
            Spanish Modern
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Thai">
            <summary>
            Thai
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Turkish">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Ukrainian">
            <summary>
            Ukrainian
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Assmese">
            <summary>
            Assmese
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Bengali">
            <summary>
            Bengali
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Bihari">
            <summary>
            Bihari
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Bodo">
            <summary>
            Bodo
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Dogri">
            <summary>
            Dogri
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Gujarati">
            <summary>
            Gujarati
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Haryanvi">
            <summary>
            Haryanvi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Hindi">
            <summary>
            Hindi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Kannada">
            <summary>
            Kannada
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Kashmiri">
            <summary>
            Kashmiri
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Malayalam">
            <summary>
            Malayalam
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Marathi">
            <summary>
            Marathi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Marwari">
            <summary>
            Marwari
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Meghalayan">
            <summary>
            Meghalayan
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Mizo">
            <summary>
            Mizo
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Naga">
            <summary>
            Naga
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Orissi">
            <summary>
            Orissi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Punjabi">
            <summary>
            Punjabi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Pushtu">
            <summary>
            Pushtu
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.SerbianCyrillic">
            <summary>
            Serbian Cyrillic
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Sikkimi">
            <summary>
            Sikkimi
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.SwedishFinland">
            <summary>
            Swedish Finland
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Tamil">
            <summary>
            Tamil
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Telugu">
            <summary>
            Telugu
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Tripuri">
            <summary>
            Tripuri
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Urdu">
            <summary>
            Urdu
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.LanguageType.Vietnamese">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TransferMode">
            <summary>
            Specifies available transfer modes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TransferMode.Native">
            <summary>
            Native transfer mode
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TransferMode.File">
            <summary>
            File transfer mode
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TransferMode.Memory">
            <summary>
            Memory transfer mode
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainImageCompression">
            <summary>
            Specifies available compressions of acquired images.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.None">
            <summary>
            No compression
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Packbits">
            <summary>
            Packbits
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Group31D">
            <summary>
            Group31D
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Group31DEol">
            <summary>
            Group31DEol
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Group32D">
            <summary>
            Group32D
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Group4">
            <summary>
            CCITT Group 4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Jpeg">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Lzw">
            <summary>
            LZW
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Jbig">
            <summary>
            JBIG
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Png">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Rle4">
            <summary>
            Rle4
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.Rle8">
            <summary>
            Rle8
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainImageCompression.BitFields">
            <summary>
            BitFields
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.CurrentDeviceChangedEventArgs">
            <summary>
            This class is obsolete, use the <see cref="T:Vintasoft.WpfTwain.OpenedDeviceChangedEventArgs" /> class instead.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageAcquiredEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.Device.ImageAcquired" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageAcquiredEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageAcquiredEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiredEventArgs.Image">
            <summary>
            Gets the acquired image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiredEventArgs.Filename">
            <summary>
            Gets the filename where acquired image is saved.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiredEventArgs.PendingImages">
            <summary>
            Gets the number of pending images.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiredEventArgs.EndOfJob">
            <summary>
            Determines that end of batch job is reached.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiredEventArgs.Cancel">
            <summary>
            Determines that current acquisition process must be canceled.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageAcquiringEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiring" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageAcquiringEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageAcquiringEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringEventArgs.ImageInfo">
            <summary>
            Get the information about acquiring image.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringEventArgs.Filename">
            <summary>
            Gets or sets the filename to save acquired image in the File transfer mode.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringEventArgs.FileFormat">
            <summary>
            Gets or sets the format of file to save acquired image in the File transfer mode.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.WpfTwain.TwainImageFileFormat" />.Bmp</value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringEventArgs.Cancel">
            <summary>
            Determines that current acquisition process must be canceled.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageAcquiringProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.Device.ImageAcquiringProgress" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageAcquiringProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImageAcquiringProgressEventArgs" />
            class.
            </summary>
            <param name="progress">Progress of the action.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringProgressEventArgs.Progress">
            <summary>
            Returns the progress, in percent, of current action.
            </summary>
            <value>Value from 0 to 100.</value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageAcquiringProgressEventArgs.Cancel">
            <summary>
            Indicates that current action must be canceled.
            </summary>
            <value>
            <b>true</b> if current action must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Vintasoft.WpfTwain.ScanFailedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.Device.ScanFailed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ScanFailedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ScanFailedEventArgs" /> class.
            </summary>
            <param name="errorString">Error string.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.ScanFailedEventArgs.ErrorString">
            <summary>
            Gets the error code of error occured at the acquisition process.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.Device.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceStateChangedEventArgs.#ctor(Vintasoft.WpfTwain.DeviceState,Vintasoft.WpfTwain.DeviceState)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceStateChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceStateChangedEventArgs.State">
            <summary>
            Gets the current state of device.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceStateChangedEventArgs.PreviousState">
            <summary>
            Gets the previous state of device.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ExtendedImageInfoId">
            <summary>
            Specifies available extended image attributes.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeX">
            <summary>
            The X coordinate of a bar code found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeY">
            <summary>
            The Y coordinate of a bar code found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeText">
            <summary>
            The text of a bar code found on a page.
            </summary>
            <value>Value type: string.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeType">
            <summary>
            The type of bar code found on a page.
            </summary>
            <value>Value type: UInt32.</value>
            <remarks>
            The <see cref="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeType" /> enumeration contains available types of
            barcodes.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeTop">
            <summary>
            The top coordinate of a shaded region found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeLeft">
            <summary>
            The left coordinate of a shaded region found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeHeight">
            <summary>
            The height of a shaded region found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWidth">
            <summary>
            The width of a shaded region found on a page.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeSize">
            <summary>
            The width of the dots within the shade region.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SpecklesRemoved">
            <summary>
            The number of speckles removed from the image when de-speckle is enabled.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.HorzLineXCoord">
            <summary>
            The x coordinate of a horizontal line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.HorzLineYCoord">
            <summary>
            The y coordinate of a horizontal line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.HorzLineLength">
            <summary>
            The length of a horizontal line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.HorzLineThickness">
            <summary>
            The thickness (height) of a horizontal line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.VertLineXCoord">
            <summary>
            The x coordinate of a vertical line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.VertLineYCoord">
            <summary>
            The y coordinate of a vertical line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.VertLineLength">
            <summary>
            The length of a vertical line detected in the image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.VertLineThickness">
            <summary>
            The thickness (width) of a vertical line detected in the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PatchCode">
            <summary>
            The patch code detected.
            </summary>
            <value>Value type: UInt32.</value>
            <remarks>
            The <see cref="T:Vintasoft.WpfTwain.PatchCodeType" /> enumeration contains available types of
            patch codes.
            </remarks>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.EndOrSedText">
            <summary>
            The text that was endorsed on the paper by the scanner.
            </summary>
            <value>Value type: string(255)</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FormConfidence">
            <summary>
            The confidence that the specified form was detected. This is an array
            property with a confidence factor for each form In the data set with 0
            meaning no match and 100 meaning absolute certainty. Typically values
            over 70 imply a good form match with the template.
            </summary>
            <value>Value type: UInt32, allowed values from 0 to 100.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FormTemplateMatch">
            <summary>
            The array of file names for the master forms matched against a form. If
            multi-page master forms are used, the associated page numbers are
            contained in the FORMTEMPLATEPAGEMATCH capability array.
            </summary>
            <value>Value type: string(255).</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FormTemplatePageMatch">
            <summary>
            An array containing the number of the page from a multi-page master
            form matched against a form image. It is useful when matching a form
            image against the pages of a multi-page master form. The file name
            of the master form is contained in the FORMTEMPLATEMATCH capability.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FormHorzDocOffset">
            <summary>
            An array containing the perceived vertical offsets of the form
            image being matched against a set of master forms. This is useful for
            page registration once the form has been recognized.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FormVertDocOffset">
            <summary>
            An array containing the perceived vertical offsets of the form image being
            matched against a set of master forms. This is useful for page registration
            once the form has been recognized.
            </summary>
            <value>Value type: UInt32, available values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeCount">
            <summary>
            Returns the number of bar codes found on the document image. A value
            of 0 means the bar code engine was enabled but that no bar codes were
            found. A value of -1 means the bar code engine was not enabled.
            </summary>
            <value>Value type: UInt32, available values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeConfidence">
            <summary>
            This number reflects the degree of certainty the bar code engine has
            in the accuracy of the information obtained from the scanned image
            and ranges from 0 (no confidence) to 100 (supreme confidence). The
            Source may return a value of -1 if it does not support confidence
            reporting.
            </summary>
            <value>Value type: UInt32, available values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeRotation">
            <summary>
            The bar code’s orientation on the scanned image is described in
            reference to a Western-style interpretation of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BarcodeTextLength">
            <summary>
            The number of ASCII characters derived from the bar code.
            </summary>
            <value>Value type: UInt32, available values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeCount">
            <summary>
            Returns the number of shaded regions found and erased in the document
            image. A value of 0 means the deshade engine was enabled but that no
            regions were processed. A value of -1 means the deshade engine was not
            enabled.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeBlackCountOld">
            <summary>
            The total number of black pixels in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeBlackCountNew">
            <summary>
            The total number of black pixels in the region after deshading. If
            this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeBlackRlMin">
            <summary>
            The shortest black pixel run-length in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeBlackRlMax">
            <summary>
            The longest black pixel run-length in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWhiteCountOld">
            <summary>
            The total number of white pixels in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWhiteCountNew">
            <summary>
            The total number of white pixels in the region after deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWhiteRlMin">
            <summary>
            The shortest white pixel run-length in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWhiteRlAverage">
            <summary>
            The average length of all white pixel run-lengths in the region prior
            to deshading. If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeshadeWhiteRlMax">
            <summary>
            The longest white pixel run-length in the region prior to deshading.
            If this value is unknown the Source returns -1.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.BlackSpecklesRemoved">
            <summary>
            The number of black speckles removed from the image when despeckle is
            enabled.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.WhiteSpecklesRemoved">
            <summary>
            The number of white speckles removed (black speckles added) from the
            image when despeckle is enabled.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.HorzLineCount">
            <summary>
            Returns the number of horizontal lines found and erased in the document
            image. A value of 0 means the line removal engine was enabled but that
            no lines were found. A value of -1 means the line engine was not enabled.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.VertLineCount">
            <summary>
            Returns the number of vertical lines found and erased in the document
            image. A value of 0 means the line removal engine was enabled but that
            no lines were found. A value of -1 means the line engine was not enabled.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DeskewStatus">
            <summary>
            Returns the status of the deskew operation.
            </summary>
            <value>
            Value type: UInt32.<br />
            <br />
            Possible values:<br />
            0 - Image successfully deskewed<br />
            1 - Deskew information only<br />
            2 - Deskew failed<br />
            3 - Deskew engine not enabled<br />
            </value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewOriginalAngle">
            <summary>
            Deskew engine not enabled
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewFinalAngle">
            <summary>
            The amount of skew in the deskewed image. This number may not be zero.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewConfidence">
            <summary>
            This number reflects the degree of certainty the deskew engine has
            in the accuracy of the deskewing of the current image and ranges
            from 0 (no confidence) to 100 (supreme confidence). The Source may
            return a value of -1 if it does not support confidence reporting.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowX1">
            <summary>
            This is the X image coordinate of the upper left corner of the virtual
            deskewed image. It may be negative indicating the deskewed corner is not
            represented by actual pixels.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowY1">
            <summary>
            The Y image coordinate of the upper left corner of the virtual deskewed
            image. It may be negative indicating the deskewed corner is not
            represented by actual pixels.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowX2">
            <summary>
            The X image coordinate of the upper right corner of the virtual deskewed
            image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowY2">
            <summary>
            The Y image coordinate of the upper right corner of the virtual deskewed
            image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowX3">
            <summary>
            This is the X image coordinate of the lower left corner of the virtual
            deskewed image. It may be negative indicating the deskewed corner is not
            represented by actual pixels.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowY3">
            <summary>
            The Y image coordinate of the lower left corner of the virtual deskewed
            image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowX4">
            <summary>
            The X image coordinate of the lower right corner of the virtual deskewed
            image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SkewWindowY4">
            <summary>
            The Y image coordinate of the lower right corner of the deskewed image.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Bookname">
            <summary>
            Book name.
            </summary>
            <value>Value type: string(255).</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.ChapterNumber">
            <summary>
            Chapter number.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 1.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.DocumentNumber">
            <summary>
            Document number.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 1.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PageNumber">
            <summary>
            Page number.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 1.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Camera">
            <summary>
            The primary use of this value is to determine if the image is from
            the top or the bottom side of a sheet of paper. This is accomplished
            by naming the camera that was used to obtain the image. For Sources
            that support DAT_FILESYSTEM, the Application can use the string to
            determine if the camera is capturing images from the top or bottom
            side of the paper.
            </summary>
            <value>Value type: string(255).</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FrameNumber">
            <summary>
            Chronological index of the acquired frame.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Frame">
            <summary>
            Gets information about image layout of the device.
            </summary>
            <value>Value type: RectangleF.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PixelFlavor">
            <summary>
            Pixel flavor.
            </summary>
            <value>Value type: UInt16, allowed values: 0 or 1.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.IccProfile">
            <summary>
            Returns the name of the ICC profile that was used to render the
            current image. This may be a fully qualified path indicating the exact
            location of the ICC profile.<br />
            <br />
            If this is not a fully qualified path, then the default location is
            operating system dependant.<br />
            <br />
            Windows default location:<br />
            windows_path\system32\spool<br />
            <br />
            Supported from TWAIN 1.91.
            </summary>
            <value>Value type: string(255),
            allowed values: any valid ICC profile file name or fully qualified path.
            </value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.LastSegment">
            <summary>
            Returns TRUE if the current segment is the last segment of a page.
            Supported from TWAIN 1.91.
            </summary>
            <value>Value type: bool.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.SegmentNumber">
            <summary>
            Returns a number identifying the segment of an image.
            Supported from TWAIN 1.91.
            </summary>
            <value>Value type: UInt32, allowed values: &gt;= 0.</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.MagData">
            <summary>
            This is a "blob" of data with a byte count retrieved from the driver/device.
            The interpretation of the data comes from TWEI_MAGTYPE.
            Supported from TWAIN 2.0.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.MagType">
            <summary>
            Describes the kind of magnetic data. Supported from TWAIN 2.0.
            </summary>
            <value>Value type: UInt16, allowed values: TWMD_MICR (0).</value>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PageSide">
            <summary>
            Side of page.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.FileSystemSource">
            <summary>
            Returns a DAT_FILESYSTEM string describing the camera that captured the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.ImageMerged">
            <summary>
            Indicates that the current image is the result of a merger between the front
            and rear images of a duplex capture. See ICAP_IMAGEMERGE for more information.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.MagDataLength">
            <summary>
            This describes the length of the magnetic data. Either in bytes for "blob"
            or data or characters for string data.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PaperCount">
            <summary>
            Returns a value indicating if the image represents the front or rear of the sheet of paper.
            Supported from TWAIN 2.2.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PageSide">
            <summary>
            Side of page (0-front 1-rear).
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DocumentCount">
            <summary>
            Count of pages.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Length">
            <summary>
            Number of bytes of image data.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Level">
            <summary>
            Image Address Level.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Mode">
            <summary>
            Gemini Mode (1-18).
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_LineLength">
            <summary>
            Image width.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PageLength">
            <summary>
            Image height.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Compression">
            <summary>
            Image compression.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Date">
            <summary>
            Date in format YY/MM/DD.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Time">
            <summary>
            Time in format HH/MM/00.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodal_Roll">
            <summary>
            Imagelink 990 Film Roll Number.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Resolution">
            <summary>
            Resolution in dots per inch.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_BitOrder">
            <summary>
            Bit order in a byte.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_MomentaryFlag">
            <summary>
            Gemini Momentary.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_LatchedFlag">
            <summary>
            Gemini Latched.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Barcode">
            <summary>
            Gemini Barcode(s).
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Deskew">
            <summary>
            Deskew status.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DeskewAngle">
            <summary>
            Deskew angle.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Polarity">
            <summary>
            Polarity.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PrinterString">
            <summary>
            Viper/Prism/Wildfire printed string.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PrinterIndex">
            <summary>
            Kinda like the document count.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_ImageNumber">
            <summary>
            Count images this session.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PageNumber">
            <summary>
            Count sheets of paper this session.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PageImageNumber">
            <summary>
            Image count on a page (1 - 4).
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Bookname_A">
            <summary>
            Fixed field Prism/Wildfire A.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Bookname_B">
            <summary>
            Fixed field Prism/Wildfire B.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Bookname_C">
            <summary>
            Fixed field Prism/Wildfire C.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Bookname_D">
            <summary>
            Fixed field Prism/Wildfire D.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_ImageAddressString">
            <summary>
            Prism/Wildfire image address string.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_XOffset">
            <summary>
            Left cropping offset.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_YOffset">
            <summary>
            Right cropping offset.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_FeaturePatch">
            <summary>
            Feature patch (only image with patch: i200/i600).
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_ImageAddressDefinitions">
            <summary>
            Image Address field definitions.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PersonalityCardHeader">
            <summary>
            Personality-Card header.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PersonalityCardFooter">
            <summary>
            Personality-Card footer.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_TokenCount">
            <summary>
            Alien token flag.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Regeneration">
            <summary>
            Alien retry count.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_ImageStatus">
            <summary>
            Alien image status.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Dither">
            <summary>
            Bitonal dithering algorithm used.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_PatchDetected">
            <summary>
            Patch was found on the document.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_FoldedCornerPercentage">
            <summary>
            Phoenix folded corner percentage.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DeskewConfidenceFactor">
            <summary>
            Phoenix deskew confidence factor.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_BitonalContrastPercentage">
            <summary>
            Phoenix bitonal contrast percentage.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_BitonalContrast">
            <summary>
            Phoenix bitonal contrast.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_BitonalThreshold">
            <summary>
            Phoenix bitonal threshold.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_SumHistogram">
            <summary>
            Phoenix sum historgram.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DifferenceHistogram">
            <summary>
            Phoenix difference histogram.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_GammaTable">
            <summary>
            Phoenix gamma table.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Multifeed">
            <summary>
            Multifeed detected.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DeskewAngleActual">
            <summary>
            Signed deskew angle to scanner precision.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_RawImageHeader">
            <summary>
            Raw image header from scanner.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_LongPaperSegment">
            <summary>
            Long paper segment number.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_LongPaperLastSegment">
            <summary>
            Long pager last segment.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_AutoColorDetected">
            <summary>
            Auto color detected.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_AutoColorAmount">
            <summary>
            Auto color amount.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_AutoColorThreshold">
            <summary>
            Auto color threshold.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_Xml">
            <summary>
            Everything in XML format.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_DropOutStatus">
            <summary>
            ECDO algorithm status.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_ProcessingStatus">
            <summary>
            Processing status.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.Kodak_BinarizationQuality">
            <summary>
            Conveys the quality level of the binarized image.
            This extended info supported only by Kodak scanners.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.ExtendedImageInfoId.PrinterText">
            <summary>
            Test that was printed on the document.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.JobControl">
            <summary>
            Specifies how the batch job must be processed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.JobControl.None">
            <summary>
            No job control.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.JobControl.DetectAndIncludeJobSeparatorAndContinueScanning">
            <summary>
            Detect and include job separator and continue scanning.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.JobControl.DetectAndIncludeJobSeparatorAndStopScanning">
            <summary>
            Detect and include job separator and stop scanning.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.JobControl.DetectAndExcludeJobSeparatorAndContinueScanning">
            <summary>
            Detect and exclude job separator and continue scanning.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.JobControl.DetectAndExcludeJobSeparatorAndStopScanning">
            <summary>
            Detect and exclude job separator and stop scanning.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ExtendedImageInfo">
            <summary>
            Class that contains extended information about the acquired image.
            </summary>
            <example>This example shows how to get information about barcodes found on acquired image.
            <code lang="VB.NET">
            Public Sub GetExtendedImageInfo()
                Using deviceManager1 As New DeviceManager()
                    Try
                        ' open the device manager
                        deviceManager1.Open()
            
                        deviceManager1.ShowDefaultDeviceSelectionDialog()
            
                        ' get reference to the default device
                        Dim device1 As Device = deviceManager1.DefaultDevice
            
                        ' open the device
                        device1.Open()
            
                        ' set acquisition parameters
                        device1.ShowUI = False
                        device1.DisableAfterAcquire = True
            
                        ' specify that image info is necessary
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeCount))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeType))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeTextLength))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeText))
            
                        ' acquire images from device
                        Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                        Do
                            acquireModalState1 = device1.AcquireModal()
            
                            Select Case acquireModalState1
                                Case AcquireModalState.ImageAcquired
            
                                    ' get information about barcode count
                                    Dim barcodeCountInfo As ExtendedImageInfo = device1.ExtendedImageInfo(0)
                                    ' if value is valid
                                    If barcodeCountInfo.IsValueValid Then
                                        ' get container of value
                                        Dim valueContainer As TwainValueContainerBase = barcodeCountInfo.Value
                                        Dim oneValueContainer As TwainOneValueContainer = TryCast(valueContainer, TwainOneValueContainer)
                                        ' if container is valid
                                        If oneValueContainer IsNot Nothing Then
                                            ' get barcode count
                                            Dim barcodeCountValue As Integer = oneValueContainer.GetAsUInt32()
            
                                            ' get information about barcode type and text
                                            Dim barcodeTypeInfo As ExtendedImageInfo = device1.ExtendedImageInfo(1)
                                            Dim barcodeTextLengthInfo As ExtendedImageInfo = device1.ExtendedImageInfo(2)
                                            Dim barcodeTextInfo As ExtendedImageInfo = device1.ExtendedImageInfo(3)
            
                                            Dim infoString As String = ""
            
                                            ' if barcode is found
                                            If barcodeCountValue = 1 Then
                                                ' add information about barcode type to the info string
                                                If barcodeTypeInfo.IsValueValid Then
                                                    Dim barcodeTypeValue As TwainOneValueContainer = TryCast(barcodeTypeInfo.Value, TwainOneValueContainer)
                                                    infoString = "BarcodeType=" + barcodeTypeValue.Value + " "
                                                Else
                                                    infoString = "BarcodeType=Undefined "
                                                End If
            
                                                ' add information about barcode text to the info string
                                                If barcodeTextInfo.IsValueValid Then
                                                    Dim barcodeTextValue As TwainOneValueContainer = TryCast(barcodeTextInfo.Value, TwainOneValueContainer)
                                                    infoString = "BarcodeText='" + barcodeTextValue.Value + "'"
                                                Else
                                                    infoString = "BarcodeText=Undefined "
                                                End If
            
                                                ' write barcode info to the console
                                                Console.WriteLine(infoString)
            
                                                ' if barcodes are found
                                            Else
                                                For i As Integer = 0 To barcodeCountValue - 1
                                                    infoString = ""
            
                                                    ' add information about barcode type to the info string
                                                    If barcodeTypeInfo.IsValueValid Then
                                                        Dim barcodeTypeValue As TwainArrayValueContainer = TryCast(barcodeTypeInfo.Value, TwainArrayValueContainer)
                                                        infoString = "BarcodeType=" + barcodeTypeValue.Values.GetValue(i) + " "
                                                    Else
                                                        infoString = "BarcodeType=Undefined "
                                                    End If
            
                                                    ' add information about barcode text to the info string
                                                    If barcodeTextInfo.IsValueValid Then
                                                        Dim barcodeTextValue As TwainArrayValueContainer = TryCast(barcodeTextInfo.Value, TwainArrayValueContainer)
                                                        infoString = "BarcodeText='" + barcodeTextValue.Values.GetValue(i) + "'"
                                                    Else
                                                        infoString = "BarcodeText=Undefined "
                                                    End If
            
                                                    ' write barcode info to the console
                                                    Console.WriteLine(infoString)
                                                Next i
                                            End If
                                        End If
                                    End If
            
                                    ' if acquired image is present (Native or Memory transfer mode is used)
                                    If Not device1.AcquiredImage Is Nothing Then
                                        ' dispose the acquired image
                                        device1.AcquiredImage.Dispose()
                                    End If
                            End Select
                        Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                        ' close the device
                        device1.Close()
            
                        ' close the device manager
                        deviceManager1.Close()
            
                    Catch ex As TwainException
                        Console.WriteLine("Error: " + ex.Message)
                        Console.ReadLine()
                    End Try
                End Using
            End Sub
            </code>
            <code lang="C#">
            public void GetExtendedImageInfo()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    try
                    {
                        // open the device manager
                        deviceManager.Open();
            
                        deviceManager.ShowDefaultDeviceSelectionDialog();
            
                        // get reference to the default device
                        Device device = deviceManager.DefaultDevice;
            
                        // open the device
                        device.Open();
            
                        // set acquisition parameters
                        device.ShowUI = false;
                        device.DisableAfterAcquire = true;
            
                        // specify that image info is necessary
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeCount));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeType));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeTextLength));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeText));
            
                        // acquire images from device
                        AcquireModalState acquireModalState = AcquireModalState.None;
                        do
                        {
                            acquireModalState = device.AcquireModal();
            
                            switch (acquireModalState)
                            {
                                case AcquireModalState.ImageAcquired:
            
                                    // get information about barcode count
                                    ExtendedImageInfo barcodeCountInfo = device.ExtendedImageInfo[0];
                                    // if value is valid
                                    if (barcodeCountInfo.IsValueValid)
                                    {
                                        // get container of value
                                        TwainValueContainerBase valueContainer = barcodeCountInfo.Value;
                                        TwainOneValueContainer oneValueContainer = valueContainer as TwainOneValueContainer;
                                        // if container is valid
                                        if (oneValueContainer != null)
                                        {
                                            // get barcode count
                                            int barcodeCountValue = (int)oneValueContainer.GetAsUInt32();
            
                                            // get information about barcode type and text
                                            ExtendedImageInfo barcodeTypeInfo = device.ExtendedImageInfo[1];
                                            ExtendedImageInfo barcodeTextLengthInfo = device.ExtendedImageInfo[2];
                                            ExtendedImageInfo barcodeTextInfo = device.ExtendedImageInfo[3];
            
                                            string infoString;
            
                                            // if barcode is found
                                            if (barcodeCountValue == 1)
                                            {
                                                // add information about barcode type to the info string
                                                if (barcodeTypeInfo.IsValueValid)
                                                {
                                                    TwainOneValueContainer barcodeTypeValue = barcodeTypeInfo.Value as TwainOneValueContainer;
                                                    infoString = "BarcodeType=" + barcodeTypeValue.Value + " ";
                                                }
                                                else
                                                    infoString = "BarcodeType=Undefined ";
            
                                                // add information about barcode text to the info string
                                                if (barcodeTextInfo.IsValueValid)
                                                {
                                                    TwainOneValueContainer barcodeTextValue = barcodeTextInfo.Value as TwainOneValueContainer;
                                                    infoString = "BarcodeText='" + barcodeTextValue.Value + "'";
                                                }
                                                else
                                                    infoString = "BarcodeText=Undefined ";
            
                                                // write barcode info to the console
                                                Console.WriteLine(infoString);
                                            }
                                            // if barcodes are found
                                            else
                                            {
                                                for (int i = 0; i &lt; barcodeCountValue; i++)
                                                {
                                                    // add information about barcode type to the info string
                                                    if (barcodeTypeInfo.IsValueValid)
                                                    {
                                                        TwainArrayValueContainer barcodeTypeValue = barcodeTypeInfo.Value as TwainArrayValueContainer;
                                                        infoString = "BarcodeType=" + barcodeTypeValue.Values.GetValue(i) + " ";
                                                    }
                                                    else
                                                        infoString = "BarcodeType=Undefined ";
            
                                                    // add information about barcode text to the info string
                                                    if (barcodeTextInfo.IsValueValid)
                                                    {
                                                        TwainArrayValueContainer barcodeTextValue = barcodeTextInfo.Value as TwainArrayValueContainer;
                                                        infoString = "BarcodeText='" + barcodeTextValue.Values.GetValue(i) + "'";
                                                    }
                                                    else
                                                        infoString = "BarcodeText=Undefined ";
            
                                                    // write barcode info to the console
                                                    Console.WriteLine(infoString);
                                                }
                                            }
                                        }
                                    }
            
                                    // if acquired image is present (Native or Memory transfer mode is used)
                                    if (device.AcquiredImage != null)
                                        // dispose the acquired image
                                        device.AcquiredImage.Dispose();
            
                                    break;
                            }
                        }
                        while (acquireModalState != AcquireModalState.None);
            
                        // close the device
                        device.Close();
            
                        // close the device manager
                        deviceManager.Close();
                    }
                    catch (TwainException ex)
                    {
                        Console.WriteLine("Error: " + ex.Message);
                        Console.ReadLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ExtendedImageInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfo" /> class.
            </summary>
            <param name="infoId">The ID of the extended image information.</param>
            <param name="valueType">The value type of the extended image information.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.ExtendedImageInfo.#ctor(Vintasoft.WpfTwain.ExtendedImageInfoId)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfo" /> class.
            </summary>
            <param name="infoId">The ID of the extended image information.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.ExtendedImageInfo.ToString">
            <summary>
            Returns the extended image info as string.
            </summary>
            <returns>Extended image info as string.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.ExtendedImageInfo.InfoId">
            <summary>
            Returns the identifier of extended image info.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ExtendedImageInfo.IsValueValid">
            <summary>
            Determines that class contains the correct value of extended image info.
            </summary>
            <value>
            <b>true</b> if the <see cref="P:Vintasoft.WpfTwain.ExtendedImageInfo.Value" /> property contains the correct value;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.ExtendedImageInfo.ValueType">
            <summary>
            Gets the value type of extended image info.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ExtendedImageInfo.Value">
            <summary>
            Gets the value of extended image info.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ExtendedImageInfoCollection">
            <summary>
            Class that allows to extract extended information about acquired image.
            </summary>
            <example>This example shows how to get information about barcodes found on acquired image.
            <code lang="VB.NET">
            Public Sub GetExtendedImageInfo()
                Using deviceManager1 As New DeviceManager()
                    Try
                        ' open the device manager
                        deviceManager1.Open()
            
                        deviceManager1.ShowDefaultDeviceSelectionDialog()
            
                        ' get reference to the default device
                        Dim device1 As Device = deviceManager1.DefaultDevice
            
                        ' open the device
                        device1.Open()
            
                        ' set acquisition parameters
                        device1.ShowUI = False
                        device1.DisableAfterAcquire = True
            
                        ' specify that image info is necessary
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeCount))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeType))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeTextLength))
                        device1.ExtendedImageInfo.Add(New ExtendedImageInfo(ExtendedImageInfoId.BarcodeText))
            
                        ' acquire images from device
                        Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                        Do
                            acquireModalState1 = device1.AcquireModal()
            
                            Select Case acquireModalState1
                                Case AcquireModalState.ImageAcquired
            
                                    ' get information about barcode count
                                    Dim barcodeCountInfo As ExtendedImageInfo = device1.ExtendedImageInfo(0)
                                    ' if value is valid
                                    If barcodeCountInfo.IsValueValid Then
                                        ' get container of value
                                        Dim valueContainer As TwainValueContainerBase = barcodeCountInfo.Value
                                        Dim oneValueContainer As TwainOneValueContainer = TryCast(valueContainer, TwainOneValueContainer)
                                        ' if container is valid
                                        If oneValueContainer IsNot Nothing Then
                                            ' get barcode count
                                            Dim barcodeCountValue As Integer = oneValueContainer.GetAsUInt32()
            
                                            ' get information about barcode type and text
                                            Dim barcodeTypeInfo As ExtendedImageInfo = device1.ExtendedImageInfo(1)
                                            Dim barcodeTextLengthInfo As ExtendedImageInfo = device1.ExtendedImageInfo(2)
                                            Dim barcodeTextInfo As ExtendedImageInfo = device1.ExtendedImageInfo(3)
            
                                            Dim infoString As String = ""
            
                                            ' if barcode is found
                                            If barcodeCountValue = 1 Then
                                                ' add information about barcode type to the info string
                                                If barcodeTypeInfo.IsValueValid Then
                                                    Dim barcodeTypeValue As TwainOneValueContainer = TryCast(barcodeTypeInfo.Value, TwainOneValueContainer)
                                                    infoString = "BarcodeType=" + barcodeTypeValue.Value + " "
                                                Else
                                                    infoString = "BarcodeType=Undefined "
                                                End If
            
                                                ' add information about barcode text to the info string
                                                If barcodeTextInfo.IsValueValid Then
                                                    Dim barcodeTextValue As TwainOneValueContainer = TryCast(barcodeTextInfo.Value, TwainOneValueContainer)
                                                    infoString = "BarcodeText='" + barcodeTextValue.Value + "'"
                                                Else
                                                    infoString = "BarcodeText=Undefined "
                                                End If
            
                                                ' write barcode info to the console
                                                Console.WriteLine(infoString)
            
                                                ' if barcodes are found
                                            Else
                                                For i As Integer = 0 To barcodeCountValue - 1
                                                    infoString = ""
            
                                                    ' add information about barcode type to the info string
                                                    If barcodeTypeInfo.IsValueValid Then
                                                        Dim barcodeTypeValue As TwainArrayValueContainer = TryCast(barcodeTypeInfo.Value, TwainArrayValueContainer)
                                                        infoString = "BarcodeType=" + barcodeTypeValue.Values.GetValue(i) + " "
                                                    Else
                                                        infoString = "BarcodeType=Undefined "
                                                    End If
            
                                                    ' add information about barcode text to the info string
                                                    If barcodeTextInfo.IsValueValid Then
                                                        Dim barcodeTextValue As TwainArrayValueContainer = TryCast(barcodeTextInfo.Value, TwainArrayValueContainer)
                                                        infoString = "BarcodeText='" + barcodeTextValue.Values.GetValue(i) + "'"
                                                    Else
                                                        infoString = "BarcodeText=Undefined "
                                                    End If
            
                                                    ' write barcode info to the console
                                                    Console.WriteLine(infoString)
                                                Next i
                                            End If
                                        End If
                                    End If
            
                                    ' if acquired image is present (Native or Memory transfer mode is used)
                                    If Not device1.AcquiredImage Is Nothing Then
                                        ' dispose the acquired image
                                        device1.AcquiredImage.Dispose()
                                    End If
                            End Select
                        Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                        ' close the device
                        device1.Close()
            
                        ' close the device manager
                        deviceManager1.Close()
            
                    Catch ex As TwainException
                        Console.WriteLine("Error: " + ex.Message)
                        Console.ReadLine()
                    End Try
                End Using
            End Sub
            </code>
            <code lang="C#">
            public void GetExtendedImageInfo()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    try
                    {
                        // open the device manager
                        deviceManager.Open();
            
                        deviceManager.ShowDefaultDeviceSelectionDialog();
            
                        // get reference to the default device
                        Device device = deviceManager.DefaultDevice;
            
                        // open the device
                        device.Open();
            
                        // set acquisition parameters
                        device.ShowUI = false;
                        device.DisableAfterAcquire = true;
            
                        // specify that image info is necessary
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeCount));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeType));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeTextLength));
                        device.ExtendedImageInfo.Add(new ExtendedImageInfo(ExtendedImageInfoId.BarcodeText));
            
                        // acquire images from device
                        AcquireModalState acquireModalState = AcquireModalState.None;
                        do
                        {
                            acquireModalState = device.AcquireModal();
            
                            switch (acquireModalState)
                            {
                                case AcquireModalState.ImageAcquired:
            
                                    // get information about barcode count
                                    ExtendedImageInfo barcodeCountInfo = device.ExtendedImageInfo[0];
                                    // if value is valid
                                    if (barcodeCountInfo.IsValueValid)
                                    {
                                        // get container of value
                                        TwainValueContainerBase valueContainer = barcodeCountInfo.Value;
                                        TwainOneValueContainer oneValueContainer = valueContainer as TwainOneValueContainer;
                                        // if container is valid
                                        if (oneValueContainer != null)
                                        {
                                            // get barcode count
                                            int barcodeCountValue = (int)oneValueContainer.GetAsUInt32();
            
                                            // get information about barcode type and text
                                            ExtendedImageInfo barcodeTypeInfo = device.ExtendedImageInfo[1];
                                            ExtendedImageInfo barcodeTextLengthInfo = device.ExtendedImageInfo[2];
                                            ExtendedImageInfo barcodeTextInfo = device.ExtendedImageInfo[3];
            
                                            string infoString;
            
                                            // if barcode is found
                                            if (barcodeCountValue == 1)
                                            {
                                                // add information about barcode type to the info string
                                                if (barcodeTypeInfo.IsValueValid)
                                                {
                                                    TwainOneValueContainer barcodeTypeValue = barcodeTypeInfo.Value as TwainOneValueContainer;
                                                    infoString = "BarcodeType=" + barcodeTypeValue.Value + " ";
                                                }
                                                else
                                                    infoString = "BarcodeType=Undefined ";
            
                                                // add information about barcode text to the info string
                                                if (barcodeTextInfo.IsValueValid)
                                                {
                                                    TwainOneValueContainer barcodeTextValue = barcodeTextInfo.Value as TwainOneValueContainer;
                                                    infoString = "BarcodeText='" + barcodeTextValue.Value + "'";
                                                }
                                                else
                                                    infoString = "BarcodeText=Undefined ";
            
                                                // write barcode info to the console
                                                Console.WriteLine(infoString);
                                            }
                                            // if barcodes are found
                                            else
                                            {
                                                for (int i = 0; i &lt; barcodeCountValue; i++)
                                                {
                                                    // add information about barcode type to the info string
                                                    if (barcodeTypeInfo.IsValueValid)
                                                    {
                                                        TwainArrayValueContainer barcodeTypeValue = barcodeTypeInfo.Value as TwainArrayValueContainer;
                                                        infoString = "BarcodeType=" + barcodeTypeValue.Values.GetValue(i) + " ";
                                                    }
                                                    else
                                                        infoString = "BarcodeType=Undefined ";
            
                                                    // add information about barcode text to the info string
                                                    if (barcodeTextInfo.IsValueValid)
                                                    {
                                                        TwainArrayValueContainer barcodeTextValue = barcodeTextInfo.Value as TwainArrayValueContainer;
                                                        infoString = "BarcodeText='" + barcodeTextValue.Values.GetValue(i) + "'";
                                                    }
                                                    else
                                                        infoString = "BarcodeText=Undefined ";
            
                                                    // write barcode info to the console
                                                    Console.WriteLine(infoString);
                                                }
                                            }
                                        }
                                    }
            
                                    // if acquired image is present (Native or Memory transfer mode is used)
                                    if (device.AcquiredImage != null)
                                        // dispose the acquired image
                                        device.AcquiredImage.Dispose();
            
                                    break;
                            }
                        }
                        while (acquireModalState != AcquireModalState.None);
            
                        // close the device
                        device.Close();
            
                        // close the device manager
                        deviceManager.Close();
                    }
                    catch (TwainException ex)
                    {
                        Console.WriteLine("Error: " + ex.Message);
                        Console.ReadLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.ExtendedImageInfoCollection.Add(Vintasoft.WpfTwain.ExtendedImageInfo)">
            <summary>
            Adds an ID of extended image information which should be extracted.
            </summary>
            <param name="value">The <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfo" /> to be added to the
            end of the <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfo" />.</param>
            <returns>The index at which the ID has been added.</returns>
            <exception cref="T:System.NotSupportedException">This method is not implemented.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="M:Vintasoft.WpfTwain.ExtendedImageInfoCollection.Insert(System.Int32,Vintasoft.WpfTwain.ExtendedImageInfo)">
            <summary>
            Inserts an ID of extended image information which should be extracted.
            </summary>
            <param name="index">The zero-based index at which ID should be inserted.</param>
            <param name="value">The <see cref="T:Vintasoft.WpfTwain.ExtendedImageInfo" /> to insert.</param>
            <exception cref="T:System.NotSupportedException">This method is not implemented.</exception>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.ExtendedImageInfoCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than zero.<br />-or-<br /><i>index</i> is equal to or greater than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceImageLayout">
            <summary>
            Class that allows to manipulate the image layout of TWAIN device.
            </summary>
            <example>This example shows how to acquire only the top part of page.
            <code lang="VB.NET">
            Private Sub AcquirePartOfImage()
                Using deviceManager As New DeviceManager()
                    Try
                        ' open the device manager
                        deviceManager.Open()
            
                        deviceManager.ShowDefaultDeviceSelectionDialog()
            
                        ' get reference to the default device
                        Dim device As Device = deviceManager.DefaultDevice
            
                        ' open the device
                        device.Open()
            
                        ' set acquisition parameters
                        device.ShowUI = False
                        device.DisableAfterAcquire = True
                        ' set image layout (get only the top half of the page)
                        device.UnitOfMeasure = UnitOfMeasure.Inches
                        Dim imageLayout As RectangleF = device.ImageLayout.Get()
                        device.ImageLayout.Set(0, 0, imageLayout.Width, imageLayout.Height / 2)
            
                        Dim tiffFilename As String = Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif")
            
                        ' acquire images from device
                        Dim acquireModalState1 As AcquireModalState = AcquireModalState.None
                        Do
                            acquireModalState1 = device.AcquireModal()
                            Select Case acquireModalState1
                                Case AcquireModalState.ImageAcquired
                                    ' save acquired image to multipage TIFF file
                                    device.AcquiredImage.Save(tiffFilename)
            
                                    ' dispose the acquired image
                                    device.AcquiredImage.Dispose()
                            End Select
                        Loop While acquireModalState1 &lt;&gt; AcquireModalState.None
            
                        ' close the device
                        device.Close()
            
                        ' close the device manager
                        deviceManager.Close()
            
                    Catch ex As TwainException
                        Console.WriteLine("Error: " + ex.Message)
                        Console.ReadLine()
                    End Try
                End Using
            End Sub
            </code>
            <code lang="C#">
            private void AcquirePartOfImage()
            {
                using (DeviceManager deviceManager = new DeviceManager())
                {
                    try
                    {
                        // open the device manager
                        deviceManager.Open();
            
                        deviceManager.ShowDefaultDeviceSelectionDialog();
            
                        // get reference to the default device
                        Device device = deviceManager.DefaultDevice;
            
                        // open the device
                        device.Open();
            
                        // set acquisition parameters
                        device.ShowUI = false;
                        device.DisableAfterAcquire = true;
                        // set image layout (get only the top half of the page)
                        device.UnitOfMeasure = UnitOfMeasure.Inches;
                        RectangleF imageLayout = device.ImageLayout.Get();
                        device.ImageLayout.Set(0, 0, imageLayout.Width, imageLayout.Height / 2);
            
                        string tiffFilename = Path.Combine(Directory.GetCurrentDirectory(), "multipage.tif");
            
                        // acquire images from device
                        AcquireModalState acquireModalState = AcquireModalState.None;
                        do
                        {
                            acquireModalState = device.AcquireModal();
                            switch (acquireModalState)
                            {
                                case AcquireModalState.ImageAcquired:
                                    // save acquired image to multipage TIFF file
                                    device.AcquiredImage.Save(tiffFilename);
                                    // dispose the acquired image
                                    device.AcquiredImage.Dispose();
                                    break;
                            }
                        }
                        while (acquireModalState != AcquireModalState.None);
            
                        // close the device
                        device.Close();
            
                        // close the device manager
                        deviceManager.Close();
                    }
                    catch (TwainException ex)
                    {
                        Console.WriteLine("Error: " + ex.Message);
                        Console.ReadLine();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.Get">
            <summary>
            Gets the current image layout rectangle of document/page/frame.
            </summary>
            <returns>Current image layout rectangle.</returns>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" /> = <b>false</b>).<br />
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.GetAsString">
            <summary>
            Gets the current image layout rectangle of document/page/frame.
            </summary>
            <returns>Coordinate values of the image layout rectangle as a string in the following
            format: "left top right bottom". Here is an example: "0.0 0.33 3.47 6.12".</returns>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).<br />
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(System.String)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.GetDefault">
            <summary>
            Gets the default image layout rectangle of document/page/frame.
            </summary>
            <returns>Default image layout rectangle.</returns>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).<br />
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(Vintasoft.WpfTwain.RectangleF)">
            <summary>
            Sets the image layout rectangle of document/page/frame.
            </summary>
            <param name="frame">Image layout rectangle.</param>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            <see cref="E:Vintasoft.WpfTwain.DeviceImageLayout.Approximated" /> event occurs if device approximated requested value of the image layout.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the image layout rectangle of document/page/frame.
            </summary>
            <param name="left">Value of the left coordinate of the image layout rectangle.</param>
            <param name="top">Value of the top coordinate of the image layout rectangle.</param>
            <param name="right">Value of the right coordinate of the image layout rectangle.</param>
            <param name="bottom">Value of the bottom coordinate of the image layout rectangle.</param>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(System.String)">
            <summary>
            Sets the image layout rectangle of document/page/frame.
            </summary>
            <param name="frame">Coordinate values the image layout rectangle in the following format:
            "left top right bottom".</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>frame</i> is <b>null</b>.</exception>
            <exception cref="T:System.FormatException">Thrown if <i>frame</i> contains numbers in
            not a valid format.</exception>
            <exception cref="T:System.OverflowException">Thrown if <i>frame</i> contains number less
            than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).<br />
            <br />
            This method should be used in programming environments which cannot work
            with referred float value, for example, in JavaScript.
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="M:Vintasoft.WpfTwain.DeviceImageLayout.GetAsString" />
            <seealso cref="M:Vintasoft.WpfTwain.DeviceImageLayout.SetLayout(System.String)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.SetLayout(System.String)">
            <summary>
            Sets the image layout rectangle of document/page/frame.
            </summary>
            <param name="frame">Coordinate values the image layout rectangle in the following format:
            "left top right bottom".</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>frame</i> is <b>null</b>.</exception>
            <exception cref="T:System.FormatException">Thrown if <i>frame</i> contains numbers in
            not a valid format.</exception>
            <exception cref="T:System.OverflowException">Thrown if <i>frame</i> contains number less
            than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).<br />
            <br />
            This method should be used in programming environments which cannot work
            with referred float value, for example, in JavaScript.
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
            <seealso cref="M:Vintasoft.WpfTwain.DeviceImageLayout.GetAsString" />
            <seealso cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(System.String)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceImageLayout.Reset">
            <summary>
            Resets the image layout rectangle of document/page/frame.
            </summary>
            <remarks>
            The image layout rectangle defines what portion of the device's scanning area will be acquired.<br />
            <br />
            Document number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber" /> property,
            Page number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber" /> property,
            Frame number can be set using the <see cref="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber" /> property<br />
            <br />
            Call this method only when device is opened (<see cref="P:Vintasoft.WpfTwain.Device.State" /> ==
            <see cref="T:Vintasoft.WpfTwain.DeviceState" />.Opened).<br />
            <br />
            This method has effect only if you do not use the User Interface
            (<see cref="P:Vintasoft.WpfTwain.Device.ShowUI" />=<b>false</b>).<br />
            </remarks>
            <example>Please see example <see cref="T:Vintasoft.WpfTwain.DeviceImageLayout">here</see>.</example>
            <seealso cref="M:Vintasoft.WpfTwain.Device.Open" />
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceImageLayout.DocumentNumber">
            <summary>
            Gets or sets the document number of the image layout frame.
            </summary>
            <value>
            Possible values from 1 to N. Default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>value</i> is out of range.</exception>
            <remarks>
            Value of this property has effect during call of the <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Get" />,
            <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(Vintasoft.WpfTwain.RectangleF)" />,
            <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Reset" /> methods.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceImageLayout.PageNumber">
            <summary>
            Gets or sets the page number of the image layout frame.
            </summary>
            <value>
            Possible values from 1 to N. Default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>value</i> is out of range.</exception>
            <remarks>
            Value of this property has effect during call of the <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Get" />,
            <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(Vintasoft.WpfTwain.RectangleF)" />, <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Reset" /> methods.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceImageLayout.FrameNumber">
            <summary>
            Gets or sets the frame number of the image layout frame.
            </summary>
            <value>
            Possible values from 1 to N. Default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>value</i> is out of range.</exception>
            <remarks>
            Value of this property has effect during call of the <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Get" />,
            <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Set(Vintasoft.WpfTwain.RectangleF)" />, <see cref="M:Vintasoft.WpfTwain.DeviceImageLayout.Reset" /> methods.
            </remarks>
        </member>
        <member name="E:Vintasoft.WpfTwain.DeviceImageLayout.Approximated">
            <summary>
            Occurs when image layout was approximated.
            </summary>
            <remarks>
            Sometimes device approximates requested value of the image layout as closely as it can.
            </remarks>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceInfo">
            <summary>
            Information about the device.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceInfo" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceInfo.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Vintasoft.WpfTwain.DeviceInfo" /> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.WpfTwain.DeviceInfo" /> to compare with
            the current <see cref="T:Vintasoft.WpfTwain.DeviceInfo" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.WpfTwain.DeviceInfo" /> is
            equal to the current <see cref="T:Vintasoft.WpfTwain.DeviceInfo" />;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceInfo.GetHashCode">
            <summary>
            Returns a hash code of this object.
            </summary>
            <returns>Hash code of this object.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.Manufacturer">
            <summary>
            Manufacturer name.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.ProductFamily">
            <summary>
            Product family name.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.ProductName">
            <summary>
            Product name, i.e. data source name.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.TwainVersion">
            <summary>
            Version of TWAIN protocol with which data source is compatible.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.DriverVersion">
            <summary>
            Version of the data source driver.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.IsWIA">
            <summary>
            Determines that data source driver is WIA driver.
            </summary>
            <value>
            <b>true</b> - data source driver is WIA driver;
            <b>false</b> - data source driver is TWAIN driver.
            </value>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceInfo.IsTwain2Compatible">
            <summary>
            Determines that data source is TWAIN 2.0 compatible.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImageInfo">
            <summary>
            Class that contains information about acquired image.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImageInfo.ToString">
            <summary>
            Returns the string that contains information about the image.
            </summary>
            <returns>String that contains information about the image.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.Width">
            <summary>
            Gets the width, in pixels, of the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.Height">
            <summary>
            Gets the height, in pixels, of the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.PixelType">
            <summary>
            Gets the pixel type of the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.BitCount">
            <summary>
            Gets the bit count of the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.SamplesPerPixel">
            <summary>
            Gets the number of samples per pixel in the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.Resolution">
            <summary>
            Gets the resolution of the image. 
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.ImageInfo.Compression">
            <summary>
            Gets the compression of the image.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceManagerState">
            <summary>
            Specifies available states of the device manager.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceManagerState.Closed">
            <summary>
            Deveice manager is closed.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceManagerState.Loaded">
            <summary>
            Device manager is loaded.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DeviceManagerState.Opened">
            <summary>
            Device manager is opened.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainValueType">
            <summary>
            Specifies available types of TWAIN values.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Int8">
            <summary>
            Signed 8-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Int16">
            <summary>
            Signed 16-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Int32">
            <summary>
            Signed 32-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.UInt8">
            <summary>
            Unsigned 8-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.UInt16">
            <summary>
            Unsigned 16-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.UInt32">
            <summary>
            Unsigned 32-bit integer
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Bool">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Fix32">
            <summary>
            Fixed point structure type
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Frame">
            <summary>
            Defines a frame rectangle
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Str32">
            <summary>
            32-character length's string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Str64">
            <summary>
            64-character length's string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Str128">
            <summary>
            128-character length's string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Str255">
            <summary>
            255-character length's string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Str1024">
            <summary>
            1024-character length's string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Uni512">
            <summary>
            512-character length's unicode string
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.MemRef">
            <summary>
            Memory reference
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.TwainValueType.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.OpenedDeviceChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanging" /> 
            and <see cref="E:Vintasoft.WpfTwain.DeviceManager.OpenedDeviceChanged" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.OpenedDeviceChangedEventArgs.#ctor(Vintasoft.WpfTwain.Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.OpenedDeviceChangedEventArgs" /> class.
            </summary>
            <param name="device">Current device.</param>
        </member>
        <member name="P:Vintasoft.WpfTwain.OpenedDeviceChangedEventArgs.Device">
            <summary>
            Gets the opened device.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DeviceManagerStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.WpfTwain.DeviceManager.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.DeviceManagerStateChangedEventArgs.#ctor(Vintasoft.WpfTwain.DeviceManagerState,Vintasoft.WpfTwain.DeviceManagerState)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.DeviceManagerStateChangedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManagerStateChangedEventArgs.State">
            <summary>
            Gets the current state of the device manager.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.DeviceManagerStateChangedEventArgs.PreviousState">
            <summary>
            Gets the previous state of the device manager.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.ImagingException">
            <summary>
            Represents errors that occur during processing of acquired image.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImagingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImagingException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImagingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImagingException" /> class with a
            specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImagingException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.ImagingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.ImagingException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException">
            <summary>
            Represents errors that occur during work with the TWAIN device capability.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainException">
            <summary>
            Base class for all exceptions that can occur during work with TWAIN device manager or device.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainException" /> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceCapabilityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceCapabilityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException" /> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceCapabilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceCapabilityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceCapabilityException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainDeviceException">
            <summary>
            Represents errors that occur during work with the TWAIN device.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceException" /> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainDeviceManagerException">
            <summary>
            Represents errors that occur during work with the TWAIN device manager.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceManagerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException" /> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceManagerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainDeviceManagerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainDeviceManagerException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainInvalidStateException">
            <summary>
            Represents errors that occur if TWAIN device manager or device is in wrong state.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainInvalidStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainInvalidStateException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainInvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainInvalidStateException" /> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainInvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainInvalidStateException" /> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainInvalidStateException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a <b>null</b> reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.WpfTwain.BorderColor">
            <summary>
            Specifies available types of border colors.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BorderColor.AutoDetect">
            <summary>
            Free space around rotated image will be filled with border color of rotated image
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BorderColor.Black">
            <summary>
            Free space around rotated image will be filled with black color
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.BorderColor.White">
            <summary>
            Free space around rotated image will be filled with white color
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.DebugLevel">
            <summary>
            Specifies available debug levels.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DebugLevel.Fatal">
            <summary>
            The enumeration value is 0.
            Fatal error messages are added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DebugLevel.Error">
            <summary>
            The enumeration value is 1.
            Error messages are added to log-file.
            Messages for <i>Fatal</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DebugLevel.Warning">
            <summary>
            The enumeration value is 2.
            Warning messages are added to log-file.
            Messages for <i>Error</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DebugLevel.Info">
            <summary>
            The enumeration value is 3.
            Important debug information is added to log-file.
            Messages for <i>Warning</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.WpfTwain.DebugLevel.Debug">
            <summary>
            The enumeration value is 4.
            Any debug information is added to log-file.
            Messages for <i>Info</i> level also added to log-file.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.Rectangle">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.Rectangle" /> class with the specified location and size.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.Equals(System.Object)">
            <summary>
            Tests whether obj is a <see cref="T:Vintasoft.WpfTwain.Rectangle" /> with the same location and size of this <see cref="T:Vintasoft.WpfTwain.Rectangle" />.
            </summary>
            <param name="obj">This method returns <b>true</b> if obj is a <see cref="T:Vintasoft.WpfTwain.Rectangle" /> and
            its <see cref="P:Vintasoft.WpfTwain.Rectangle.Left" />, <see cref="P:Vintasoft.WpfTwain.Rectangle.Top" />, <see cref="P:Vintasoft.WpfTwain.Rectangle.Width" />, and <see cref="P:Vintasoft.WpfTwain.Rectangle.Height" />
            properties are equal to the corresponding properties of this <see cref="T:Vintasoft.WpfTwain.Rectangle" />;
            otherwise, <b>false</b>.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this Rectangle structure. 
            </summary>
            <returns>The hash code for this Rectangle.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.ToString">
            <summary>
            Converts the attributes of this Rectangle to a human-readable string.
            </summary>
            <returns>A string that contains the position, width, and height
            of this Rectangle structure.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.op_Equality(Vintasoft.WpfTwain.Rectangle,Vintasoft.WpfTwain.Rectangle)">
            <summary>
            Tests whether two <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <b>true</b> if the two specified <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structures
            have equal <see cref="P:Vintasoft.WpfTwain.Rectangle.Left" />, <see cref="P:Vintasoft.WpfTwain.Rectangle.Top" />, <see cref="P:Vintasoft.WpfTwain.Rectangle.Width" />, and <see cref="P:Vintasoft.WpfTwain.Rectangle.Height" />
            properties.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.Rectangle.op_Inequality(Vintasoft.WpfTwain.Rectangle,Vintasoft.WpfTwain.Rectangle)">
            <summary>
            Tests whether two <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <b>true</b> if any of the <see cref="P:Vintasoft.WpfTwain.Rectangle.Left" /> , <see cref="P:Vintasoft.WpfTwain.Rectangle.Top" />,
            <see cref="P:Vintasoft.WpfTwain.Rectangle.Width" />, or <see cref="P:Vintasoft.WpfTwain.Rectangle.Height" /> properties of the two <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structures
            are unequal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Empty">
            <summary>
            Represents a <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure with its properties left uninitialized.
            </summary>
            <remarks>
            A rectangle is defined by its width, height and upper-left corner.
            </remarks>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="P:Vintasoft.WpfTwain.Rectangle.Left" /> and <see cref="P:Vintasoft.WpfTwain.Rectangle.Width" /> property
            values of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the <see cref="P:Vintasoft.WpfTwain.Rectangle.Top" /> and <see cref="P:Vintasoft.WpfTwain.Rectangle.Height" /> property
            values of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.Height">
            <summary>
            Gets or sets the height of this <see cref="T:Vintasoft.WpfTwain.Rectangle" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.Rectangle.IsEmpty">
            <summary>
            Tests whether the <see cref="P:Vintasoft.WpfTwain.Rectangle.Width" /> or <see cref="P:Vintasoft.WpfTwain.Rectangle.Height" /> property of this <see cref="T:Vintasoft.WpfTwain.Rectangle" />
            has a value of zero.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.RectangleF">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.RectangleF" /> class with the specified location and size.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.Equals(System.Object)">
            <summary>
            Tests whether obj is a <see cref="T:Vintasoft.WpfTwain.RectangleF" /> with the same location and size of this <see cref="T:Vintasoft.WpfTwain.RectangleF" />.
            </summary>
            <param name="obj">This method returns <b>true</b> if obj is a <see cref="T:Vintasoft.WpfTwain.RectangleF" /> and
            its <see cref="P:Vintasoft.WpfTwain.RectangleF.Left" />, <see cref="P:Vintasoft.WpfTwain.RectangleF.Top" />, <see cref="P:Vintasoft.WpfTwain.RectangleF.Width" />, and <see cref="P:Vintasoft.WpfTwain.RectangleF.Height" />
            properties are equal to the corresponding properties of this <see cref="T:Vintasoft.WpfTwain.RectangleF" />;
            otherwise, <b>false</b>.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this RectangleF structure. 
            </summary>
            <returns>The hash code for this RectangleF.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.ToString">
            <summary>
            Converts the attributes of this Rectangle to a human-readable string.
            </summary>
            <returns>A string that contains the position, width, and height
            of this Rectangle structure.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.op_Equality(Vintasoft.WpfTwain.RectangleF,Vintasoft.WpfTwain.RectangleF)">
            <summary>
            Tests whether two <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <b>true</b> if the two specified <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structures
            have equal <see cref="P:Vintasoft.WpfTwain.RectangleF.Left" />, <see cref="P:Vintasoft.WpfTwain.RectangleF.Top" />, <see cref="P:Vintasoft.WpfTwain.RectangleF.Width" />, and <see cref="P:Vintasoft.WpfTwain.RectangleF.Height" />
            properties.</returns>
        </member>
        <member name="M:Vintasoft.WpfTwain.RectangleF.op_Inequality(Vintasoft.WpfTwain.RectangleF,Vintasoft.WpfTwain.RectangleF)">
            <summary>
            Tests whether two <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <b>true</b> if any of the <see cref="P:Vintasoft.WpfTwain.RectangleF.Left" /> , <see cref="P:Vintasoft.WpfTwain.RectangleF.Top" />,
            <see cref="P:Vintasoft.WpfTwain.RectangleF.Width" />, or <see cref="P:Vintasoft.WpfTwain.RectangleF.Height" /> properties of the two <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structures
            are unequal;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Empty">
            <summary>
            Represents an instance of the <see cref="T:Vintasoft.WpfTwain.RectangleF" /> class with its members uninitialized.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="P:Vintasoft.WpfTwain.RectangleF.Left" /> and <see cref="P:Vintasoft.WpfTwain.RectangleF.Width" /> of this
            <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="P:Vintasoft.WpfTwain.RectangleF.Top" /> and <see cref="P:Vintasoft.WpfTwain.RectangleF.Height" /> of this
            <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Width">
            <summary>
            Gets or sets the width of this <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.Height">
            <summary>
            Gets or sets the height of this <see cref="T:Vintasoft.WpfTwain.RectangleF" /> structure.
            </summary>
        </member>
        <member name="P:Vintasoft.WpfTwain.RectangleF.IsEmpty">
            <summary>
            Tests whether the <see cref="P:Vintasoft.WpfTwain.RectangleF.Width" /> or <see cref="P:Vintasoft.WpfTwain.RectangleF.Height" /> property of this <see cref="T:Vintasoft.WpfTwain.RectangleF" />
            has a value of zero.
            </summary>
        </member>
        <member name="T:Vintasoft.WpfTwain.TwainEnvironment">
            <summary>
            Provides information about the current environment and platform.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.WpfTwain.TwainEnvironment" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebugging(System.String)">
            <summary>
            Enable the debuging.
            </summary>
            <param name="filename">Debug information will be written to this file.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if file does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            File must be accessible for writing.<br />
            <br />
            Debug information is added to the file, file is not truncated if it exists.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevel" />
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebuggingInBrowser(System.String)">
            <summary>
            Enable the debuging (use this method in JavaScript only).
            </summary>
            <param name="filename">Debug information will be written to this file.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if file does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            File must be accessible for writing.<br />
            <br />
            Debug information is added to the file, file is not truncated if it exists.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabledInBrowser" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebuggingInBrowser" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevelInBrowser" />
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebugging(System.IO.Stream)">
            <summary>
            Enable the debuging.
            </summary>
            <param name="stream">Debug information will be written to this stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            Stream must be accessible for writing.<br />
            <br />
            Debug information is added to the stream, stream is not truncated if it is not empty.<br />
            <br />
            Stream will not be closed when debugging will be disabled.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevel" />
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebuggingInBrowser(System.IO.Stream)">
            <summary>
            Enable the debuging (use this method in JavaScript only).
            </summary>
            <param name="stream">Debug information will be written to this stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            Stream must be accessible for writing.<br />
            <br />
            Debug information is added to the stream, stream is not truncated if it is not empty.<br />
            <br />
            Stream will not be closed when debugging will be disabled.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabledInBrowser" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebuggingInBrowser" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevelInBrowser" />
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebugging">
            <summary>
            Disable the debugging.
            </summary>
            <remarks>
            Stream is not closed when debugging is disabled if stream is used as a source of log-file.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebugging(System.String)" />
        </member>
        <member name="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebuggingInBrowser">
            <summary>
            Disable the debugging (use this method in JavaScript only).
            </summary>
            <remarks>
            Stream is not closed when debugging is disabled if stream is used as a source of log-file.
            </remarks>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabledInBrowser" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebuggingInBrowser(System.String)" />
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabled">
            <summary>
            Gets a value indicating whether the debug information is written to log-file.
            </summary>
            <value>
            <b>true</b> - debug information is written to log-file;
            <b>false</b> - debug information is not written to log-file.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Enable debugging only this is really necessary because debugging can decrease
            working speed of your application.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebugging(System.String)" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevel" />
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabledInBrowser">
            <summary>
            Gets a value indicating whether the debug information is written to log-file
            (use this property in JavaScript only).
            </summary>
            <value>
            <b>true</b> - debug information is written to log-file;
            <b>false</b> - debug information is not written to log-file.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Enable debugging only this is really necessary because debugging can decrease
            working speed of your application.
            </remarks>
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.EnableDebuggingInBrowser(System.String)" />
            <seealso cref="M:Vintasoft.WpfTwain.TwainEnvironment.DisableDebuggingInBrowser" />
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevelInBrowser" />
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevel">
            <summary>
            Get or sets a level of debug information which written to log-file.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.WpfTwain.DebugLevel" /><b>Info</b>.
            </value>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabled" />
        </member>
        <member name="P:Vintasoft.WpfTwain.TwainEnvironment.DebugLevelInBrowser">
            <summary>
            Get or sets a level of debug information which written to log-file
            (use this property in JavaScript only).
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.WpfTwain.DebugLevel" /><b>Info</b>.
            </value>
            <seealso cref="P:Vintasoft.WpfTwain.TwainEnvironment.IsDebuggingEnabledInBrowser" />
        </member>
    </members>
</doc>
